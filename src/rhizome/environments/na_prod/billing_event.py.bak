"""
NA Production Billing Event environment configuration.

This module provides access to the billing-event database in the
na-prod-us-central1 cluster through CloudSQL proxy port-forwarding.
"""

from __future__ import annotations

from enum import StrEnum
from typing import Any

from rhizome.environments.base import DatabaseConfig, Environment, PortForwardConfig, SecretManager, ToolsProtocol
from rhizome.environments.na_prod.expected_data.billing_event_app_metered_event import AppMeteredEventNaProd
from rhizome.environments.na_prod.expected_data.billing_event_app_subscription_current import (
    AppSubscriptionCurrentNaProd,
)
from rhizome.environments.na_prod.expected_data.billing_event_app_subscription_daily import AppSubscriptionDailyNaProd
from rhizome.environments.na_prod.expected_data.billing_event_app_subscription_event import AppSubscriptionEventNaProd
from rhizome.environments.na_prod.expected_data.billing_event_as_of_merchant import AsOfMerchantNaProd
from rhizome.environments.na_prod.expected_data.billing_event_as_of_merchant_device import AsOfMerchantDeviceNaProd
from rhizome.environments.na_prod.expected_data.billing_event_as_of_merchant_plan import AsOfMerchantPlanNaProd
from rhizome.environments.na_prod.expected_data.billing_event_backfill_acceptance import BackfillAcceptanceNaProd
from rhizome.environments.na_prod.expected_data.billing_event_billing_event_history import BillingEventHistoryNaProd
from rhizome.environments.na_prod.expected_data.billing_event_cellular_arrears_acceptances import (
    CellularArrearsAcceptancesNaProd,
)
from rhizome.environments.na_prod.expected_data.billing_event_cellular_billing_arrears_info import (
    CellularBillingArrearsInfoNaProd,
)
from rhizome.environments.na_prod.expected_data.billing_event_consumer_failure import ConsumerFailureNaProd
from rhizome.environments.na_prod.expected_data.billing_event_consumer_failure_history import (
    ConsumerFailureHistoryNaProd,
)
from rhizome.environments.na_prod.expected_data.billing_event_deserializable_failure import DeserializableFailureNaProd
from rhizome.environments.na_prod.expected_data.billing_event_event_filter import EventFilterNaProd
from rhizome.environments.na_prod.expected_data.billing_event_event_ignored import EventIgnoredNaProd
from rhizome.environments.na_prod.expected_data.billing_event_iccid_carrier import IccidCarrierNaProd
from rhizome.environments.na_prod.expected_data.billing_event_job_assassination_contract import (
    JobAssassinationContractNaProd,
)
from rhizome.environments.na_prod.expected_data.billing_event_jobrunr_backgroundjobservers import (
    JobrunrBackgroundjobserversNaProd,
)
from rhizome.environments.na_prod.expected_data.billing_event_jobrunr_jobs import JobrunrJobsNaProd
from rhizome.environments.na_prod.expected_data.billing_event_jobrunr_metadata import JobrunrMetadataNaProd
from rhizome.environments.na_prod.expected_data.billing_event_jobrunr_migrations import JobrunrMigrationsNaProd
from rhizome.environments.na_prod.expected_data.billing_event_jobrunr_recurring_jobs import JobrunrRecurringJobsNaProd
from rhizome.environments.na_prod.expected_data.billing_event_look import LookNaProd
from rhizome.environments.na_prod.expected_data.billing_event_look_data import LookDataNaProd
from rhizome.environments.na_prod.expected_data.billing_event_managed_item import ManagedItemNaProd
from rhizome.environments.na_prod.expected_data.billing_event_merchant_acceptance import MerchantAcceptanceNaProd
from rhizome.environments.na_prod.expected_data.billing_event_merchant_evolution import MerchantEvolutionNaProd
from rhizome.environments.na_prod.expected_data.billing_event_merchant_offboarding import MerchantOffboardingNaProd
from rhizome.environments.na_prod.expected_data.billing_event_merchant_payment import MerchantPaymentNaProd
from rhizome.environments.na_prod.expected_data.billing_event_merchant_payment_history import (
    MerchantPaymentHistoryNaProd,
)
from rhizome.environments.na_prod.expected_data.billing_event_migrated_merchant import MigratedMerchantNaProd
from rhizome.environments.na_prod.expected_data.billing_event_mlc_captured_event import MlcCapturedEventNaProd
from rhizome.environments.na_prod.expected_data.billing_event_pending_event import PendingEventNaProd
from rhizome.environments.na_prod.expected_data.billing_event_plan_billing_latest import PlanBillingLatestNaProd
from rhizome.environments.na_prod.expected_data.billing_event_plan_meta import PlanMetaNaProd
from rhizome.environments.na_prod.expected_data.billing_event_plan_trial import PlanTrialNaProd
from rhizome.environments.na_prod.expected_data.billing_event_producer_failure import ProducerFailureNaProd
from rhizome.environments.na_prod.expected_data.billing_event_producer_failure_history import (
    ProducerFailureHistoryNaProd,
)
from rhizome.environments.na_prod.expected_data.billing_event_server_config import ServerConfigNaProd
from rhizome.environments.na_prod.expected_data.billing_event_test_merchant_criteria import TestMerchantCriteriaNaProd
from rhizome.environments.na_prod.expected_data.billing_event_uninstalled_app import UninstalledAppNaProd
from rhizome.models.base import Emplacement, RhizomeModel
from rhizome.models.billing_event.app_metered_event_v1 import AppMeteredEventV1
from rhizome.models.billing_event.app_subscription_current_v1 import AppSubscriptionCurrentV1
from rhizome.models.billing_event.app_subscription_daily_v1 import AppSubscriptionDailyV1
from rhizome.models.billing_event.app_subscription_event_v1 import AppSubscriptionEventV1
from rhizome.models.billing_event.as_of_merchant_device_v1 import AsOfMerchantDeviceV1
from rhizome.models.billing_event.as_of_merchant_plan_v1 import AsOfMerchantPlanV1
from rhizome.models.billing_event.as_of_merchant_v1 import AsOfMerchantV1
from rhizome.models.billing_event.backfill_acceptance_v1 import BackfillAcceptanceV1
from rhizome.models.billing_event.billing_event_history_v1 import BillingEventHistoryV1
from rhizome.models.billing_event.cellular_arrears_acceptances_v1 import CellularArrearsAcceptancesV1
from rhizome.models.billing_event.cellular_billing_arrears_info_v1 import CellularBillingArrearsInfoV1
from rhizome.models.billing_event.consumer_failure_history_v1 import ConsumerFailureHistoryV1
from rhizome.models.billing_event.consumer_failure_v1 import ConsumerFailureV1
from rhizome.models.billing_event.deserializable_failure_v1 import DeserializableFailureV1
from rhizome.models.billing_event.event_filter_v1 import EventFilterV1
from rhizome.models.billing_event.event_ignored_v1 import EventIgnoredV1
from rhizome.models.billing_event.iccid_carrier_v1 import IccidCarrierV1
from rhizome.models.billing_event.job_assassination_contract_v1 import JobAssassinationContractV1
from rhizome.models.billing_event.jobrunr_backgroundjobservers_v1 import JobrunrBackgroundjobserversV1
from rhizome.models.billing_event.jobrunr_jobs_v1 import JobrunrJobsV1
from rhizome.models.billing_event.jobrunr_metadata_v1 import JobrunrMetadataV1
from rhizome.models.billing_event.jobrunr_migrations_v1 import JobrunrMigrationsV1
from rhizome.models.billing_event.jobrunr_recurring_jobs_v1 import JobrunrRecurringJobsV1
from rhizome.models.billing_event.look_data_v1 import LookDataV1
from rhizome.models.billing_event.look_v1 import LookV1
from rhizome.models.billing_event.managed_item_v1 import ManagedItemV1
from rhizome.models.billing_event.merchant_acceptance_v1 import MerchantAcceptanceV1
from rhizome.models.billing_event.merchant_evolution_v1 import MerchantEvolutionV1
from rhizome.models.billing_event.merchant_offboarding_v1 import MerchantOffboardingV1
from rhizome.models.billing_event.merchant_payment_history_v1 import MerchantPaymentHistoryV1
from rhizome.models.billing_event.merchant_payment_v1 import MerchantPaymentV1
from rhizome.models.billing_event.migrated_merchant_v1 import MigratedMerchantV1
from rhizome.models.billing_event.mlc_captured_event_v1 import MlcCapturedEventV1
from rhizome.models.billing_event.pending_event_v1 import PendingEventV1
from rhizome.models.billing_event.plan_billing_latest_v1 import PlanBillingLatestV1
from rhizome.models.billing_event.plan_meta_v1 import PlanMetaV1
from rhizome.models.billing_event.plan_trial_v1 import PlanTrialV1
from rhizome.models.billing_event.producer_failure_history_v1 import ProducerFailureHistoryV1
from rhizome.models.billing_event.producer_failure_v1 import ProducerFailureV1
from rhizome.models.billing_event.server_config_v1 import ServerConfigV1
from rhizome.models.billing_event.test_merchant_criteria_v1 import TestMerchantCriteriaV1
from rhizome.models.billing_event.uninstalled_app_v1 import UninstalledAppV1
from rhizome.models.table_list import BillingEventTable

models: dict[BillingEventTable, tuple[type[RhizomeModel] | None, type[Emplacement[Any]]]] = {
    BillingEventTable.app_metered_event: (AppMeteredEventV1, AppMeteredEventNaProd),
    BillingEventTable.app_subscription_current: (AppSubscriptionCurrentV1, AppSubscriptionCurrentNaProd),
    BillingEventTable.app_subscription_daily: (AppSubscriptionDailyV1, AppSubscriptionDailyNaProd),
    BillingEventTable.app_subscription_event: (AppSubscriptionEventV1, AppSubscriptionEventNaProd),
    BillingEventTable.as_of_merchant: (AsOfMerchantV1, AsOfMerchantNaProd),
    BillingEventTable.as_of_merchant_device: (AsOfMerchantDeviceV1, AsOfMerchantDeviceNaProd),
    BillingEventTable.as_of_merchant_plan: (AsOfMerchantPlanV1, AsOfMerchantPlanNaProd),
    BillingEventTable.backfill_acceptance: (BackfillAcceptanceV1, BackfillAcceptanceNaProd),
    BillingEventTable.billing_event_history: (BillingEventHistoryV1, BillingEventHistoryNaProd),
    BillingEventTable.cellular_arrears_acceptances: (CellularArrearsAcceptancesV1, CellularArrearsAcceptancesNaProd),
    BillingEventTable.cellular_billing_arrears_info: (CellularBillingArrearsInfoV1, CellularBillingArrearsInfoNaProd),
    BillingEventTable.consumer_failure: (ConsumerFailureV1, ConsumerFailureNaProd),
    BillingEventTable.consumer_failure_history: (ConsumerFailureHistoryV1, ConsumerFailureHistoryNaProd),
    BillingEventTable.deserializable_failure: (DeserializableFailureV1, DeserializableFailureNaProd),
    BillingEventTable.event_filter: (EventFilterV1, EventFilterNaProd),
    BillingEventTable.event_ignored: (EventIgnoredV1, EventIgnoredNaProd),
    BillingEventTable.iccid_carrier: (IccidCarrierV1, IccidCarrierNaProd),
    BillingEventTable.job_assassination_contract: (JobAssassinationContractV1, JobAssassinationContractNaProd),
    BillingEventTable.jobrunr_backgroundjobservers: (JobrunrBackgroundjobserversV1, JobrunrBackgroundjobserversNaProd),
    BillingEventTable.jobrunr_jobs: (JobrunrJobsV1, JobrunrJobsNaProd),
    BillingEventTable.jobrunr_metadata: (JobrunrMetadataV1, JobrunrMetadataNaProd),
    BillingEventTable.jobrunr_migrations: (JobrunrMigrationsV1, JobrunrMigrationsNaProd),
    BillingEventTable.jobrunr_recurring_jobs: (JobrunrRecurringJobsV1, JobrunrRecurringJobsNaProd),
    BillingEventTable.look: (LookV1, LookNaProd),
    BillingEventTable.look_data: (LookDataV1, LookDataNaProd),
    BillingEventTable.managed_item: (ManagedItemV1, ManagedItemNaProd),
    BillingEventTable.merchant_acceptance: (MerchantAcceptanceV1, MerchantAcceptanceNaProd),
    BillingEventTable.merchant_evolution: (MerchantEvolutionV1, MerchantEvolutionNaProd),
    BillingEventTable.merchant_offboarding: (MerchantOffboardingV1, MerchantOffboardingNaProd),
    BillingEventTable.merchant_payment: (MerchantPaymentV1, MerchantPaymentNaProd),
    BillingEventTable.merchant_payment_history: (MerchantPaymentHistoryV1, MerchantPaymentHistoryNaProd),
    BillingEventTable.migrated_merchant: (MigratedMerchantV1, MigratedMerchantNaProd),
    BillingEventTable.mlc_captured_event: (MlcCapturedEventV1, MlcCapturedEventNaProd),
    BillingEventTable.pending_event: (PendingEventV1, PendingEventNaProd),
    BillingEventTable.plan_billing_latest: (PlanBillingLatestV1, PlanBillingLatestNaProd),
    BillingEventTable.plan_meta: (PlanMetaV1, PlanMetaNaProd),
    BillingEventTable.plan_trial: (PlanTrialV1, PlanTrialNaProd),
    BillingEventTable.producer_failure: (ProducerFailureV1, ProducerFailureNaProd),
    BillingEventTable.producer_failure_history: (ProducerFailureHistoryV1, ProducerFailureHistoryNaProd),
    BillingEventTable.server_config: (ServerConfigV1, ServerConfigNaProd),
    BillingEventTable.test_merchant_criteria: (TestMerchantCriteriaV1, TestMerchantCriteriaNaProd),
    BillingEventTable.uninstalled_app: (UninstalledAppV1, UninstalledAppNaProd),
}


class NorthAmericaBillingEvent(Environment):
    """North America production billing event environment using CloudSQL."""

    # Type aliases for environment-specific model versions
    AppMeteredEvent: type[AppMeteredEventV1] = AppMeteredEventV1
    AppSubscriptionCurrent: type[AppSubscriptionCurrentV1] = AppSubscriptionCurrentV1
    AppSubscriptionDaily: type[AppSubscriptionDailyV1] = AppSubscriptionDailyV1
    AppSubscriptionEvent: type[AppSubscriptionEventV1] = AppSubscriptionEventV1
    AsOfMerchant: type[AsOfMerchantV1] = AsOfMerchantV1
    AsOfMerchantDevice: type[AsOfMerchantDeviceV1] = AsOfMerchantDeviceV1
    AsOfMerchantPlan: type[AsOfMerchantPlanV1] = AsOfMerchantPlanV1
    BackfillAcceptance: type[BackfillAcceptanceV1] = BackfillAcceptanceV1
    BillingEventHistory: type[BillingEventHistoryV1] = BillingEventHistoryV1
    CellularArrearsAcceptances: type[CellularArrearsAcceptancesV1] = CellularArrearsAcceptancesV1
    CellularBillingArrearsInfo: type[CellularBillingArrearsInfoV1] = CellularBillingArrearsInfoV1
    ConsumerFailure: type[ConsumerFailureV1] = ConsumerFailureV1
    ConsumerFailureHistory: type[ConsumerFailureHistoryV1] = ConsumerFailureHistoryV1
    DeserializableFailure: type[DeserializableFailureV1] = DeserializableFailureV1
    EventFilter: type[EventFilterV1] = EventFilterV1
    EventIgnored: type[EventIgnoredV1] = EventIgnoredV1
    IccidCarrier: type[IccidCarrierV1] = IccidCarrierV1
    JobAssassinationContract: type[JobAssassinationContractV1] = JobAssassinationContractV1
    JobrunrBackgroundjobservers: type[JobrunrBackgroundjobserversV1] = JobrunrBackgroundjobserversV1
    JobrunrJobs: type[JobrunrJobsV1] = JobrunrJobsV1
    JobrunrMetadata: type[JobrunrMetadataV1] = JobrunrMetadataV1
    JobrunrMigrations: type[JobrunrMigrationsV1] = JobrunrMigrationsV1
    JobrunrRecurringJobs: type[JobrunrRecurringJobsV1] = JobrunrRecurringJobsV1
    Look: type[LookV1] = LookV1
    LookData: type[LookDataV1] = LookDataV1
    ManagedItem: type[ManagedItemV1] = ManagedItemV1
    MerchantAcceptance: type[MerchantAcceptanceV1] = MerchantAcceptanceV1
    MerchantEvolution: type[MerchantEvolutionV1] = MerchantEvolutionV1
    MerchantOffboarding: type[MerchantOffboardingV1] = MerchantOffboardingV1
    MerchantPayment: type[MerchantPaymentV1] = MerchantPaymentV1
    MerchantPaymentHistory: type[MerchantPaymentHistoryV1] = MerchantPaymentHistoryV1
    MigratedMerchant: type[MigratedMerchantV1] = MigratedMerchantV1
    MlcCapturedEvent: type[MlcCapturedEventV1] = MlcCapturedEventV1
    PendingEvent: type[PendingEventV1] = PendingEventV1
    PlanBillingLatest: type[PlanBillingLatestV1] = PlanBillingLatestV1
    PlanMeta: type[PlanMetaV1] = PlanMetaV1
    PlanTrial: type[PlanTrialV1] = PlanTrialV1
    ProducerFailure: type[ProducerFailureV1] = ProducerFailureV1
    ProducerFailureHistory: type[ProducerFailureHistoryV1] = ProducerFailureHistoryV1
    ServerConfig: type[ServerConfigV1] = ServerConfigV1
    TestMerchantCriteria: type[TestMerchantCriteriaV1] = TestMerchantCriteriaV1
    UninstalledApp: type[UninstalledAppV1] = UninstalledAppV1

    def tables(self) -> list[StrEnum]:
        return list(BillingEventTable)

    def situate_table(self, table_name: StrEnum) -> tuple[type[RhizomeModel], type[Emplacement[Any]]]:
        if not isinstance(table_name, BillingEventTable):
            raise ValueError(f"Expected BillingEventTable, got {type(table_name)}")
        model_class, emplacement_class = models[table_name]
        if model_class is None:
            raise NotImplementedError(f"Model class for {table_name} not yet implemented")
        return model_class, emplacement_class

    @classmethod
    def get_port_forward_config(cls) -> PortForwardConfig:
        """Get port forwarding configuration for NA production environment."""
        return PortForwardConfig(
            project="clover-prod-kubernetes",
            cluster="na-prod-us-central1-cluster",
            region="us-central1",
            server="https://na-prod-ingress-nginx.prod.dsm06.clover.network",
            kube_context="gke_clover-prod-kubernetes_us-central1_na-prod-us-central1-cluster",
            kube_namespace="gke-cloudsql-access",
            kube_deployment="gke-cloudsql-access",
            sql_connection="clover-prod-databases:us-central1:billing-event",
            database_name="billing-event-prod",
            username="billing-event-ro",
            secret_reference="op://Shared/EventBillingROCred/password",
            secret_manager=SecretManager.ONEPASSWORD,
        )

    @classmethod
    def get_database_config(cls, tools: ToolsProtocol) -> DatabaseConfig:
        """Get database configuration using port forwarding credentials."""
        import asyncio

        # Get the port forward config to access secret reference
        pf_config = cls.get_port_forward_config()

        # Retrieve password directly without needing port forwarding setup
        password = asyncio.run(Environment.get_secret(tools, pf_config.secret_reference, pf_config.secret_manager))

        # Return config with placeholder port (actual port assigned during __init__)
        return DatabaseConfig(
            host="127.0.0.1",  # Port forwarding always uses localhost
            port=0,  # Placeholder - actual port set during instance initialization
            database=pf_config.database_name,
            username=pf_config.username,
            password=password,
        )

    @property
    def name(self) -> str:
        """Environment name for display purposes in logs and debugging, not used for connections."""
        return "NorthAmericaBillingEvent"

    @classmethod
    def database_id(cls) -> str:
        """Database identifier for server-side query execution."""
        return "na_prod_billing_event"

    def get_connection_string(self) -> str:
        """Build the connection string for this port-forwarded environment."""
        from urllib.parse import quote_plus

        # Get the config with credentials
        db_config = self.get_database_config(self.client.tools)

        # Use the actual local port that was set up during __init__
        encoded_password = quote_plus(db_config.password)
        connection_string = f"mysql+pymysql://{db_config.username}:{encoded_password}@{db_config.host}:{self.local_port}/{db_config.database}"

        # Log connection details
        mysql_command = (
            f"mysql --user={db_config.username} --password=[REDACTED] --host={db_config.host} "
            f"--port={self.local_port} --batch {db_config.database}"
        )
        self._log_connection_if_new(
            DatabaseConfig(
                host=db_config.host,
                port=self.local_port,
                database=db_config.database,
                username=db_config.username,
                password=db_config.password,
            ),
            mysql_command,
        )

        return connection_string
