"""
Proxied wrapper functions for billing-event dev - merchant.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_as_of_merchant import (
    ApiAsOfMerchant,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_merchant_acceptance import (
    ApiMerchantAcceptance,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_merchant_evolution import (
    ApiMerchantEvolution,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_merchant_acceptances_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    agreement_type: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiMerchantAcceptance | list["ApiMerchantAcceptance"]]:
    """Get merchant acceptances

    Args:
        merchant_uuid (str):
        agreement_type (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMerchantAcceptance, list['ApiMerchantAcceptance']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        agreement_type: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiMerchantAcceptance | list["ApiMerchantAcceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "agreement_type": serialize_argument(agreement_type),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_acceptances",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiMerchantAcceptance, list["ApiMerchantAcceptance"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_acceptances_sync(
    *,
    client: StolonClient,
    merchant_uuid: str,
    agreement_type: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiMerchantAcceptance | list["ApiMerchantAcceptance"] | None:
    """Get merchant acceptances

    Args:
        merchant_uuid (str):
        agreement_type (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMerchantAcceptance, list['ApiMerchantAcceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        agreement_type: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiMerchantAcceptance | list["ApiMerchantAcceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "agreement_type": serialize_argument(agreement_type),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_acceptances",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiMerchantAcceptance, list["ApiMerchantAcceptance"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_acceptances_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    agreement_type: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiMerchantAcceptance | list["ApiMerchantAcceptance"]]:
    """Get merchant acceptances

    Args:
        merchant_uuid (str):
        agreement_type (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMerchantAcceptance, list['ApiMerchantAcceptance']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        agreement_type: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiMerchantAcceptance | list["ApiMerchantAcceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "agreement_type": serialize_argument(agreement_type),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_acceptances",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiMerchantAcceptance, list["ApiMerchantAcceptance"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_acceptances_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: str,
    agreement_type: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiMerchantAcceptance | list["ApiMerchantAcceptance"] | None:
    """Get merchant acceptances

    Args:
        merchant_uuid (str):
        agreement_type (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMerchantAcceptance, list['ApiMerchantAcceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        agreement_type: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiMerchantAcceptance | list["ApiMerchantAcceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "agreement_type": serialize_argument(agreement_type),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_acceptances",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiMerchantAcceptance, list["ApiMerchantAcceptance"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_as_of_merchant_data_by_merchant_uuid_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiAsOfMerchant | list["ApiAsOfMerchant"]]:
    """Get as-of data for the specified merchant UUID

    Args:
        merchant_uuid (str):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiAsOfMerchant, list['ApiAsOfMerchant']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiAsOfMerchant | list["ApiAsOfMerchant"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_as_of_merchant_data_by_merchant_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiAsOfMerchant, list["ApiAsOfMerchant"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_as_of_merchant_data_by_merchant_uuid_sync(
    *,
    client: StolonClient,
    merchant_uuid: str,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiAsOfMerchant | list["ApiAsOfMerchant"] | None:
    """Get as-of data for the specified merchant UUID

    Args:
        merchant_uuid (str):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiAsOfMerchant, list['ApiAsOfMerchant']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiAsOfMerchant | list["ApiAsOfMerchant"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_as_of_merchant_data_by_merchant_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiAsOfMerchant, list["ApiAsOfMerchant"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_as_of_merchant_data_by_merchant_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiAsOfMerchant | list["ApiAsOfMerchant"]]:
    """Get as-of data for the specified merchant UUID

    Args:
        merchant_uuid (str):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiAsOfMerchant, list['ApiAsOfMerchant']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiAsOfMerchant | list["ApiAsOfMerchant"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_as_of_merchant_data_by_merchant_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiAsOfMerchant, list["ApiAsOfMerchant"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_as_of_merchant_data_by_merchant_uuid_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: str,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiAsOfMerchant | list["ApiAsOfMerchant"] | None:
    """Get as-of data for the specified merchant UUID

    Args:
        merchant_uuid (str):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiAsOfMerchant, list['ApiAsOfMerchant']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiAsOfMerchant | list["ApiAsOfMerchant"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_as_of_merchant_data_by_merchant_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiAsOfMerchant, list["ApiAsOfMerchant"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_evolutions_sync_detailed(
    *,
    client: StolonClient,
    reseller_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiMerchantEvolution | list["ApiMerchantEvolution"]]:
    """Get merchant evolution data

    Args:
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMerchantEvolution, list['ApiMerchantEvolution']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                reseller_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiMerchantEvolution | list["ApiMerchantEvolution"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "reseller_uuid": serialize_argument(reseller_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_evolutions",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiMerchantEvolution, list["ApiMerchantEvolution"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_evolutions_sync(
    *,
    client: StolonClient,
    reseller_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiMerchantEvolution | list["ApiMerchantEvolution"] | None:
    """Get merchant evolution data

    Args:
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMerchantEvolution, list['ApiMerchantEvolution']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                reseller_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiMerchantEvolution | list["ApiMerchantEvolution"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "reseller_uuid": serialize_argument(reseller_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_evolutions",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiMerchantEvolution, list["ApiMerchantEvolution"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_evolutions_asyncio_detailed(
    *,
    client: StolonClient,
    reseller_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiMerchantEvolution | list["ApiMerchantEvolution"]]:
    """Get merchant evolution data

    Args:
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMerchantEvolution, list['ApiMerchantEvolution']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                reseller_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiMerchantEvolution | list["ApiMerchantEvolution"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "reseller_uuid": serialize_argument(reseller_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_evolutions",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiMerchantEvolution, list["ApiMerchantEvolution"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_evolutions_asyncio(
    *,
    client: StolonClient,
    reseller_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiMerchantEvolution | list["ApiMerchantEvolution"] | None:
    """Get merchant evolution data

    Args:
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMerchantEvolution, list['ApiMerchantEvolution']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                reseller_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiMerchantEvolution | list["ApiMerchantEvolution"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "reseller_uuid": serialize_argument(reseller_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_evolutions",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiMerchantEvolution, list["ApiMerchantEvolution"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_evolution_by_merchant_uuid_sync_detailed(
    *, client: StolonClient, merchant_uuid: str
) -> Response[ApiMerchantEvolution]:
    """Get merchant evolution data for the specified merchant UUID

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantEvolution]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        Response[ApiMerchantEvolution]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_evolution_by_merchant_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantEvolution]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_evolution_by_merchant_uuid_sync(
    *, client: StolonClient, merchant_uuid: str
) -> ApiMerchantEvolution | None:
    """Get merchant evolution data for the specified merchant UUID

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantEvolution

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        ApiMerchantEvolution | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_evolution_by_merchant_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantEvolution]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_evolution_by_merchant_uuid_asyncio_detailed(
    *, client: StolonClient, merchant_uuid: str
) -> Response[ApiMerchantEvolution]:
    """Get merchant evolution data for the specified merchant UUID

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantEvolution]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        Response[ApiMerchantEvolution]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_evolution_by_merchant_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantEvolution]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_evolution_by_merchant_uuid_asyncio(
    *, client: StolonClient, merchant_uuid: str
) -> ApiMerchantEvolution | None:
    """Get merchant evolution data for the specified merchant UUID

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantEvolution

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        ApiMerchantEvolution | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_merchant_evolution_by_merchant_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantEvolution]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_resellers_merchant_evolution_by_merchant_uuid_sync_detailed(
    *, client: StolonClient, reseller_uuid: str, merchant_uuid: str, x_clover_appenv: str
) -> Response[ApiMerchantEvolution]:
    """Get a reseller's merchant evolution data for the specified reseller UUID and merchant UUID

    Args:
        reseller_uuid (str):
        merchant_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantEvolution]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                reseller_uuid: str
        merchant_uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiMerchantEvolution]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "reseller_uuid": serialize_argument(reseller_uuid),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_resellers_merchant_evolution_by_merchant_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantEvolution]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_resellers_merchant_evolution_by_merchant_uuid_sync(
    *, client: StolonClient, reseller_uuid: str, merchant_uuid: str, x_clover_appenv: str
) -> ApiMerchantEvolution | None:
    """Get a reseller's merchant evolution data for the specified reseller UUID and merchant UUID

    Args:
        reseller_uuid (str):
        merchant_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantEvolution

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                reseller_uuid: str
        merchant_uuid: str
        x_clover_appenv: str

    Returns:
        ApiMerchantEvolution | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "reseller_uuid": serialize_argument(reseller_uuid),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_resellers_merchant_evolution_by_merchant_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantEvolution]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_resellers_merchant_evolution_by_merchant_uuid_asyncio_detailed(
    *, client: StolonClient, reseller_uuid: str, merchant_uuid: str, x_clover_appenv: str
) -> Response[ApiMerchantEvolution]:
    """Get a reseller's merchant evolution data for the specified reseller UUID and merchant UUID

    Args:
        reseller_uuid (str):
        merchant_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantEvolution]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                reseller_uuid: str
        merchant_uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiMerchantEvolution]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "reseller_uuid": serialize_argument(reseller_uuid),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_resellers_merchant_evolution_by_merchant_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantEvolution]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_resellers_merchant_evolution_by_merchant_uuid_asyncio(
    *, client: StolonClient, reseller_uuid: str, merchant_uuid: str, x_clover_appenv: str
) -> ApiMerchantEvolution | None:
    """Get a reseller's merchant evolution data for the specified reseller UUID and merchant UUID

    Args:
        reseller_uuid (str):
        merchant_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantEvolution

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                reseller_uuid: str
        merchant_uuid: str
        x_clover_appenv: str

    Returns:
        ApiMerchantEvolution | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "reseller_uuid": serialize_argument(reseller_uuid),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant.get_resellers_merchant_evolution_by_merchant_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantEvolution]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
