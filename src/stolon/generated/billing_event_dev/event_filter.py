"""
Proxied wrapper functions for billing-event dev - event_filter.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_event_filter import ApiEventFilter
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.delete_3_response_200 import (
    Delete3Response200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.merchant_passes_1_response_200 import (
    MerchantPasses1Response200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.reseller_passes_response_200 import (
    ResellerPassesResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def merchant_passes_1_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    reseller_uuid: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[MerchantPasses1Response200]:
    """Check if merchant meets criteria to continue with event processing

    Args:
        uuid (str):
        reseller_uuid (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[MerchantPasses1Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        reseller_uuid: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[MerchantPasses1Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.merchant_passes_1",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[MerchantPasses1Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def merchant_passes_1_sync(
    *,
    client: StolonClient,
    uuid: str,
    reseller_uuid: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> MerchantPasses1Response200 | None:
    """Check if merchant meets criteria to continue with event processing

    Args:
        uuid (str):
        reseller_uuid (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        MerchantPasses1Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        reseller_uuid: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        MerchantPasses1Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.merchant_passes_1",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[MerchantPasses1Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def merchant_passes_1_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    reseller_uuid: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[MerchantPasses1Response200]:
    """Check if merchant meets criteria to continue with event processing

    Args:
        uuid (str):
        reseller_uuid (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[MerchantPasses1Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        reseller_uuid: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[MerchantPasses1Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.merchant_passes_1",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[MerchantPasses1Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def merchant_passes_1_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    reseller_uuid: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> MerchantPasses1Response200 | None:
    """Check if merchant meets criteria to continue with event processing

    Args:
        uuid (str):
        reseller_uuid (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        MerchantPasses1Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        reseller_uuid: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        MerchantPasses1Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.merchant_passes_1",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[MerchantPasses1Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_3_sync_detailed(*, client: StolonClient, body: ApiEventFilter) -> Response[ApiEventFilter]:
    """Create event filter

    Args:
        body (ApiEventFilter):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiEventFilter

    Returns:
        Response[ApiEventFilter]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.create_3",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_3_sync(*, client: StolonClient, body: ApiEventFilter) -> ApiEventFilter | None:
    """Create event filter

    Args:
        body (ApiEventFilter):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiEventFilter

    Returns:
        ApiEventFilter | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.create_3",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_3_asyncio_detailed(*, client: StolonClient, body: ApiEventFilter) -> Response[ApiEventFilter]:
    """Create event filter

    Args:
        body (ApiEventFilter):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiEventFilter

    Returns:
        Response[ApiEventFilter]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.create_3",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_3_asyncio(*, client: StolonClient, body: ApiEventFilter) -> ApiEventFilter | None:
    """Create event filter

    Args:
        body (ApiEventFilter):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiEventFilter

    Returns:
        ApiEventFilter | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.create_3",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def reseller_passes_sync_detailed(
    *, client: StolonClient, uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[ResellerPassesResponse200]:
    """Check if reseller is involved in EBB processing.

    Args:
        uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResellerPassesResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ResellerPassesResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.reseller_passes",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResellerPassesResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def reseller_passes_sync(
    *, client: StolonClient, uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> ResellerPassesResponse200 | None:
    """Check if reseller is involved in EBB processing.

    Args:
        uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResellerPassesResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        ResellerPassesResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.reseller_passes",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResellerPassesResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def reseller_passes_asyncio_detailed(
    *, client: StolonClient, uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[ResellerPassesResponse200]:
    """Check if reseller is involved in EBB processing.

    Args:
        uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResellerPassesResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ResellerPassesResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.reseller_passes",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResellerPassesResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def reseller_passes_asyncio(
    *, client: StolonClient, uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> ResellerPassesResponse200 | None:
    """Check if reseller is involved in EBB processing.

    Args:
        uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResellerPassesResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        ResellerPassesResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.reseller_passes",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResellerPassesResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_3_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiEventFilter]:
    """Get event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiEventFilter]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.get_3",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_3_sync(*, client: StolonClient, uuid: str) -> ApiEventFilter | None:
    """Get event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiEventFilter | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.get_3",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_3_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ApiEventFilter]:
    """Get event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiEventFilter]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.get_3",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_3_asyncio(*, client: StolonClient, uuid: str) -> ApiEventFilter | None:
    """Get event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiEventFilter | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.get_3",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def delete_3_sync_detailed(*, client: StolonClient, uuid: str) -> Response[Delete3Response200]:
    """Delete event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Delete3Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[Delete3Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.delete_3",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Delete3Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def delete_3_sync(*, client: StolonClient, uuid: str) -> Delete3Response200 | None:
    """Delete event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Delete3Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Delete3Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.delete_3",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Delete3Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def delete_3_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[Delete3Response200]:
    """Delete event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Delete3Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[Delete3Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.delete_3",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Delete3Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def delete_3_asyncio(*, client: StolonClient, uuid: str) -> Delete3Response200 | None:
    """Delete event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Delete3Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Delete3Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.delete_3",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Delete3Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_event_filters_by_criteria_sync_detailed(*, client: StolonClient) -> Response[ApiEventFilter]:
    """Get event filters by criteria

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiEventFilter]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.get_event_filters_by_criteria",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_event_filters_by_criteria_sync(*, client: StolonClient) -> ApiEventFilter | None:
    """Get event filters by criteria

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiEventFilter | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.get_event_filters_by_criteria",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_event_filters_by_criteria_asyncio_detailed(*, client: StolonClient) -> Response[ApiEventFilter]:
    """Get event filters by criteria

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiEventFilter]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.get_event_filters_by_criteria",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_event_filters_by_criteria_asyncio(*, client: StolonClient) -> ApiEventFilter | None:
    """Get event filters by criteria

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiEventFilter | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="event_filter.get_event_filters_by_criteria",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiEventFilter]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
