"""
Proxied wrapper functions for billing-event dev - event_filter.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.event_filter import create_3
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.event_filter import delete_3
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.event_filter import get_3
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.event_filter import get_event_filters_by_criteria
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.event_filter import merchant_passes_1
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.event_filter import reseller_passes
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_event_filter import ApiEventFilter
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.delete_3_response_200 import Delete3Response200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.merchant_passes_1_response_200 import MerchantPasses1Response200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.reseller_passes_response_200 import ResellerPassesResponse200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import json


def merchant_passes_1_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    reseller_uuid: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[MerchantPasses1Response200]:
    """Check if merchant meets criteria to continue with event processing

    Args:
        uuid (str):
        reseller_uuid (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[MerchantPasses1Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        reseller_uuid: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[MerchantPasses1Response200]
    """

    # Extract request parameters from generated function
    kwargs = merchant_passes_1._get_kwargs(uuid=uuid, reseller_uuid=reseller_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: MerchantPasses1Response200 | None
    if body_json and proxy_response.status_code == 200 and MerchantPasses1Response200:
        parsed = MerchantPasses1Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def merchant_passes_1_sync(
    *,
    client: StolonClient,
    uuid: str,
    reseller_uuid: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> MerchantPasses1Response200 | None:
    """Check if merchant meets criteria to continue with event processing

    Args:
        uuid (str):
        reseller_uuid (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        MerchantPasses1Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        reseller_uuid: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        MerchantPasses1Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = merchant_passes_1._get_kwargs(uuid=uuid, reseller_uuid=reseller_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return MerchantPasses1Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def merchant_passes_1_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    reseller_uuid: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[MerchantPasses1Response200]:
    """Check if merchant meets criteria to continue with event processing

    Args:
        uuid (str):
        reseller_uuid (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[MerchantPasses1Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        reseller_uuid: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[MerchantPasses1Response200]
    """

    # Extract request parameters from generated function
    kwargs = merchant_passes_1._get_kwargs(uuid=uuid, reseller_uuid=reseller_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: MerchantPasses1Response200 | None
    if body_json and proxy_response.status_code == 200 and MerchantPasses1Response200:
        parsed = MerchantPasses1Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def merchant_passes_1_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    reseller_uuid: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> MerchantPasses1Response200 | None:
    """Check if merchant meets criteria to continue with event processing

    Args:
        uuid (str):
        reseller_uuid (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        MerchantPasses1Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        reseller_uuid: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        MerchantPasses1Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = merchant_passes_1._get_kwargs(uuid=uuid, reseller_uuid=reseller_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return MerchantPasses1Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_3_sync_detailed(
    *,
    client: StolonClient,
    body: ApiEventFilter
) -> Response[ApiEventFilter]:
    """Create event filter

    Args:
        body (ApiEventFilter):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiEventFilter

    Returns:
        Response[ApiEventFilter]
    """

    # Extract request parameters from generated function
    kwargs = create_3._get_kwargs(body=body)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiEventFilter | None
    if body_json and proxy_response.status_code == 200 and ApiEventFilter:
        parsed = ApiEventFilter.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_3_sync(
    *,
    client: StolonClient,
    body: ApiEventFilter
) -> ApiEventFilter | None:
    """Create event filter

    Args:
        body (ApiEventFilter):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiEventFilter

    Returns:
        ApiEventFilter | None
    """

    # Extract request parameters from generated function
    kwargs = create_3._get_kwargs(body=body)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiEventFilter.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_3_asyncio_detailed(
    *,
    client: StolonClient,
    body: ApiEventFilter
) -> Response[ApiEventFilter]:
    """Create event filter

    Args:
        body (ApiEventFilter):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiEventFilter

    Returns:
        Response[ApiEventFilter]
    """

    # Extract request parameters from generated function
    kwargs = create_3._get_kwargs(body=body)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiEventFilter | None
    if body_json and proxy_response.status_code == 200 and ApiEventFilter:
        parsed = ApiEventFilter.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_3_asyncio(
    *,
    client: StolonClient,
    body: ApiEventFilter
) -> ApiEventFilter | None:
    """Create event filter

    Args:
        body (ApiEventFilter):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiEventFilter

    Returns:
        ApiEventFilter | None
    """

    # Extract request parameters from generated function
    kwargs = create_3._get_kwargs(body=body)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiEventFilter.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def reseller_passes_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[ResellerPassesResponse200]:
    """Check if reseller is involved in EBB processing.

    Args:
        uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResellerPassesResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ResellerPassesResponse200]
    """

    # Extract request parameters from generated function
    kwargs = reseller_passes._get_kwargs(uuid=uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResellerPassesResponse200 | None
    if body_json and proxy_response.status_code == 200 and ResellerPassesResponse200:
        parsed = ResellerPassesResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def reseller_passes_sync(
    *,
    client: StolonClient,
    uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> ResellerPassesResponse200 | None:
    """Check if reseller is involved in EBB processing.

    Args:
        uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResellerPassesResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        ResellerPassesResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = reseller_passes._get_kwargs(uuid=uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResellerPassesResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def reseller_passes_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[ResellerPassesResponse200]:
    """Check if reseller is involved in EBB processing.

    Args:
        uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResellerPassesResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ResellerPassesResponse200]
    """

    # Extract request parameters from generated function
    kwargs = reseller_passes._get_kwargs(uuid=uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResellerPassesResponse200 | None
    if body_json and proxy_response.status_code == 200 and ResellerPassesResponse200:
        parsed = ResellerPassesResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def reseller_passes_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> ResellerPassesResponse200 | None:
    """Check if reseller is involved in EBB processing.

    Args:
        uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResellerPassesResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        ResellerPassesResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = reseller_passes._get_kwargs(uuid=uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResellerPassesResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_3_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiEventFilter]:
    """Get event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiEventFilter]
    """

    # Extract request parameters from generated function
    kwargs = get_3._get_kwargs(uuid=uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiEventFilter | None
    if body_json and proxy_response.status_code == 200 and ApiEventFilter:
        parsed = ApiEventFilter.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_3_sync(
    *,
    client: StolonClient,
    uuid: str
) -> ApiEventFilter | None:
    """Get event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiEventFilter | None
    """

    # Extract request parameters from generated function
    kwargs = get_3._get_kwargs(uuid=uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiEventFilter.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_3_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiEventFilter]:
    """Get event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiEventFilter]
    """

    # Extract request parameters from generated function
    kwargs = get_3._get_kwargs(uuid=uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiEventFilter | None
    if body_json and proxy_response.status_code == 200 and ApiEventFilter:
        parsed = ApiEventFilter.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_3_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> ApiEventFilter | None:
    """Get event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiEventFilter | None
    """

    # Extract request parameters from generated function
    kwargs = get_3._get_kwargs(uuid=uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiEventFilter.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def delete_3_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[Delete3Response200]:
    """Delete event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Delete3Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[Delete3Response200]
    """

    # Extract request parameters from generated function
    kwargs = delete_3._get_kwargs(uuid=uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Delete3Response200 | None
    if body_json and proxy_response.status_code == 200 and Delete3Response200:
        parsed = Delete3Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_3_sync(
    *,
    client: StolonClient,
    uuid: str
) -> Delete3Response200 | None:
    """Delete event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Delete3Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Delete3Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = delete_3._get_kwargs(uuid=uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Delete3Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def delete_3_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[Delete3Response200]:
    """Delete event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Delete3Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[Delete3Response200]
    """

    # Extract request parameters from generated function
    kwargs = delete_3._get_kwargs(uuid=uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Delete3Response200 | None
    if body_json and proxy_response.status_code == 200 and Delete3Response200:
        parsed = Delete3Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_3_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> Delete3Response200 | None:
    """Delete event filter by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Delete3Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Delete3Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = delete_3._get_kwargs(uuid=uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Delete3Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_event_filters_by_criteria_sync_detailed(
    *,
    client: StolonClient
) -> Response[ApiEventFilter]:
    """Get event filters by criteria

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ApiEventFilter]
    """

    # Extract request parameters from generated function
    kwargs = get_event_filters_by_criteria._get_kwargs()

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiEventFilter | None
    if body_json and proxy_response.status_code == 200 and ApiEventFilter:
        parsed = ApiEventFilter.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_event_filters_by_criteria_sync(
    *,
    client: StolonClient
) -> ApiEventFilter | None:
    """Get event filters by criteria

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ApiEventFilter | None
    """

    # Extract request parameters from generated function
    kwargs = get_event_filters_by_criteria._get_kwargs()

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiEventFilter.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_event_filters_by_criteria_asyncio_detailed(
    *,
    client: StolonClient
) -> Response[ApiEventFilter]:
    """Get event filters by criteria

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiEventFilter]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ApiEventFilter]
    """

    # Extract request parameters from generated function
    kwargs = get_event_filters_by_criteria._get_kwargs()

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiEventFilter | None
    if body_json and proxy_response.status_code == 200 and ApiEventFilter:
        parsed = ApiEventFilter.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_event_filters_by_criteria_asyncio(
    *,
    client: StolonClient
) -> ApiEventFilter | None:
    """Get event filters by criteria

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiEventFilter

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ApiEventFilter | None
    """

    # Extract request parameters from generated function
    kwargs = get_event_filters_by_criteria._get_kwargs()

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiEventFilter.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

