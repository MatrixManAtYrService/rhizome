"""
Proxied wrapper functions for billing-event dev - backfill_acceptance.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_backfill_acceptance import (
    ApiBackfillAcceptance,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.create_4_response_200 import (
    Create4Response200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.delete_4_response_200 import (
    Delete4Response200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_4_response_200 import (
    Get4Response200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def delete_4_sync_detailed(
    *, client: StolonClient, acceptance_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Delete4Response200]:
    """Delete backfilled acceptance by acceptance UUID

    Args:
        acceptance_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Delete4Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Delete4Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.delete_4",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Delete4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def delete_4_sync(
    *, client: StolonClient, acceptance_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Delete4Response200 | None:
    """Delete backfilled acceptance by acceptance UUID

    Args:
        acceptance_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Delete4Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Delete4Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.delete_4",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Delete4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def delete_4_asyncio_detailed(
    *, client: StolonClient, acceptance_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Delete4Response200]:
    """Delete backfilled acceptance by acceptance UUID

    Args:
        acceptance_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Delete4Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Delete4Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.delete_4",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Delete4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def delete_4_asyncio(
    *, client: StolonClient, acceptance_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Delete4Response200 | None:
    """Delete backfilled acceptance by acceptance UUID

    Args:
        acceptance_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Delete4Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Delete4Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.delete_4",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Delete4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_4_sync_detailed(*, client: StolonClient, merchant_uuid: str) -> Response[Get4Response200]:
    """Retrieve backfilled acceptances by merchant ID and agreement type

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Get4Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        Response[Get4Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.get_4",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Get4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_4_sync(*, client: StolonClient, merchant_uuid: str) -> Get4Response200 | None:
    """Retrieve backfilled acceptances by merchant ID and agreement type

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Get4Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        Get4Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.get_4",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Get4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_4_asyncio_detailed(*, client: StolonClient, merchant_uuid: str) -> Response[Get4Response200]:
    """Retrieve backfilled acceptances by merchant ID and agreement type

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Get4Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        Response[Get4Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.get_4",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Get4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_4_asyncio(*, client: StolonClient, merchant_uuid: str) -> Get4Response200 | None:
    """Retrieve backfilled acceptances by merchant ID and agreement type

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Get4Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        Get4Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.get_4",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Get4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_4_sync_detailed(
    *, client: StolonClient, body: ApiBackfillAcceptance, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Create4Response200]:
    """Create acceptance passthrough to Agreement Service

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiBackfillAcceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Create4Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBackfillAcceptance
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Create4Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.create_4",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Create4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_4_sync(
    *, client: StolonClient, body: ApiBackfillAcceptance, x_clover_appenv: Union[Unset, str] = UNSET
) -> Create4Response200 | None:
    """Create acceptance passthrough to Agreement Service

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiBackfillAcceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Create4Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBackfillAcceptance
        x_clover_appenv: Union[Unset, str]

    Returns:
        Create4Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.create_4",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Create4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_4_asyncio_detailed(
    *, client: StolonClient, body: ApiBackfillAcceptance, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Create4Response200]:
    """Create acceptance passthrough to Agreement Service

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiBackfillAcceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Create4Response200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBackfillAcceptance
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Create4Response200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.create_4",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Create4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_4_asyncio(
    *, client: StolonClient, body: ApiBackfillAcceptance, x_clover_appenv: Union[Unset, str] = UNSET
) -> Create4Response200 | None:
    """Create acceptance passthrough to Agreement Service

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiBackfillAcceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Create4Response200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBackfillAcceptance
        x_clover_appenv: Union[Unset, str]

    Returns:
        Create4Response200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="backfill_acceptance.create_4",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Create4Response200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
