"""
Proxied wrapper functions for billing-event dev - backfill_acceptance.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.backfill_acceptance import create_4
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.backfill_acceptance import delete_4
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.backfill_acceptance import get_4
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_backfill_acceptance import ApiBackfillAcceptance
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.create_4_response_200 import Create4Response200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.delete_4_response_200 import Delete4Response200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_4_response_200 import Get4Response200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import json


def delete_4_sync_detailed(
    *,
    client: StolonClient,
    acceptance_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Delete4Response200]:
    """Delete backfilled acceptance by acceptance UUID

    Args:
        acceptance_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Delete4Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Delete4Response200]
    """

    # Extract request parameters from generated function
    kwargs = delete_4._get_kwargs(acceptance_id=acceptance_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Delete4Response200 | None
    if body_json and proxy_response.status_code == 200 and Delete4Response200:
        parsed = Delete4Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_4_sync(
    *,
    client: StolonClient,
    acceptance_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Delete4Response200 | None:
    """Delete backfilled acceptance by acceptance UUID

    Args:
        acceptance_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Delete4Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Delete4Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = delete_4._get_kwargs(acceptance_id=acceptance_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Delete4Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def delete_4_asyncio_detailed(
    *,
    client: StolonClient,
    acceptance_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Delete4Response200]:
    """Delete backfilled acceptance by acceptance UUID

    Args:
        acceptance_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Delete4Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Delete4Response200]
    """

    # Extract request parameters from generated function
    kwargs = delete_4._get_kwargs(acceptance_id=acceptance_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Delete4Response200 | None
    if body_json and proxy_response.status_code == 200 and Delete4Response200:
        parsed = Delete4Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_4_asyncio(
    *,
    client: StolonClient,
    acceptance_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Delete4Response200 | None:
    """Delete backfilled acceptance by acceptance UUID

    Args:
        acceptance_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Delete4Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Delete4Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = delete_4._get_kwargs(acceptance_id=acceptance_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Delete4Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_4_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str
) -> Response[Get4Response200]:
    """Retrieve backfilled acceptances by merchant ID and agreement type

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Get4Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        Response[Get4Response200]
    """

    # Extract request parameters from generated function
    kwargs = get_4._get_kwargs(merchant_uuid=merchant_uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Get4Response200 | None
    if body_json and proxy_response.status_code == 200 and Get4Response200:
        parsed = Get4Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_4_sync(
    *,
    client: StolonClient,
    merchant_uuid: str
) -> Get4Response200 | None:
    """Retrieve backfilled acceptances by merchant ID and agreement type

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Get4Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        Get4Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_4._get_kwargs(merchant_uuid=merchant_uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Get4Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_4_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str
) -> Response[Get4Response200]:
    """Retrieve backfilled acceptances by merchant ID and agreement type

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Get4Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        Response[Get4Response200]
    """

    # Extract request parameters from generated function
    kwargs = get_4._get_kwargs(merchant_uuid=merchant_uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Get4Response200 | None
    if body_json and proxy_response.status_code == 200 and Get4Response200:
        parsed = Get4Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_4_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: str
) -> Get4Response200 | None:
    """Retrieve backfilled acceptances by merchant ID and agreement type

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Get4Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        Get4Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_4._get_kwargs(merchant_uuid=merchant_uuid)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Get4Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_4_sync_detailed(
    *,
    client: StolonClient,
    body: ApiBackfillAcceptance,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Create4Response200]:
    """Create acceptance passthrough to Agreement Service

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiBackfillAcceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Create4Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiBackfillAcceptance
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Create4Response200]
    """

    # Extract request parameters from generated function
    kwargs = create_4._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Create4Response200 | None
    if body_json and proxy_response.status_code == 200 and Create4Response200:
        parsed = Create4Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_4_sync(
    *,
    client: StolonClient,
    body: ApiBackfillAcceptance,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Create4Response200 | None:
    """Create acceptance passthrough to Agreement Service

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiBackfillAcceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Create4Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiBackfillAcceptance
        x_clover_appenv: Union[Unset, str]

    Returns:
        Create4Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = create_4._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Create4Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_4_asyncio_detailed(
    *,
    client: StolonClient,
    body: ApiBackfillAcceptance,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Create4Response200]:
    """Create acceptance passthrough to Agreement Service

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiBackfillAcceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Create4Response200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiBackfillAcceptance
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Create4Response200]
    """

    # Extract request parameters from generated function
    kwargs = create_4._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Create4Response200 | None
    if body_json and proxy_response.status_code == 200 and Create4Response200:
        parsed = Create4Response200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_4_asyncio(
    *,
    client: StolonClient,
    body: ApiBackfillAcceptance,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Create4Response200 | None:
    """Create acceptance passthrough to Agreement Service

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiBackfillAcceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Create4Response200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiBackfillAcceptance
        x_clover_appenv: Union[Unset, str]

    Returns:
        Create4Response200 | None
    """

    # Extract request parameters from generated function
    kwargs = create_4._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Create4Response200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

