"""
Proxied wrapper functions for billing-event dev - mlc_captured_event.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.mlc_captured_event import get_mlc_captured_events
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_mlc_captured_events_response_200 import GetMlcCapturedEventsResponse200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import datetime
import json


def get_mlc_captured_events_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[GetMlcCapturedEventsResponse200]:
    """Get captured MLC events

    Args:
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetMlcCapturedEventsResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetMlcCapturedEventsResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_mlc_captured_events._get_kwargs(merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, start_date=start_date, end_date=end_date, page_size=page_size, page_number=page_number)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetMlcCapturedEventsResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetMlcCapturedEventsResponse200:
        parsed = GetMlcCapturedEventsResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_mlc_captured_events_sync(
    *,
    client: StolonClient,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> GetMlcCapturedEventsResponse200 | None:
    """Get captured MLC events

    Args:
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetMlcCapturedEventsResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetMlcCapturedEventsResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_mlc_captured_events._get_kwargs(merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, start_date=start_date, end_date=end_date, page_size=page_size, page_number=page_number)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetMlcCapturedEventsResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_mlc_captured_events_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[GetMlcCapturedEventsResponse200]:
    """Get captured MLC events

    Args:
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetMlcCapturedEventsResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetMlcCapturedEventsResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_mlc_captured_events._get_kwargs(merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, start_date=start_date, end_date=end_date, page_size=page_size, page_number=page_number)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetMlcCapturedEventsResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetMlcCapturedEventsResponse200:
        parsed = GetMlcCapturedEventsResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_mlc_captured_events_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> GetMlcCapturedEventsResponse200 | None:
    """Get captured MLC events

    Args:
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetMlcCapturedEventsResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetMlcCapturedEventsResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_mlc_captured_events._get_kwargs(merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, start_date=start_date, end_date=end_date, page_size=page_size, page_number=page_number)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetMlcCapturedEventsResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

