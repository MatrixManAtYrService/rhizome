"""
Proxied wrapper functions for billing-event dev - external_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Any, Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_bulk_acceptances_sort import (
    GetBulkAcceptancesSort,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_merchant_plan_history_sync_detailed(
    *, client: StolonClient, m_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"m_id": serialize_argument(m_id), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_merchant_plan_history",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_plan_history_asyncio_detailed(
    *, client: StolonClient, m_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"m_id": serialize_argument(m_id), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_merchant_plan_history",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_sync_detailed(
    *,
    client: StolonClient,
    agreement_type: Union[Unset, str] = "BILLING",
    include_deleted: Union[Unset, bool] = False,
    include_template: Union[Unset, bool] = False,
    sort: Union[Unset, GetBulkAcceptancesSort] = GetBulkAcceptancesSort.CREATEDTIME,
    page_size: Union[Unset, int] = 100,
    page_number: Union[Unset, int] = 0,
    merchant_uuids: list[str],
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Any]:
    """Args:
        agreement_type (Union[Unset, str]):  Default: 'BILLING'.
        include_deleted (Union[Unset, bool]):  Default: False.
        include_template (Union[Unset, bool]):  Default: False.
        sort (Union[Unset, GetBulkAcceptancesSort]):  Default: GetBulkAcceptancesSort.CREATEDTIME.
        page_size (Union[Unset, int]):  Default: 100.
        page_number (Union[Unset, int]):  Default: 0.
        merchant_uuids (list[str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                agreement_type: Union[Unset, str]
        include_deleted: Union[Unset, bool]
        include_template: Union[Unset, bool]
        sort: Union[Unset, GetBulkAcceptancesSort]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        merchant_uuids: list[str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "agreement_type": serialize_argument(agreement_type),
        "include_deleted": serialize_argument(include_deleted),
        "include_template": serialize_argument(include_template),
        "sort": serialize_argument(sort),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "merchant_uuids": serialize_argument(merchant_uuids),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_bulk_acceptances",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_asyncio_detailed(
    *,
    client: StolonClient,
    agreement_type: Union[Unset, str] = "BILLING",
    include_deleted: Union[Unset, bool] = False,
    include_template: Union[Unset, bool] = False,
    sort: Union[Unset, GetBulkAcceptancesSort] = GetBulkAcceptancesSort.CREATEDTIME,
    page_size: Union[Unset, int] = 100,
    page_number: Union[Unset, int] = 0,
    merchant_uuids: list[str],
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Any]:
    """Args:
        agreement_type (Union[Unset, str]):  Default: 'BILLING'.
        include_deleted (Union[Unset, bool]):  Default: False.
        include_template (Union[Unset, bool]):  Default: False.
        sort (Union[Unset, GetBulkAcceptancesSort]):  Default: GetBulkAcceptancesSort.CREATEDTIME.
        page_size (Union[Unset, int]):  Default: 100.
        page_number (Union[Unset, int]):  Default: 0.
        merchant_uuids (list[str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                agreement_type: Union[Unset, str]
        include_deleted: Union[Unset, bool]
        include_template: Union[Unset, bool]
        sort: Union[Unset, GetBulkAcceptancesSort]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        merchant_uuids: list[str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "agreement_type": serialize_argument(agreement_type),
        "include_deleted": serialize_argument(include_deleted),
        "include_template": serialize_argument(include_template),
        "sort": serialize_argument(sort),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "merchant_uuids": serialize_argument(merchant_uuids),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_bulk_acceptances",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_sync_detailed(
    *, client: StolonClient, m_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"m_id": serialize_argument(m_id), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_merchant",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_asyncio_detailed(
    *, client: StolonClient, m_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"m_id": serialize_argument(m_id), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_merchant",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_payments_sync_detailed(
    *,
    client: StolonClient,
    m_uuid: str,
    start_date: Union[Unset, str] = UNSET,
    end_date: Union[Unset, str] = UNSET,
    expand: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Any]:
    """Args:
        m_uuid (str):
        start_date (Union[Unset, str]):
        end_date (Union[Unset, str]):
        expand (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                m_uuid: str
        start_date: Union[Unset, str]
        end_date: Union[Unset, str]
        expand: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "m_uuid": serialize_argument(m_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "expand": serialize_argument(expand),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_merchant_payments",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_payments_asyncio_detailed(
    *,
    client: StolonClient,
    m_uuid: str,
    start_date: Union[Unset, str] = UNSET,
    end_date: Union[Unset, str] = UNSET,
    expand: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Any]:
    """Args:
        m_uuid (str):
        start_date (Union[Unset, str]):
        end_date (Union[Unset, str]):
        expand (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                m_uuid: str
        start_date: Union[Unset, str]
        end_date: Union[Unset, str]
        expand: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "m_uuid": serialize_argument(m_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "expand": serialize_argument(expand),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_merchant_payments",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_meta_1_sync_detailed(
    *, client: StolonClient, m_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"m_id": serialize_argument(m_id), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_plan_meta_1",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_meta_1_asyncio_detailed(
    *, client: StolonClient, m_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"m_id": serialize_argument(m_id), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="external_controller.get_plan_meta_1",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
