"""
Proxied wrapper functions for billing-event dev - external_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.external_controller import get_bulk_acceptances
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.external_controller import get_merchant
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.external_controller import get_merchant_payments
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.external_controller import get_merchant_plan_history
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.external_controller import get_plan_meta_1
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_bulk_acceptances_sort import GetBulkAcceptancesSort
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import json


def get_merchant_plan_history_sync_detailed(
    *,
    client: StolonClient,
    m_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_merchant_plan_history._get_kwargs(m_id=m_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_merchant_plan_history_asyncio_detailed(
    *,
    client: StolonClient,
    m_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_merchant_plan_history._get_kwargs(m_id=m_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_bulk_acceptances_sync_detailed(
    *,
    client: StolonClient,
    agreement_type: Union[Unset, str] = "BILLING",
    include_deleted: Union[Unset, bool] = False,
    include_template: Union[Unset, bool] = False,
    sort: Union[Unset, GetBulkAcceptancesSort] = GetBulkAcceptancesSort.CREATEDTIME,
    page_size: Union[Unset, int] = 100,
    page_number: Union[Unset, int] = 0,
    merchant_uuids: list[str],
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        agreement_type (Union[Unset, str]):  Default: 'BILLING'.
        include_deleted (Union[Unset, bool]):  Default: False.
        include_template (Union[Unset, bool]):  Default: False.
        sort (Union[Unset, GetBulkAcceptancesSort]):  Default: GetBulkAcceptancesSort.CREATEDTIME.
        page_size (Union[Unset, int]):  Default: 100.
        page_number (Union[Unset, int]):  Default: 0.
        merchant_uuids (list[str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                agreement_type: Union[Unset, str]
        include_deleted: Union[Unset, bool]
        include_template: Union[Unset, bool]
        sort: Union[Unset, GetBulkAcceptancesSort]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        merchant_uuids: list[str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances._get_kwargs(agreement_type=agreement_type, include_deleted=include_deleted, include_template=include_template, sort=sort, page_size=page_size, page_number=page_number, merchant_uuids=merchant_uuids, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_bulk_acceptances_asyncio_detailed(
    *,
    client: StolonClient,
    agreement_type: Union[Unset, str] = "BILLING",
    include_deleted: Union[Unset, bool] = False,
    include_template: Union[Unset, bool] = False,
    sort: Union[Unset, GetBulkAcceptancesSort] = GetBulkAcceptancesSort.CREATEDTIME,
    page_size: Union[Unset, int] = 100,
    page_number: Union[Unset, int] = 0,
    merchant_uuids: list[str],
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        agreement_type (Union[Unset, str]):  Default: 'BILLING'.
        include_deleted (Union[Unset, bool]):  Default: False.
        include_template (Union[Unset, bool]):  Default: False.
        sort (Union[Unset, GetBulkAcceptancesSort]):  Default: GetBulkAcceptancesSort.CREATEDTIME.
        page_size (Union[Unset, int]):  Default: 100.
        page_number (Union[Unset, int]):  Default: 0.
        merchant_uuids (list[str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                agreement_type: Union[Unset, str]
        include_deleted: Union[Unset, bool]
        include_template: Union[Unset, bool]
        sort: Union[Unset, GetBulkAcceptancesSort]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        merchant_uuids: list[str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances._get_kwargs(agreement_type=agreement_type, include_deleted=include_deleted, include_template=include_template, sort=sort, page_size=page_size, page_number=page_number, merchant_uuids=merchant_uuids, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_merchant_sync_detailed(
    *,
    client: StolonClient,
    m_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_merchant._get_kwargs(m_id=m_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    m_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_merchant._get_kwargs(m_id=m_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_merchant_payments_sync_detailed(
    *,
    client: StolonClient,
    m_uuid: str,
    start_date: Union[Unset, str] = UNSET,
    end_date: Union[Unset, str] = UNSET,
    expand: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_uuid (str):
        start_date (Union[Unset, str]):
        end_date (Union[Unset, str]):
        expand (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                m_uuid: str
        start_date: Union[Unset, str]
        end_date: Union[Unset, str]
        expand: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_merchant_payments._get_kwargs(m_uuid=m_uuid, start_date=start_date, end_date=end_date, expand=expand, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_merchant_payments_asyncio_detailed(
    *,
    client: StolonClient,
    m_uuid: str,
    start_date: Union[Unset, str] = UNSET,
    end_date: Union[Unset, str] = UNSET,
    expand: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_uuid (str):
        start_date (Union[Unset, str]):
        end_date (Union[Unset, str]):
        expand (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                m_uuid: str
        start_date: Union[Unset, str]
        end_date: Union[Unset, str]
        expand: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_merchant_payments._get_kwargs(m_uuid=m_uuid, start_date=start_date, end_date=end_date, expand=expand, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_meta_1_sync_detailed(
    *,
    client: StolonClient,
    m_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_meta_1._get_kwargs(m_id=m_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_meta_1_asyncio_detailed(
    *,
    client: StolonClient,
    m_id: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        m_id (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                m_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_meta_1._get_kwargs(m_id=m_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )

