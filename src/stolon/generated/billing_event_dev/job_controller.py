"""
Proxied wrapper functions for billing-event dev - job_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Any

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_abbs_transition_job_params import (
    ApiAbbsTransitionJobParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_backfill_acceptances_job_params import (
    ApiBackfillAcceptancesJobParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_base_job_params import (
    ApiBaseJobParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_cellular_job_params import (
    ApiCellularJobParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_job_response import ApiJobResponse
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_migrate_merchants_job_params import (
    ApiMigrateMerchantsJobParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_no_op_job_params import (
    ApiNoOpJobParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.app_event_job_params import (
    AppEventJobParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.process_offboarding_records_job_params import (
    ProcessOffboardingRecordsJobParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response
from stolon.serialization import deserialize_result, serialize_argument


def enqueue_process_app_metered_events_job_sync_detailed(
    *, client: StolonClient, body: AppEventJobParams
) -> Response[Any]:
    """Args:
        body (AppEventJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: AppEventJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_metered_events_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_metered_events_job_asyncio_detailed(
    *, client: StolonClient, body: AppEventJobParams
) -> Response[Any]:
    """Args:
        body (AppEventJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: AppEventJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_metered_events_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_rate_events_job_sync_detailed(
    *, client: StolonClient, body: AppEventJobParams
) -> Response[Any]:
    """Args:
        body (AppEventJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: AppEventJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_rate_events_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_rate_events_job_asyncio_detailed(
    *, client: StolonClient, body: AppEventJobParams
) -> Response[Any]:
    """Args:
        body (AppEventJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: AppEventJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_rate_events_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_plan_advance_events_job_sync_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues the job to generate plan advance and plan arrears events.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_plan_advance_events_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_plan_advance_events_job_sync(*, client: StolonClient, body: ApiBaseJobParams) -> ApiJobResponse | None:
    """Enqueues the job to generate plan advance and plan arrears events.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_plan_advance_events_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_plan_advance_events_job_asyncio_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues the job to generate plan advance and plan arrears events.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_plan_advance_events_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_plan_advance_events_job_asyncio(*, client: StolonClient, body: ApiBaseJobParams) -> ApiJobResponse | None:
    """Enqueues the job to generate plan advance and plan arrears events.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_plan_advance_events_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_payment_transaction_sync_job_sync_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues the job to synchronize payment transaction data.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_payment_transaction_sync_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_payment_transaction_sync_job_sync(*, client: StolonClient, body: ApiBaseJobParams) -> ApiJobResponse | None:
    """Enqueues the job to synchronize payment transaction data.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_payment_transaction_sync_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_payment_transaction_sync_job_asyncio_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues the job to synchronize payment transaction data.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_payment_transaction_sync_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_payment_transaction_sync_job_asyncio(
    *, client: StolonClient, body: ApiBaseJobParams
) -> ApiJobResponse | None:
    """Enqueues the job to synchronize payment transaction data.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_payment_transaction_sync_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def kill_job_sync_detailed(*, client: StolonClient, request_uuid: str) -> Response[ApiJobResponse]:
    """Requests that the job associated with the specified billing request UUID be marked for termination
    (be killed).

    Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.kill_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def kill_job_sync(*, client: StolonClient, request_uuid: str) -> ApiJobResponse | None:
    """Requests that the job associated with the specified billing request UUID be marked for termination
    (be killed).

    Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.kill_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def kill_job_asyncio_detailed(*, client: StolonClient, request_uuid: str) -> Response[ApiJobResponse]:
    """Requests that the job associated with the specified billing request UUID be marked for termination
    (be killed).

    Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.kill_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def kill_job_asyncio(*, client: StolonClient, request_uuid: str) -> ApiJobResponse | None:
    """Requests that the job associated with the specified billing request UUID be marked for termination
    (be killed).

    Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.kill_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def memo_sync_detailed(*, client: StolonClient, heading: str, body: ApiBaseJobParams) -> Response[ApiJobResponse]:
    """Billing Event may post a memo to the bookkeeper via a job.

    Args:
        heading (str):
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                heading: str
        body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"heading": serialize_argument(heading), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.memo",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def memo_sync(*, client: StolonClient, heading: str, body: ApiBaseJobParams) -> ApiJobResponse | None:
    """Billing Event may post a memo to the bookkeeper via a job.

    Args:
        heading (str):
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                heading: str
        body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"heading": serialize_argument(heading), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.memo",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def memo_asyncio_detailed(*, client: StolonClient, heading: str, body: ApiBaseJobParams) -> Response[ApiJobResponse]:
    """Billing Event may post a memo to the bookkeeper via a job.

    Args:
        heading (str):
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                heading: str
        body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"heading": serialize_argument(heading), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.memo",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def memo_asyncio(*, client: StolonClient, heading: str, body: ApiBaseJobParams) -> ApiJobResponse | None:
    """Billing Event may post a memo to the bookkeeper via a job.

    Args:
        heading (str):
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                heading: str
        body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"heading": serialize_argument(heading), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.memo",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def exec_pending_event_catchup_job_sync_detailed(*, client: StolonClient) -> Response[ApiJobResponse]:
    """Executes the pending event catchup job immediately.  This will catchup pending events in case where
    asynchronous event processing is behind.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.exec_pending_event_catchup_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def exec_pending_event_catchup_job_sync(*, client: StolonClient) -> ApiJobResponse | None:
    """Executes the pending event catchup job immediately.  This will catchup pending events in case where
    asynchronous event processing is behind.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.exec_pending_event_catchup_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def exec_pending_event_catchup_job_asyncio_detailed(*, client: StolonClient) -> Response[ApiJobResponse]:
    """Executes the pending event catchup job immediately.  This will catchup pending events in case where
    asynchronous event processing is behind.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.exec_pending_event_catchup_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def exec_pending_event_catchup_job_asyncio(*, client: StolonClient) -> ApiJobResponse | None:
    """Executes the pending event catchup job immediately.  This will catchup pending events in case where
    asynchronous event processing is behind.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.exec_pending_event_catchup_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_sub_events_job_sync_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues daily job for processing app subscription events that occurred throughout the day

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_sub_events_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_sub_events_job_sync(*, client: StolonClient, body: ApiBaseJobParams) -> ApiJobResponse | None:
    """Enqueues daily job for processing app subscription events that occurred throughout the day

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_sub_events_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_sub_events_job_asyncio_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues daily job for processing app subscription events that occurred throughout the day

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_sub_events_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_sub_events_job_asyncio(
    *, client: StolonClient, body: ApiBaseJobParams
) -> ApiJobResponse | None:
    """Enqueues daily job for processing app subscription events that occurred throughout the day

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_sub_events_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_subscription_events_job_sync_detailed(
    *, client: StolonClient, body: AppEventJobParams
) -> Response[Any]:
    """Args:
        body (AppEventJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: AppEventJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_subscription_events_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_subscription_events_job_asyncio_detailed(
    *, client: StolonClient, body: AppEventJobParams
) -> Response[Any]:
    """Args:
        body (AppEventJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: AppEventJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_subscription_events_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def query_job_sync_detailed(*, client: StolonClient, request_uuid: str) -> Response[ApiJobResponse]:
    """Queries for the status of the job associated with the specified billing request.

    Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.query_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def query_job_sync(*, client: StolonClient, request_uuid: str) -> ApiJobResponse | None:
    """Queries for the status of the job associated with the specified billing request.

    Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.query_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def query_job_asyncio_detailed(*, client: StolonClient, request_uuid: str) -> Response[ApiJobResponse]:
    """Queries for the status of the job associated with the specified billing request.

    Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.query_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def query_job_asyncio(*, client: StolonClient, request_uuid: str) -> ApiJobResponse | None:
    """Queries for the status of the job associated with the specified billing request.

    Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.query_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_active_offboarding_records_sync_detailed(
    *, client: StolonClient, body: ProcessOffboardingRecordsJobParams
) -> Response[Any]:
    """Args:
        body (ProcessOffboardingRecordsJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ProcessOffboardingRecordsJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_active_offboarding_records",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_active_offboarding_records_asyncio_detailed(
    *, client: StolonClient, body: ProcessOffboardingRecordsJobParams
) -> Response[Any]:
    """Args:
        body (ProcessOffboardingRecordsJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ProcessOffboardingRecordsJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_active_offboarding_records",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_no_op_job_sync_detailed(*, client: StolonClient, body: ApiNoOpJobParams) -> Response[ApiJobResponse]:
    """Enqueues the No-Op job for execution.

    Args:
        body (ApiNoOpJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiNoOpJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_no_op_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_no_op_job_sync(*, client: StolonClient, body: ApiNoOpJobParams) -> ApiJobResponse | None:
    """Enqueues the No-Op job for execution.

    Args:
        body (ApiNoOpJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiNoOpJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_no_op_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_no_op_job_asyncio_detailed(*, client: StolonClient, body: ApiNoOpJobParams) -> Response[ApiJobResponse]:
    """Enqueues the No-Op job for execution.

    Args:
        body (ApiNoOpJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiNoOpJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_no_op_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_no_op_job_asyncio(*, client: StolonClient, body: ApiNoOpJobParams) -> ApiJobResponse | None:
    """Enqueues the No-Op job for execution.

    Args:
        body (ApiNoOpJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiNoOpJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_no_op_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_cellular_arrears_job_sync_detailed(
    *, client: StolonClient, body: ApiCellularJobParams
) -> Response[ApiJobResponse]:
    """Enqueues job to process cellular billing.

    Args:
        body (ApiCellularJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiCellularJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_cellular_arrears_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_cellular_arrears_job_sync(*, client: StolonClient, body: ApiCellularJobParams) -> ApiJobResponse | None:
    """Enqueues job to process cellular billing.

    Args:
        body (ApiCellularJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiCellularJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_cellular_arrears_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_cellular_arrears_job_asyncio_detailed(
    *, client: StolonClient, body: ApiCellularJobParams
) -> Response[ApiJobResponse]:
    """Enqueues job to process cellular billing.

    Args:
        body (ApiCellularJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiCellularJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_cellular_arrears_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_cellular_arrears_job_asyncio(*, client: StolonClient, body: ApiCellularJobParams) -> ApiJobResponse | None:
    """Enqueues job to process cellular billing.

    Args:
        body (ApiCellularJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiCellularJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_cellular_arrears_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_create_backfill_acceptances_job_sync_detailed(
    *, client: StolonClient, body: ApiBackfillAcceptancesJobParams
) -> Response[ApiJobResponse]:
    """Creates backfill acceptances in bulk.

    Args:
        body (ApiBackfillAcceptancesJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBackfillAcceptancesJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_create_backfill_acceptances_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_create_backfill_acceptances_job_sync(
    *, client: StolonClient, body: ApiBackfillAcceptancesJobParams
) -> ApiJobResponse | None:
    """Creates backfill acceptances in bulk.

    Args:
        body (ApiBackfillAcceptancesJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBackfillAcceptancesJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_create_backfill_acceptances_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_create_backfill_acceptances_job_asyncio_detailed(
    *, client: StolonClient, body: ApiBackfillAcceptancesJobParams
) -> Response[ApiJobResponse]:
    """Creates backfill acceptances in bulk.

    Args:
        body (ApiBackfillAcceptancesJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBackfillAcceptancesJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_create_backfill_acceptances_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_create_backfill_acceptances_job_asyncio(
    *, client: StolonClient, body: ApiBackfillAcceptancesJobParams
) -> ApiJobResponse | None:
    """Creates backfill acceptances in bulk.

    Args:
        body (ApiBackfillAcceptancesJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBackfillAcceptancesJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_create_backfill_acceptances_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_migrate_merchants_job_sync_detailed(
    *, client: StolonClient, body: ApiMigrateMerchantsJobParams
) -> Response[Any]:
    """Enqueues the job to migrate merchants.

    Args:
        body (ApiMigrateMerchantsJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiMigrateMerchantsJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_migrate_merchants_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_migrate_merchants_job_asyncio_detailed(
    *, client: StolonClient, body: ApiMigrateMerchantsJobParams
) -> Response[Any]:
    """Enqueues the job to migrate merchants.

    Args:
        body (ApiMigrateMerchantsJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiMigrateMerchantsJobParams

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_migrate_merchants_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_abbs_transition_job_sync_detailed(
    *, client: StolonClient, body: ApiAbbsTransitionJobParams
) -> Response[ApiJobResponse]:
    """Enqueues the ABBS Transition Job.

    Args:
        body (ApiAbbsTransitionJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAbbsTransitionJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_abbs_transition_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_abbs_transition_job_sync(
    *, client: StolonClient, body: ApiAbbsTransitionJobParams
) -> ApiJobResponse | None:
    """Enqueues the ABBS Transition Job.

    Args:
        body (ApiAbbsTransitionJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAbbsTransitionJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_abbs_transition_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_abbs_transition_job_asyncio_detailed(
    *, client: StolonClient, body: ApiAbbsTransitionJobParams
) -> Response[ApiJobResponse]:
    """Enqueues the ABBS Transition Job.

    Args:
        body (ApiAbbsTransitionJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAbbsTransitionJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_abbs_transition_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_abbs_transition_job_asyncio(
    *, client: StolonClient, body: ApiAbbsTransitionJobParams
) -> ApiJobResponse | None:
    """Enqueues the ABBS Transition Job.

    Args:
        body (ApiAbbsTransitionJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAbbsTransitionJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_abbs_transition_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def exec_pending_event_stale_cleanup_job_sync_detailed(*, client: StolonClient) -> Response[ApiJobResponse]:
    """Executes the pending event stale cleanup job immediately.  This will cleanup any stale pending
    events and produce consumer failures from those.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.exec_pending_event_stale_cleanup_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def exec_pending_event_stale_cleanup_job_sync(*, client: StolonClient) -> ApiJobResponse | None:
    """Executes the pending event stale cleanup job immediately.  This will cleanup any stale pending
    events and produce consumer failures from those.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.exec_pending_event_stale_cleanup_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def exec_pending_event_stale_cleanup_job_asyncio_detailed(*, client: StolonClient) -> Response[ApiJobResponse]:
    """Executes the pending event stale cleanup job immediately.  This will cleanup any stale pending
    events and produce consumer failures from those.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.exec_pending_event_stale_cleanup_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def exec_pending_event_stale_cleanup_job_asyncio(*, client: StolonClient) -> ApiJobResponse | None:
    """Executes the pending event stale cleanup job immediately.  This will cleanup any stale pending
    events and produce consumer failures from those.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.exec_pending_event_stale_cleanup_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_app_sub_advance_events_job_sync_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues the job to generate app subscription advance events.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_app_sub_advance_events_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_app_sub_advance_events_job_sync(*, client: StolonClient, body: ApiBaseJobParams) -> ApiJobResponse | None:
    """Enqueues the job to generate app subscription advance events.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_app_sub_advance_events_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_app_sub_advance_events_job_asyncio_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues the job to generate app subscription advance events.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_app_sub_advance_events_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_app_sub_advance_events_job_asyncio(
    *, client: StolonClient, body: ApiBaseJobParams
) -> ApiJobResponse | None:
    """Enqueues the job to generate app subscription advance events.

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_app_sub_advance_events_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_meter_events_job_sync_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues daily job for processing app metered events that occurred throughout the day

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_meter_events_job",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_meter_events_job_sync(*, client: StolonClient, body: ApiBaseJobParams) -> ApiJobResponse | None:
    """Enqueues daily job for processing app metered events that occurred throughout the day

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_meter_events_job",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_meter_events_job_asyncio_detailed(
    *, client: StolonClient, body: ApiBaseJobParams
) -> Response[ApiJobResponse]:
    """Enqueues daily job for processing app metered events that occurred throughout the day

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiJobResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        Response[ApiJobResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_meter_events_job",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def enqueue_process_app_meter_events_job_asyncio(
    *, client: StolonClient, body: ApiBaseJobParams
) -> ApiJobResponse | None:
    """Enqueues daily job for processing app metered events that occurred throughout the day

    Args:
        body (ApiBaseJobParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiJobResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBaseJobParams

    Returns:
        ApiJobResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="job_controller.enqueue_process_app_meter_events_job",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiJobResponse]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
