"""
Proxied wrapper functions for billing-event dev - plan_trial.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_active_plan_trial_for_merchant_response_200 import (
    GetActivePlanTrialForMerchantResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_latest_plan_trial_for_merchant_response_200 import (
    GetLatestPlanTrialForMerchantResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_latest_plan_trials_for_merchants_response_200 import (
    GetLatestPlanTrialsForMerchantsResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_plan_trials_response_200 import (
    GetPlanTrialsResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_plan_trials_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[GetPlanTrialsResponse200]:
    """Get plan trials

    Args:
        merchant_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetPlanTrialsResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetPlanTrialsResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_plan_trials",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetPlanTrialsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_trials_sync(
    *,
    client: StolonClient,
    merchant_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> GetPlanTrialsResponse200 | None:
    """Get plan trials

    Args:
        merchant_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetPlanTrialsResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetPlanTrialsResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_plan_trials",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetPlanTrialsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_trials_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[GetPlanTrialsResponse200]:
    """Get plan trials

    Args:
        merchant_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetPlanTrialsResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetPlanTrialsResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_plan_trials",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetPlanTrialsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_trials_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> GetPlanTrialsResponse200 | None:
    """Get plan trials

    Args:
        merchant_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetPlanTrialsResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetPlanTrialsResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_plan_trials",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetPlanTrialsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_plan_trial_for_merchant_sync_detailed(
    *, client: StolonClient, merchant_uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetLatestPlanTrialForMerchantResponse200]:
    """Get latest plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetLatestPlanTrialForMerchantResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetLatestPlanTrialForMerchantResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_latest_plan_trial_for_merchant",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetLatestPlanTrialForMerchantResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_plan_trial_for_merchant_sync(
    *, client: StolonClient, merchant_uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> GetLatestPlanTrialForMerchantResponse200 | None:
    """Get latest plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetLatestPlanTrialForMerchantResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetLatestPlanTrialForMerchantResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_latest_plan_trial_for_merchant",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetLatestPlanTrialForMerchantResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_plan_trial_for_merchant_asyncio_detailed(
    *, client: StolonClient, merchant_uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetLatestPlanTrialForMerchantResponse200]:
    """Get latest plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetLatestPlanTrialForMerchantResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetLatestPlanTrialForMerchantResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_latest_plan_trial_for_merchant",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetLatestPlanTrialForMerchantResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_plan_trial_for_merchant_asyncio(
    *, client: StolonClient, merchant_uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> GetLatestPlanTrialForMerchantResponse200 | None:
    """Get latest plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetLatestPlanTrialForMerchantResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetLatestPlanTrialForMerchantResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_latest_plan_trial_for_merchant",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetLatestPlanTrialForMerchantResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_active_plan_trial_for_merchant_sync_detailed(
    *, client: StolonClient, merchant_uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetActivePlanTrialForMerchantResponse200]:
    """Get active merchant plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetActivePlanTrialForMerchantResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetActivePlanTrialForMerchantResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_active_plan_trial_for_merchant",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetActivePlanTrialForMerchantResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_active_plan_trial_for_merchant_sync(
    *, client: StolonClient, merchant_uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> GetActivePlanTrialForMerchantResponse200 | None:
    """Get active merchant plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetActivePlanTrialForMerchantResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetActivePlanTrialForMerchantResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_active_plan_trial_for_merchant",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetActivePlanTrialForMerchantResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_active_plan_trial_for_merchant_asyncio_detailed(
    *, client: StolonClient, merchant_uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetActivePlanTrialForMerchantResponse200]:
    """Get active merchant plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetActivePlanTrialForMerchantResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetActivePlanTrialForMerchantResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_active_plan_trial_for_merchant",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetActivePlanTrialForMerchantResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_active_plan_trial_for_merchant_asyncio(
    *, client: StolonClient, merchant_uuid: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> GetActivePlanTrialForMerchantResponse200 | None:
    """Get active merchant plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetActivePlanTrialForMerchantResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetActivePlanTrialForMerchantResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_active_plan_trial_for_merchant",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetActivePlanTrialForMerchantResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_plan_trials_for_merchants_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuids: Union[Unset, list[str]] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[GetLatestPlanTrialsForMerchantsResponse200]:
    """get Latest Trials for a List of Merchants

    Args:
        merchant_uuids (Union[Unset, list[str]]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetLatestPlanTrialsForMerchantsResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuids: Union[Unset, list[str]]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetLatestPlanTrialsForMerchantsResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuids": serialize_argument(merchant_uuids),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_latest_plan_trials_for_merchants",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetLatestPlanTrialsForMerchantsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_plan_trials_for_merchants_sync(
    *,
    client: StolonClient,
    merchant_uuids: Union[Unset, list[str]] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> GetLatestPlanTrialsForMerchantsResponse200 | None:
    """get Latest Trials for a List of Merchants

    Args:
        merchant_uuids (Union[Unset, list[str]]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetLatestPlanTrialsForMerchantsResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuids: Union[Unset, list[str]]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetLatestPlanTrialsForMerchantsResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuids": serialize_argument(merchant_uuids),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_latest_plan_trials_for_merchants",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetLatestPlanTrialsForMerchantsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_plan_trials_for_merchants_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuids: Union[Unset, list[str]] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[GetLatestPlanTrialsForMerchantsResponse200]:
    """get Latest Trials for a List of Merchants

    Args:
        merchant_uuids (Union[Unset, list[str]]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetLatestPlanTrialsForMerchantsResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuids: Union[Unset, list[str]]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetLatestPlanTrialsForMerchantsResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuids": serialize_argument(merchant_uuids),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_latest_plan_trials_for_merchants",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetLatestPlanTrialsForMerchantsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_plan_trials_for_merchants_asyncio(
    *,
    client: StolonClient,
    merchant_uuids: Union[Unset, list[str]] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> GetLatestPlanTrialsForMerchantsResponse200 | None:
    """get Latest Trials for a List of Merchants

    Args:
        merchant_uuids (Union[Unset, list[str]]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetLatestPlanTrialsForMerchantsResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuids: Union[Unset, list[str]]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetLatestPlanTrialsForMerchantsResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuids": serialize_argument(merchant_uuids),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="plan_trial.get_latest_plan_trials_for_merchants",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetLatestPlanTrialsForMerchantsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
