"""
Proxied wrapper functions for billing-event dev - plan_trial.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.plan_trial import get_active_plan_trial_for_merchant
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.plan_trial import get_latest_plan_trial_for_merchant
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.plan_trial import get_latest_plan_trials_for_merchants
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.plan_trial import get_plan_trials
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_active_plan_trial_for_merchant_response_200 import GetActivePlanTrialForMerchantResponse200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_latest_plan_trial_for_merchant_response_200 import GetLatestPlanTrialForMerchantResponse200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_latest_plan_trials_for_merchants_response_200 import GetLatestPlanTrialsForMerchantsResponse200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_plan_trials_response_200 import GetPlanTrialsResponse200
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import json


def get_plan_trials_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetPlanTrialsResponse200]:
    """Get plan trials

    Args:
        merchant_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetPlanTrialsResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetPlanTrialsResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_trials._get_kwargs(merchant_uuid=merchant_uuid, page_size=page_size, page_number=page_number, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetPlanTrialsResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetPlanTrialsResponse200:
        parsed = GetPlanTrialsResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_trials_sync(
    *,
    client: StolonClient,
    merchant_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> GetPlanTrialsResponse200 | None:
    """Get plan trials

    Args:
        merchant_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetPlanTrialsResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetPlanTrialsResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_trials._get_kwargs(merchant_uuid=merchant_uuid, page_size=page_size, page_number=page_number, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetPlanTrialsResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_trials_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetPlanTrialsResponse200]:
    """Get plan trials

    Args:
        merchant_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetPlanTrialsResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetPlanTrialsResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_trials._get_kwargs(merchant_uuid=merchant_uuid, page_size=page_size, page_number=page_number, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetPlanTrialsResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetPlanTrialsResponse200:
        parsed = GetPlanTrialsResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_trials_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> GetPlanTrialsResponse200 | None:
    """Get plan trials

    Args:
        merchant_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetPlanTrialsResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetPlanTrialsResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_trials._get_kwargs(merchant_uuid=merchant_uuid, page_size=page_size, page_number=page_number, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetPlanTrialsResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_latest_plan_trial_for_merchant_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetLatestPlanTrialForMerchantResponse200]:
    """Get latest plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetLatestPlanTrialForMerchantResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetLatestPlanTrialForMerchantResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_latest_plan_trial_for_merchant._get_kwargs(merchant_uuid=merchant_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetLatestPlanTrialForMerchantResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetLatestPlanTrialForMerchantResponse200:
        parsed = GetLatestPlanTrialForMerchantResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_latest_plan_trial_for_merchant_sync(
    *,
    client: StolonClient,
    merchant_uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> GetLatestPlanTrialForMerchantResponse200 | None:
    """Get latest plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetLatestPlanTrialForMerchantResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetLatestPlanTrialForMerchantResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_latest_plan_trial_for_merchant._get_kwargs(merchant_uuid=merchant_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetLatestPlanTrialForMerchantResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_latest_plan_trial_for_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetLatestPlanTrialForMerchantResponse200]:
    """Get latest plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetLatestPlanTrialForMerchantResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetLatestPlanTrialForMerchantResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_latest_plan_trial_for_merchant._get_kwargs(merchant_uuid=merchant_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetLatestPlanTrialForMerchantResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetLatestPlanTrialForMerchantResponse200:
        parsed = GetLatestPlanTrialForMerchantResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_latest_plan_trial_for_merchant_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> GetLatestPlanTrialForMerchantResponse200 | None:
    """Get latest plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetLatestPlanTrialForMerchantResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetLatestPlanTrialForMerchantResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_latest_plan_trial_for_merchant._get_kwargs(merchant_uuid=merchant_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetLatestPlanTrialForMerchantResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_active_plan_trial_for_merchant_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetActivePlanTrialForMerchantResponse200]:
    """Get active merchant plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetActivePlanTrialForMerchantResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetActivePlanTrialForMerchantResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_active_plan_trial_for_merchant._get_kwargs(merchant_uuid=merchant_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetActivePlanTrialForMerchantResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetActivePlanTrialForMerchantResponse200:
        parsed = GetActivePlanTrialForMerchantResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_active_plan_trial_for_merchant_sync(
    *,
    client: StolonClient,
    merchant_uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> GetActivePlanTrialForMerchantResponse200 | None:
    """Get active merchant plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetActivePlanTrialForMerchantResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetActivePlanTrialForMerchantResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_active_plan_trial_for_merchant._get_kwargs(merchant_uuid=merchant_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetActivePlanTrialForMerchantResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_active_plan_trial_for_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetActivePlanTrialForMerchantResponse200]:
    """Get active merchant plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetActivePlanTrialForMerchantResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetActivePlanTrialForMerchantResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_active_plan_trial_for_merchant._get_kwargs(merchant_uuid=merchant_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetActivePlanTrialForMerchantResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetActivePlanTrialForMerchantResponse200:
        parsed = GetActivePlanTrialForMerchantResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_active_plan_trial_for_merchant_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: str,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> GetActivePlanTrialForMerchantResponse200 | None:
    """Get active merchant plan trial

    Args:
        merchant_uuid (str):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetActivePlanTrialForMerchantResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetActivePlanTrialForMerchantResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_active_plan_trial_for_merchant._get_kwargs(merchant_uuid=merchant_uuid, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetActivePlanTrialForMerchantResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_latest_plan_trials_for_merchants_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuids: Union[Unset, list[str]] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetLatestPlanTrialsForMerchantsResponse200]:
    """get Latest Trials for a List of Merchants

    Args:
        merchant_uuids (Union[Unset, list[str]]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetLatestPlanTrialsForMerchantsResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuids: Union[Unset, list[str]]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetLatestPlanTrialsForMerchantsResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_latest_plan_trials_for_merchants._get_kwargs(merchant_uuids=merchant_uuids, page_size=page_size, page_number=page_number, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetLatestPlanTrialsForMerchantsResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetLatestPlanTrialsForMerchantsResponse200:
        parsed = GetLatestPlanTrialsForMerchantsResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_latest_plan_trials_for_merchants_sync(
    *,
    client: StolonClient,
    merchant_uuids: Union[Unset, list[str]] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> GetLatestPlanTrialsForMerchantsResponse200 | None:
    """get Latest Trials for a List of Merchants

    Args:
        merchant_uuids (Union[Unset, list[str]]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetLatestPlanTrialsForMerchantsResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuids: Union[Unset, list[str]]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetLatestPlanTrialsForMerchantsResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_latest_plan_trials_for_merchants._get_kwargs(merchant_uuids=merchant_uuids, page_size=page_size, page_number=page_number, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetLatestPlanTrialsForMerchantsResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_latest_plan_trials_for_merchants_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuids: Union[Unset, list[str]] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[GetLatestPlanTrialsForMerchantsResponse200]:
    """get Latest Trials for a List of Merchants

    Args:
        merchant_uuids (Union[Unset, list[str]]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetLatestPlanTrialsForMerchantsResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuids: Union[Unset, list[str]]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[GetLatestPlanTrialsForMerchantsResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_latest_plan_trials_for_merchants._get_kwargs(merchant_uuids=merchant_uuids, page_size=page_size, page_number=page_number, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetLatestPlanTrialsForMerchantsResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetLatestPlanTrialsForMerchantsResponse200:
        parsed = GetLatestPlanTrialsForMerchantsResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_latest_plan_trials_for_merchants_asyncio(
    *,
    client: StolonClient,
    merchant_uuids: Union[Unset, list[str]] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> GetLatestPlanTrialsForMerchantsResponse200 | None:
    """get Latest Trials for a List of Merchants

    Args:
        merchant_uuids (Union[Unset, list[str]]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetLatestPlanTrialsForMerchantsResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuids: Union[Unset, list[str]]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        GetLatestPlanTrialsForMerchantsResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_latest_plan_trials_for_merchants._get_kwargs(merchant_uuids=merchant_uuids, page_size=page_size, page_number=page_number, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/billing-event" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetLatestPlanTrialsForMerchantsResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

