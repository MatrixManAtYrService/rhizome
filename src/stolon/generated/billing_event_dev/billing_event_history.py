"""
Proxied wrapper functions for billing-event dev - billing_event_history.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_billing_event_history_response_200 import (
    GetBillingEventHistoryResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_billing_event_history_sync_detailed(
    *,
    client: StolonClient,
    entity_uuid: Union[Unset, str] = UNSET,
    event_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[GetBillingEventHistoryResponse200]:
    """Get billing event history

    Args:
        entity_uuid (Union[Unset, str]):
        event_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetBillingEventHistoryResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                entity_uuid: Union[Unset, str]
        event_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetBillingEventHistoryResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "entity_uuid": serialize_argument(entity_uuid),
        "event_uuid": serialize_argument(event_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="billing_event_history.get_billing_event_history",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetBillingEventHistoryResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_event_history_sync(
    *,
    client: StolonClient,
    entity_uuid: Union[Unset, str] = UNSET,
    event_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> GetBillingEventHistoryResponse200 | None:
    """Get billing event history

    Args:
        entity_uuid (Union[Unset, str]):
        event_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetBillingEventHistoryResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                entity_uuid: Union[Unset, str]
        event_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetBillingEventHistoryResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "entity_uuid": serialize_argument(entity_uuid),
        "event_uuid": serialize_argument(event_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="billing_event_history.get_billing_event_history",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetBillingEventHistoryResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_event_history_asyncio_detailed(
    *,
    client: StolonClient,
    entity_uuid: Union[Unset, str] = UNSET,
    event_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[GetBillingEventHistoryResponse200]:
    """Get billing event history

    Args:
        entity_uuid (Union[Unset, str]):
        event_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetBillingEventHistoryResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                entity_uuid: Union[Unset, str]
        event_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetBillingEventHistoryResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "entity_uuid": serialize_argument(entity_uuid),
        "event_uuid": serialize_argument(event_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="billing_event_history.get_billing_event_history",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetBillingEventHistoryResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_event_history_asyncio(
    *,
    client: StolonClient,
    entity_uuid: Union[Unset, str] = UNSET,
    event_uuid: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> GetBillingEventHistoryResponse200 | None:
    """Get billing event history

    Args:
        entity_uuid (Union[Unset, str]):
        event_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetBillingEventHistoryResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                entity_uuid: Union[Unset, str]
        event_uuid: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetBillingEventHistoryResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "entity_uuid": serialize_argument(entity_uuid),
        "event_uuid": serialize_argument(event_uuid),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="billing_event_history.get_billing_event_history",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetBillingEventHistoryResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
