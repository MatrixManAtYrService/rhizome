"""
Proxied wrapper functions for billing-event dev - email_callback_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import json
from http import HTTPStatus
from typing import Any, Union

from stolon.client import StolonClient
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.api.email_callback_controller import (
    handle_notification_callback,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.callback_message import (
    CallbackMessage,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset


def handle_notification_callback_sync_detailed(
    *, client: StolonClient, body: CallbackMessage, callback_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        callback_id (str):
        x_clover_appenv (Union[Unset, str]):
        body (CallbackMessage):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: CallbackMessage
        callback_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Extract request parameters from generated function
    kwargs = handle_notification_callback._get_kwargs(
        body=body, callback_id=callback_id, x_clover_appenv=x_clover_appenv
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def handle_notification_callback_asyncio_detailed(
    *, client: StolonClient, body: CallbackMessage, callback_id: str, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        callback_id (str):
        x_clover_appenv (Union[Unset, str]):
        body (CallbackMessage):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: CallbackMessage
        callback_id: str
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Extract request parameters from generated function
    kwargs = handle_notification_callback._get_kwargs(
        body=body, callback_id=callback_id, x_clover_appenv=x_clover_appenv
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )
