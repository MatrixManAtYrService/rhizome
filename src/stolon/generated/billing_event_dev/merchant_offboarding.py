"""
Proxied wrapper functions for billing-event dev - merchant_offboarding.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_merchant_offboarding import (
    ApiMerchantOffboarding,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.create_offboarding_request import (
    CreateOffboardingRequest,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_offboarding_by_merchant_uuid_sync_detailed(
    *, client: StolonClient, merchant_uuid: str
) -> Response[ApiMerchantOffboarding]:
    """Get offboarding, gets latest offboarding step or the offboarding by the step parameter or the
    explicit id

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.get_offboarding_by_merchant_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_offboarding_by_merchant_uuid_sync(*, client: StolonClient, merchant_uuid: str) -> ApiMerchantOffboarding | None:
    """Get offboarding, gets latest offboarding step or the offboarding by the step parameter or the
    explicit id

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        ApiMerchantOffboarding | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.get_offboarding_by_merchant_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_offboarding_by_merchant_uuid_asyncio_detailed(
    *, client: StolonClient, merchant_uuid: str
) -> Response[ApiMerchantOffboarding]:
    """Get offboarding, gets latest offboarding step or the offboarding by the step parameter or the
    explicit id

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.get_offboarding_by_merchant_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_offboarding_by_merchant_uuid_asyncio(
    *, client: StolonClient, merchant_uuid: str
) -> ApiMerchantOffboarding | None:
    """Get offboarding, gets latest offboarding step or the offboarding by the step parameter or the
    explicit id

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: str

    Returns:
        ApiMerchantOffboarding | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuid": serialize_argument(merchant_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.get_offboarding_by_merchant_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_all_offboardings_by_step_sync_detailed(
    *,
    client: StolonClient,
    merchant_uuid: Union[Unset, str] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[ApiMerchantOffboarding]:
    """get all offboardings by step and option merchant uuid

    Args:
        merchant_uuid (Union[Unset, str]):
        page_number (Union[Unset, int]):
        page_size (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: Union[Unset, str]
        page_number: Union[Unset, int]
        page_size: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "page_number": serialize_argument(page_number),
        "page_size": serialize_argument(page_size),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.get_all_offboardings_by_step",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_all_offboardings_by_step_sync(
    *,
    client: StolonClient,
    merchant_uuid: Union[Unset, str] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> ApiMerchantOffboarding | None:
    """get all offboardings by step and option merchant uuid

    Args:
        merchant_uuid (Union[Unset, str]):
        page_number (Union[Unset, int]):
        page_size (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: Union[Unset, str]
        page_number: Union[Unset, int]
        page_size: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        ApiMerchantOffboarding | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "page_number": serialize_argument(page_number),
        "page_size": serialize_argument(page_size),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.get_all_offboardings_by_step",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_all_offboardings_by_step_asyncio_detailed(
    *,
    client: StolonClient,
    merchant_uuid: Union[Unset, str] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[ApiMerchantOffboarding]:
    """get all offboardings by step and option merchant uuid

    Args:
        merchant_uuid (Union[Unset, str]):
        page_number (Union[Unset, int]):
        page_size (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: Union[Unset, str]
        page_number: Union[Unset, int]
        page_size: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "page_number": serialize_argument(page_number),
        "page_size": serialize_argument(page_size),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.get_all_offboardings_by_step",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_all_offboardings_by_step_asyncio(
    *,
    client: StolonClient,
    merchant_uuid: Union[Unset, str] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> ApiMerchantOffboarding | None:
    """get all offboardings by step and option merchant uuid

    Args:
        merchant_uuid (Union[Unset, str]):
        page_number (Union[Unset, int]):
        page_size (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuid: Union[Unset, str]
        page_number: Union[Unset, int]
        page_size: Union[Unset, int]
        x_clover_appenv: Union[Unset, str]

    Returns:
        ApiMerchantOffboarding | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "merchant_uuid": serialize_argument(merchant_uuid),
        "page_number": serialize_argument(page_number),
        "page_size": serialize_argument(page_size),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.get_all_offboardings_by_step",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_offboarding_sync_detailed(
    *, client: StolonClient, body: CreateOffboardingRequest, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[ApiMerchantOffboarding]:
    """Create offboarding

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (CreateOffboardingRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CreateOffboardingRequest
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.create_offboarding",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_offboarding_sync(
    *, client: StolonClient, body: CreateOffboardingRequest, x_clover_appenv: Union[Unset, str] = UNSET
) -> ApiMerchantOffboarding | None:
    """Create offboarding

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (CreateOffboardingRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CreateOffboardingRequest
        x_clover_appenv: Union[Unset, str]

    Returns:
        ApiMerchantOffboarding | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.create_offboarding",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_offboarding_asyncio_detailed(
    *, client: StolonClient, body: CreateOffboardingRequest, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[ApiMerchantOffboarding]:
    """Create offboarding

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (CreateOffboardingRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CreateOffboardingRequest
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.create_offboarding",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def create_offboarding_asyncio(
    *, client: StolonClient, body: CreateOffboardingRequest, x_clover_appenv: Union[Unset, str] = UNSET
) -> ApiMerchantOffboarding | None:
    """Create offboarding

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (CreateOffboardingRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CreateOffboardingRequest
        x_clover_appenv: Union[Unset, str]

    Returns:
        ApiMerchantOffboarding | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="merchant_offboarding.create_offboarding",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMerchantOffboarding]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
