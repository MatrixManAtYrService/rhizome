"""
Proxied wrapper functions for billing-event dev - messaging.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Any, Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.acknowledge_consumer_failure_response_200 import (
    AcknowledgeConsumerFailureResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.acknowledge_consumer_failures_response_200 import (
    AcknowledgeConsumerFailuresResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.acknowledge_producer_failure_response_200 import (
    AcknowledgeProducerFailureResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.acknowledge_producer_failures_response_200 import (
    AcknowledgeProducerFailuresResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_app_rates_params import (
    ApiAppRatesParams,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_consumer_failure import (
    ApiConsumerFailure,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_consumer_failure_history import (
    ApiConsumerFailureHistory,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_event_ignored import (
    ApiEventIgnored,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_message_failure_update_response import (
    ApiMessageFailureUpdateResponse,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_producer_failure import (
    ApiProducerFailure,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.api_producer_failure_history import (
    ApiProducerFailureHistory,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_consumer_failure_by_uuid_response_200 import (
    GetConsumerFailureByUuidResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_consumer_failure_histories_response_200 import (
    GetConsumerFailureHistoriesResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_consumer_failures_response_200 import (
    GetConsumerFailuresResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_producer_failure_by_uuid_response_200 import (
    GetProducerFailureByUuidResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.get_producer_failures_response_200 import (
    GetProducerFailuresResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.mlc_event import MlcEvent
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.produce_app_rates_events_response_200 import (
    ProduceAppRatesEventsResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.retry_consumer_failures_response_200 import (
    RetryConsumerFailuresResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.retry_producer_failure_response_200 import (
    RetryProducerFailureResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.models.update_and_retry_consumer_failure_response_200 import (
    UpdateAndRetryConsumerFailureResponse200,
)
from stolon.openapi_generated.billing_event_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_consumer_source_topics_sync_detailed(
    *, client: StolonClient, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_source_topics",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_source_topics_asyncio_detailed(
    *, client: StolonClient, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_source_topics",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def play_manual_mlc_event_sync_detailed(
    *,
    client: StolonClient,
    body: MlcEvent,
    force: Union[Unset, bool] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Any]:
    """Args:
        force (Union[Unset, bool]):
        x_clover_appenv (Union[Unset, str]):
        body (MlcEvent):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: MlcEvent
        force: Union[Unset, bool]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "force": serialize_argument(force),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.play_manual_mlc_event",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def play_manual_mlc_event_asyncio_detailed(
    *,
    client: StolonClient,
    body: MlcEvent,
    force: Union[Unset, bool] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Any]:
    """Args:
        force (Union[Unset, bool]):
        x_clover_appenv (Union[Unset, str]):
        body (MlcEvent):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: MlcEvent
        force: Union[Unset, bool]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "force": serialize_argument(force),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.play_manual_mlc_event",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def update_and_retry_consumer_failure_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiConsumerFailureHistory
) -> Response[ApiMessageFailureUpdateResponse | UpdateAndRetryConsumerFailureResponse200]:
    """Retry a consumer failure with an edited payload

    Args:
        uuid (str):
        body (ApiConsumerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMessageFailureUpdateResponse, UpdateAndRetryConsumerFailureResponse200]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiConsumerFailureHistory

    Returns:
        Response[ApiMessageFailureUpdateResponse | UpdateAndRetryConsumerFailureResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.update_and_retry_consumer_failure",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiMessageFailureUpdateResponse, UpdateAndRetryConsumerFailureResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def update_and_retry_consumer_failure_sync(
    *, client: StolonClient, uuid: str, body: ApiConsumerFailureHistory
) -> ApiMessageFailureUpdateResponse | UpdateAndRetryConsumerFailureResponse200 | None:
    """Retry a consumer failure with an edited payload

    Args:
        uuid (str):
        body (ApiConsumerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMessageFailureUpdateResponse, UpdateAndRetryConsumerFailureResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiConsumerFailureHistory

    Returns:
        ApiMessageFailureUpdateResponse | UpdateAndRetryConsumerFailureResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.update_and_retry_consumer_failure",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiMessageFailureUpdateResponse, UpdateAndRetryConsumerFailureResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def update_and_retry_consumer_failure_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiConsumerFailureHistory
) -> Response[ApiMessageFailureUpdateResponse | UpdateAndRetryConsumerFailureResponse200]:
    """Retry a consumer failure with an edited payload

    Args:
        uuid (str):
        body (ApiConsumerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMessageFailureUpdateResponse, UpdateAndRetryConsumerFailureResponse200]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiConsumerFailureHistory

    Returns:
        Response[ApiMessageFailureUpdateResponse | UpdateAndRetryConsumerFailureResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.update_and_retry_consumer_failure",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiMessageFailureUpdateResponse, UpdateAndRetryConsumerFailureResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def update_and_retry_consumer_failure_asyncio(
    *, client: StolonClient, uuid: str, body: ApiConsumerFailureHistory
) -> ApiMessageFailureUpdateResponse | UpdateAndRetryConsumerFailureResponse200 | None:
    """Retry a consumer failure with an edited payload

    Args:
        uuid (str):
        body (ApiConsumerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMessageFailureUpdateResponse, UpdateAndRetryConsumerFailureResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiConsumerFailureHistory

    Returns:
        ApiMessageFailureUpdateResponse | UpdateAndRetryConsumerFailureResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.update_and_retry_consumer_failure",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiMessageFailureUpdateResponse, UpdateAndRetryConsumerFailureResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def retry_producer_failure_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiProducerFailureHistory
) -> Response[ApiMessageFailureUpdateResponse | RetryProducerFailureResponse200]:
    """Retry a single producer failure

    Args:
        uuid (str):
        body (ApiProducerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMessageFailureUpdateResponse, RetryProducerFailureResponse200]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiProducerFailureHistory

    Returns:
        Response[ApiMessageFailureUpdateResponse | RetryProducerFailureResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.retry_producer_failure",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiMessageFailureUpdateResponse, RetryProducerFailureResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def retry_producer_failure_sync(
    *, client: StolonClient, uuid: str, body: ApiProducerFailureHistory
) -> ApiMessageFailureUpdateResponse | RetryProducerFailureResponse200 | None:
    """Retry a single producer failure

    Args:
        uuid (str):
        body (ApiProducerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMessageFailureUpdateResponse, RetryProducerFailureResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiProducerFailureHistory

    Returns:
        ApiMessageFailureUpdateResponse | RetryProducerFailureResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.retry_producer_failure",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiMessageFailureUpdateResponse, RetryProducerFailureResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def retry_producer_failure_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiProducerFailureHistory
) -> Response[ApiMessageFailureUpdateResponse | RetryProducerFailureResponse200]:
    """Retry a single producer failure

    Args:
        uuid (str):
        body (ApiProducerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMessageFailureUpdateResponse, RetryProducerFailureResponse200]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiProducerFailureHistory

    Returns:
        Response[ApiMessageFailureUpdateResponse | RetryProducerFailureResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.retry_producer_failure",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiMessageFailureUpdateResponse, RetryProducerFailureResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def retry_producer_failure_asyncio(
    *, client: StolonClient, uuid: str, body: ApiProducerFailureHistory
) -> ApiMessageFailureUpdateResponse | RetryProducerFailureResponse200 | None:
    """Retry a single producer failure

    Args:
        uuid (str):
        body (ApiProducerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMessageFailureUpdateResponse, RetryProducerFailureResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiProducerFailureHistory

    Returns:
        ApiMessageFailureUpdateResponse | RetryProducerFailureResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.retry_producer_failure",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiMessageFailureUpdateResponse, RetryProducerFailureResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_producer_failure_sync_detailed(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> Response[AcknowledgeProducerFailureResponse200 | ApiMessageFailureUpdateResponse]:
    """Acknowledges a producer failure which deletes the failure and moves it to producer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[AcknowledgeProducerFailureResponse200, ApiMessageFailureUpdateResponse]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        Response[AcknowledgeProducerFailureResponse200 | ApiMessageFailureUpdateResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_producer_failure",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[AcknowledgeProducerFailureResponse200, ApiMessageFailureUpdateResponse]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_producer_failure_sync(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> AcknowledgeProducerFailureResponse200 | ApiMessageFailureUpdateResponse | None:
    """Acknowledges a producer failure which deletes the failure and moves it to producer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[AcknowledgeProducerFailureResponse200, ApiMessageFailureUpdateResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        AcknowledgeProducerFailureResponse200 | ApiMessageFailureUpdateResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_producer_failure",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[AcknowledgeProducerFailureResponse200, ApiMessageFailureUpdateResponse]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_producer_failure_asyncio_detailed(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> Response[AcknowledgeProducerFailureResponse200 | ApiMessageFailureUpdateResponse]:
    """Acknowledges a producer failure which deletes the failure and moves it to producer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[AcknowledgeProducerFailureResponse200, ApiMessageFailureUpdateResponse]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        Response[AcknowledgeProducerFailureResponse200 | ApiMessageFailureUpdateResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_producer_failure",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[AcknowledgeProducerFailureResponse200, ApiMessageFailureUpdateResponse]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_producer_failure_asyncio(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> AcknowledgeProducerFailureResponse200 | ApiMessageFailureUpdateResponse | None:
    """Acknowledges a producer failure which deletes the failure and moves it to producer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[AcknowledgeProducerFailureResponse200, ApiMessageFailureUpdateResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        AcknowledgeProducerFailureResponse200 | ApiMessageFailureUpdateResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_producer_failure",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[AcknowledgeProducerFailureResponse200, ApiMessageFailureUpdateResponse]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_event_source_topics_sync_detailed(
    *, client: StolonClient, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_event_source_topics",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_event_source_topics_asyncio_detailed(
    *, client: StolonClient, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_event_source_topics",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failure_sync_detailed(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> Response[AcknowledgeConsumerFailureResponse200 | ApiMessageFailureUpdateResponse]:
    """Acknowledges a consumer failure which deletes the failure and moves it to consumer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[AcknowledgeConsumerFailureResponse200, ApiMessageFailureUpdateResponse]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        Response[AcknowledgeConsumerFailureResponse200 | ApiMessageFailureUpdateResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_consumer_failure",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[AcknowledgeConsumerFailureResponse200, ApiMessageFailureUpdateResponse]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failure_sync(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> AcknowledgeConsumerFailureResponse200 | ApiMessageFailureUpdateResponse | None:
    """Acknowledges a consumer failure which deletes the failure and moves it to consumer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[AcknowledgeConsumerFailureResponse200, ApiMessageFailureUpdateResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        AcknowledgeConsumerFailureResponse200 | ApiMessageFailureUpdateResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_consumer_failure",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[AcknowledgeConsumerFailureResponse200, ApiMessageFailureUpdateResponse]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failure_asyncio_detailed(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> Response[AcknowledgeConsumerFailureResponse200 | ApiMessageFailureUpdateResponse]:
    """Acknowledges a consumer failure which deletes the failure and moves it to consumer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[AcknowledgeConsumerFailureResponse200, ApiMessageFailureUpdateResponse]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        Response[AcknowledgeConsumerFailureResponse200 | ApiMessageFailureUpdateResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_consumer_failure",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[AcknowledgeConsumerFailureResponse200, ApiMessageFailureUpdateResponse]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failure_asyncio(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> AcknowledgeConsumerFailureResponse200 | ApiMessageFailureUpdateResponse | None:
    """Acknowledges a consumer failure which deletes the failure and moves it to consumer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[AcknowledgeConsumerFailureResponse200, ApiMessageFailureUpdateResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        AcknowledgeConsumerFailureResponse200 | ApiMessageFailureUpdateResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_consumer_failure",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[AcknowledgeConsumerFailureResponse200, ApiMessageFailureUpdateResponse]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_ignored_events_sync_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiEventIgnored | list["ApiEventIgnored"]]:
    """Get ignored events

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiEventIgnored, list['ApiEventIgnored']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiEventIgnored | list["ApiEventIgnored"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_ignored_events",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiEventIgnored, list["ApiEventIgnored"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_ignored_events_sync(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiEventIgnored | list["ApiEventIgnored"] | None:
    """Get ignored events

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiEventIgnored, list['ApiEventIgnored']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiEventIgnored | list["ApiEventIgnored"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_ignored_events",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiEventIgnored, list["ApiEventIgnored"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_ignored_events_asyncio_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiEventIgnored | list["ApiEventIgnored"]]:
    """Get ignored events

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiEventIgnored, list['ApiEventIgnored']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiEventIgnored | list["ApiEventIgnored"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_ignored_events",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiEventIgnored, list["ApiEventIgnored"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_ignored_events_asyncio(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiEventIgnored | list["ApiEventIgnored"] | None:
    """Get ignored events

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiEventIgnored, list['ApiEventIgnored']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiEventIgnored | list["ApiEventIgnored"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_ignored_events",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiEventIgnored, list["ApiEventIgnored"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failures_sync_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[GetConsumerFailuresResponse200 | list["ApiConsumerFailure"]]:
    """Get a consumer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[GetConsumerFailuresResponse200, list['ApiConsumerFailure']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetConsumerFailuresResponse200 | list["ApiConsumerFailure"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failures",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[GetConsumerFailuresResponse200, list["ApiConsumerFailure"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failures_sync(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> GetConsumerFailuresResponse200 | list["ApiConsumerFailure"] | None:
    """Get a consumer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[GetConsumerFailuresResponse200, list['ApiConsumerFailure']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetConsumerFailuresResponse200 | list["ApiConsumerFailure"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failures",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[GetConsumerFailuresResponse200, list["ApiConsumerFailure"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failures_asyncio_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[GetConsumerFailuresResponse200 | list["ApiConsumerFailure"]]:
    """Get a consumer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[GetConsumerFailuresResponse200, list['ApiConsumerFailure']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetConsumerFailuresResponse200 | list["ApiConsumerFailure"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failures",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[GetConsumerFailuresResponse200, list["ApiConsumerFailure"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failures_asyncio(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> GetConsumerFailuresResponse200 | list["ApiConsumerFailure"] | None:
    """Get a consumer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[GetConsumerFailuresResponse200, list['ApiConsumerFailure']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetConsumerFailuresResponse200 | list["ApiConsumerFailure"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failures",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[GetConsumerFailuresResponse200, list["ApiConsumerFailure"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failure_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiProducerFailure | GetProducerFailureByUuidResponse200]:
    """Get a messaging producer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiProducerFailure, GetProducerFailureByUuidResponse200]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiProducerFailure | GetProducerFailureByUuidResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failure_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiProducerFailure, GetProducerFailureByUuidResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failure_by_uuid_sync(
    *, client: StolonClient, uuid: str
) -> ApiProducerFailure | GetProducerFailureByUuidResponse200 | None:
    """Get a messaging producer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiProducerFailure, GetProducerFailureByUuidResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiProducerFailure | GetProducerFailureByUuidResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failure_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiProducerFailure, GetProducerFailureByUuidResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failure_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiProducerFailure | GetProducerFailureByUuidResponse200]:
    """Get a messaging producer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiProducerFailure, GetProducerFailureByUuidResponse200]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiProducerFailure | GetProducerFailureByUuidResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failure_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiProducerFailure, GetProducerFailureByUuidResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failure_by_uuid_asyncio(
    *, client: StolonClient, uuid: str
) -> ApiProducerFailure | GetProducerFailureByUuidResponse200 | None:
    """Get a messaging producer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiProducerFailure, GetProducerFailureByUuidResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiProducerFailure | GetProducerFailureByUuidResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failure_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiProducerFailure, GetProducerFailureByUuidResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiConsumerFailure | GetConsumerFailureByUuidResponse200]:
    """Get a messaging consumer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailure, GetConsumerFailureByUuidResponse200]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiConsumerFailure | GetConsumerFailureByUuidResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failure_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiConsumerFailure, GetConsumerFailureByUuidResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_by_uuid_sync(
    *, client: StolonClient, uuid: str
) -> ApiConsumerFailure | GetConsumerFailureByUuidResponse200 | None:
    """Get a messaging consumer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailure, GetConsumerFailureByUuidResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiConsumerFailure | GetConsumerFailureByUuidResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failure_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiConsumerFailure, GetConsumerFailureByUuidResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiConsumerFailure | GetConsumerFailureByUuidResponse200]:
    """Get a messaging consumer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailure, GetConsumerFailureByUuidResponse200]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiConsumerFailure | GetConsumerFailureByUuidResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failure_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiConsumerFailure, GetConsumerFailureByUuidResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_by_uuid_asyncio(
    *, client: StolonClient, uuid: str
) -> ApiConsumerFailure | GetConsumerFailureByUuidResponse200 | None:
    """Get a messaging consumer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailure, GetConsumerFailureByUuidResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiConsumerFailure | GetConsumerFailureByUuidResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failure_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiConsumerFailure, GetConsumerFailureByUuidResponse200]]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failures_sync_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[GetProducerFailuresResponse200 | list["ApiProducerFailure"]]:
    """Get a producer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[GetProducerFailuresResponse200, list['ApiProducerFailure']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetProducerFailuresResponse200 | list["ApiProducerFailure"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failures",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[GetProducerFailuresResponse200, list["ApiProducerFailure"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failures_sync(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> GetProducerFailuresResponse200 | list["ApiProducerFailure"] | None:
    """Get a producer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[GetProducerFailuresResponse200, list['ApiProducerFailure']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetProducerFailuresResponse200 | list["ApiProducerFailure"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failures",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[GetProducerFailuresResponse200, list["ApiProducerFailure"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failures_asyncio_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[GetProducerFailuresResponse200 | list["ApiProducerFailure"]]:
    """Get a producer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[GetProducerFailuresResponse200, list['ApiProducerFailure']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetProducerFailuresResponse200 | list["ApiProducerFailure"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failures",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[GetProducerFailuresResponse200, list["ApiProducerFailure"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failures_asyncio(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> GetProducerFailuresResponse200 | list["ApiProducerFailure"] | None:
    """Get a producer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[GetProducerFailuresResponse200, list['ApiProducerFailure']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetProducerFailuresResponse200 | list["ApiProducerFailure"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failures",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[GetProducerFailuresResponse200, list["ApiProducerFailure"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failure_histories_sync_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiProducerFailureHistory | list["ApiProducerFailureHistory"]]:
    """Get producer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiProducerFailureHistory, list['ApiProducerFailureHistory']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiProducerFailureHistory | list["ApiProducerFailureHistory"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failure_histories",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiProducerFailureHistory, list["ApiProducerFailureHistory"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failure_histories_sync(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiProducerFailureHistory | list["ApiProducerFailureHistory"] | None:
    """Get producer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiProducerFailureHistory, list['ApiProducerFailureHistory']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiProducerFailureHistory | list["ApiProducerFailureHistory"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failure_histories",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiProducerFailureHistory, list["ApiProducerFailureHistory"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failure_histories_asyncio_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiProducerFailureHistory | list["ApiProducerFailureHistory"]]:
    """Get producer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiProducerFailureHistory, list['ApiProducerFailureHistory']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiProducerFailureHistory | list["ApiProducerFailureHistory"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failure_histories",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiProducerFailureHistory, list["ApiProducerFailureHistory"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_producer_failure_histories_asyncio(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiProducerFailureHistory | list["ApiProducerFailureHistory"] | None:
    """Get producer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiProducerFailureHistory, list['ApiProducerFailureHistory']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiProducerFailureHistory | list["ApiProducerFailureHistory"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_producer_failure_histories",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiProducerFailureHistory, list["ApiProducerFailureHistory"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def produce_app_rates_events_sync_detailed(
    *, client: StolonClient, body: ApiAppRatesParams, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[ProduceAppRatesEventsResponse200]:
    """Produces app rates billing events for developer uuids and/or app uuids in the body.  These app rates
    events are used to configure bookkeeper for app billing.

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiAppRatesParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ProduceAppRatesEventsResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAppRatesParams
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ProduceAppRatesEventsResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.produce_app_rates_events",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ProduceAppRatesEventsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def produce_app_rates_events_sync(
    *, client: StolonClient, body: ApiAppRatesParams, x_clover_appenv: Union[Unset, str] = UNSET
) -> ProduceAppRatesEventsResponse200 | None:
    """Produces app rates billing events for developer uuids and/or app uuids in the body.  These app rates
    events are used to configure bookkeeper for app billing.

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiAppRatesParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ProduceAppRatesEventsResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAppRatesParams
        x_clover_appenv: Union[Unset, str]

    Returns:
        ProduceAppRatesEventsResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.produce_app_rates_events",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ProduceAppRatesEventsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def produce_app_rates_events_asyncio_detailed(
    *, client: StolonClient, body: ApiAppRatesParams, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[ProduceAppRatesEventsResponse200]:
    """Produces app rates billing events for developer uuids and/or app uuids in the body.  These app rates
    events are used to configure bookkeeper for app billing.

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiAppRatesParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ProduceAppRatesEventsResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAppRatesParams
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[ProduceAppRatesEventsResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.produce_app_rates_events",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ProduceAppRatesEventsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def produce_app_rates_events_asyncio(
    *, client: StolonClient, body: ApiAppRatesParams, x_clover_appenv: Union[Unset, str] = UNSET
) -> ProduceAppRatesEventsResponse200 | None:
    """Produces app rates billing events for developer uuids and/or app uuids in the body.  These app rates
    events are used to configure bookkeeper for app billing.

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (ApiAppRatesParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ProduceAppRatesEventsResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAppRatesParams
        x_clover_appenv: Union[Unset, str]

    Returns:
        ProduceAppRatesEventsResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.produce_app_rates_events",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ProduceAppRatesEventsResponse200]",
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failures_sync_detailed(
    *, client: StolonClient, body: list[str]
) -> Response[RetryConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]:
    """Retry consumer failures

    Args:
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[RetryConsumerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]

    Returns:
        Response[RetryConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.retry_consumer_failures",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[RetryConsumerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failures_sync(
    *, client: StolonClient, body: list[str]
) -> RetryConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None:
    """Retry consumer failures

    Args:
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[RetryConsumerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]

    Returns:
        RetryConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.retry_consumer_failures",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[RetryConsumerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failures_asyncio_detailed(
    *, client: StolonClient, body: list[str]
) -> Response[RetryConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]:
    """Retry consumer failures

    Args:
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[RetryConsumerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]

    Returns:
        Response[RetryConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.retry_consumer_failures",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[RetryConsumerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failures_asyncio(
    *, client: StolonClient, body: list[str]
) -> RetryConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None:
    """Retry consumer failures

    Args:
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[RetryConsumerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]

    Returns:
        RetryConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.retry_consumer_failures",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[RetryConsumerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_producer_failures_sync_detailed(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> Response[AcknowledgeProducerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]:
    """Acknowledges producer failures which deletes the failures and moves them to Producer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[AcknowledgeProducerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        Response[AcknowledgeProducerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_producer_failures",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[AcknowledgeProducerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_producer_failures_sync(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> AcknowledgeProducerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None:
    """Acknowledges producer failures which deletes the failures and moves them to Producer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[AcknowledgeProducerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        AcknowledgeProducerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_producer_failures",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[AcknowledgeProducerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_producer_failures_asyncio_detailed(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> Response[AcknowledgeProducerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]:
    """Acknowledges producer failures which deletes the failures and moves them to Producer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[AcknowledgeProducerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        Response[AcknowledgeProducerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_producer_failures",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[AcknowledgeProducerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_producer_failures_asyncio(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> AcknowledgeProducerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None:
    """Acknowledges producer failures which deletes the failures and moves them to Producer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[AcknowledgeProducerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        AcknowledgeProducerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_producer_failures",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[AcknowledgeProducerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_histories_sync_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[GetConsumerFailureHistoriesResponse200 | list["ApiConsumerFailureHistory"]]:
    """Get consumer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[GetConsumerFailureHistoriesResponse200, list['ApiConsumerFailureHistory']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetConsumerFailureHistoriesResponse200 | list["ApiConsumerFailureHistory"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failure_histories",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[GetConsumerFailureHistoriesResponse200, list["ApiConsumerFailureHistory"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_histories_sync(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> GetConsumerFailureHistoriesResponse200 | list["ApiConsumerFailureHistory"] | None:
    """Get consumer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[GetConsumerFailureHistoriesResponse200, list['ApiConsumerFailureHistory']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetConsumerFailureHistoriesResponse200 | list["ApiConsumerFailureHistory"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failure_histories",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[GetConsumerFailureHistoriesResponse200, list["ApiConsumerFailureHistory"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_histories_asyncio_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[GetConsumerFailureHistoriesResponse200 | list["ApiConsumerFailureHistory"]]:
    """Get consumer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[GetConsumerFailureHistoriesResponse200, list['ApiConsumerFailureHistory']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[GetConsumerFailureHistoriesResponse200 | list["ApiConsumerFailureHistory"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failure_histories",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[GetConsumerFailureHistoriesResponse200, list["ApiConsumerFailureHistory"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_histories_asyncio(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> GetConsumerFailureHistoriesResponse200 | list["ApiConsumerFailureHistory"] | None:
    """Get consumer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[GetConsumerFailureHistoriesResponse200, list['ApiConsumerFailureHistory']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        GetConsumerFailureHistoriesResponse200 | list["ApiConsumerFailureHistory"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.get_consumer_failure_histories",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[GetConsumerFailureHistoriesResponse200, list["ApiConsumerFailureHistory"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failures_sync_detailed(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> Response[AcknowledgeConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]:
    """Acknowledges consumer failures which deletes the failures and moves them to consumer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[AcknowledgeConsumerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        Response[AcknowledgeConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_consumer_failures",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[AcknowledgeConsumerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failures_sync(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> AcknowledgeConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None:
    """Acknowledges consumer failures which deletes the failures and moves them to consumer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[AcknowledgeConsumerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        AcknowledgeConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_consumer_failures",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[AcknowledgeConsumerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failures_asyncio_detailed(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> Response[AcknowledgeConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]:
    """Acknowledges consumer failures which deletes the failures and moves them to consumer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[AcknowledgeConsumerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        Response[AcknowledgeConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_consumer_failures",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[AcknowledgeConsumerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failures_asyncio(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> AcknowledgeConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None:
    """Acknowledges consumer failures which deletes the failures and moves them to consumer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[AcknowledgeConsumerFailuresResponse200, list['ApiMessageFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        AcknowledgeConsumerFailuresResponse200 | list["ApiMessageFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_EVENT_DEV,
        function_path="messaging.acknowledge_consumer_failures",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[AcknowledgeConsumerFailuresResponse200, list["ApiMessageFailureUpdateResponse"]]]',
        "billing_event_dev",
    )

    return result  # type: ignore[return-value]
