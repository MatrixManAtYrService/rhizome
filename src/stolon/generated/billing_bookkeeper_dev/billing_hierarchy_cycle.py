"""
Proxied wrapper functions for billing-bookkeeper dev - billing_hierarchy_cycle.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_billing_hierarchy_cycle import (
    ApiBillingHierarchyCycle,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def create_billing_hierarchy_cycle_sync_detailed(
    *, client: StolonClient, body: ApiBillingHierarchyCycle
) -> Response[ResponseError]:
    """Create billing hierarchy cycle entry

    Args:
        body (ApiBillingHierarchyCycle):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBillingHierarchyCycle

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.create_billing_hierarchy_cycle",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_billing_hierarchy_cycle_sync(
    *, client: StolonClient, body: ApiBillingHierarchyCycle
) -> ResponseError | None:
    """Create billing hierarchy cycle entry

    Args:
        body (ApiBillingHierarchyCycle):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBillingHierarchyCycle

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.create_billing_hierarchy_cycle",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_billing_hierarchy_cycle_asyncio_detailed(
    *, client: StolonClient, body: ApiBillingHierarchyCycle
) -> Response[ResponseError]:
    """Create billing hierarchy cycle entry

    Args:
        body (ApiBillingHierarchyCycle):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBillingHierarchyCycle

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.create_billing_hierarchy_cycle",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_billing_hierarchy_cycle_asyncio(
    *, client: StolonClient, body: ApiBillingHierarchyCycle
) -> ResponseError | None:
    """Create billing hierarchy cycle entry

    Args:
        body (ApiBillingHierarchyCycle):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBillingHierarchyCycle

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.create_billing_hierarchy_cycle",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_merchant_cycle_entries_for_processing_group_sync_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Populate merchant billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_merchant_cycle_entries_for_processing_group",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_merchant_cycle_entries_for_processing_group_sync(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Populate merchant billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_merchant_cycle_entries_for_processing_group",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_merchant_cycle_entries_for_processing_group_asyncio_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Populate merchant billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_merchant_cycle_entries_for_processing_group",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_merchant_cycle_entries_for_processing_group_asyncio(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Populate merchant billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_merchant_cycle_entries_for_processing_group",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date_sync_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get billing hierarchy cycle entries for merchants by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date_sync(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get billing hierarchy cycle entries for merchants by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get billing hierarchy cycle entries for merchants by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get billing hierarchy cycle entries for merchants by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date_sync_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get billing hierarchy cycle entries for resellers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date_sync(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get billing hierarchy cycle entries for resellers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get billing hierarchy cycle entries for resellers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get billing hierarchy cycle entries for resellers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def purge_cycle_entries_by_processing_group_and_hierarchy_type_sync_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    hierarchy_type: str,
    date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
) -> Response[int]:
    """Purge billing hierarchy cycle entries for the processing group and hierarchy type where the cycle
    date is before the specified date

    Args:
        processing_group_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        page_size (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        hierarchy_type: str
        date: datetime.date
        page_size: Union[Unset, int]

    Returns:
        Response[int]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.purge_cycle_entries_by_processing_group_and_hierarchy_type",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def purge_cycle_entries_by_processing_group_and_hierarchy_type_sync(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    hierarchy_type: str,
    date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
) -> int | None:
    """Purge billing hierarchy cycle entries for the processing group and hierarchy type where the cycle
    date is before the specified date

    Args:
        processing_group_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        page_size (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        hierarchy_type: str
        date: datetime.date
        page_size: Union[Unset, int]

    Returns:
        int | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.purge_cycle_entries_by_processing_group_and_hierarchy_type",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def purge_cycle_entries_by_processing_group_and_hierarchy_type_asyncio_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    hierarchy_type: str,
    date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
) -> Response[int]:
    """Purge billing hierarchy cycle entries for the processing group and hierarchy type where the cycle
    date is before the specified date

    Args:
        processing_group_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        page_size (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        hierarchy_type: str
        date: datetime.date
        page_size: Union[Unset, int]

    Returns:
        Response[int]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.purge_cycle_entries_by_processing_group_and_hierarchy_type",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def purge_cycle_entries_by_processing_group_and_hierarchy_type_asyncio(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    hierarchy_type: str,
    date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
) -> int | None:
    """Purge billing hierarchy cycle entries for the processing group and hierarchy type where the cycle
    date is before the specified date

    Args:
        processing_group_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        page_size (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        hierarchy_type: str
        date: datetime.date
        page_size: Union[Unset, int]

    Returns:
        int | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.purge_cycle_entries_by_processing_group_and_hierarchy_type",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    cycle_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get billing hierarchy cycle entries by merchant, reseller, or developer billing entity UUID and/or
    cycle date

    Args:
        billing_entity_uuid (Union[Unset, str]):
        cycle_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        cycle_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    cycle_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get billing hierarchy cycle entries by merchant, reseller, or developer billing entity UUID and/or
    cycle date

    Args:
        billing_entity_uuid (Union[Unset, str]):
        cycle_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        cycle_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    cycle_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get billing hierarchy cycle entries by merchant, reseller, or developer billing entity UUID and/or
    cycle date

    Args:
        billing_entity_uuid (Union[Unset, str]):
        cycle_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        cycle_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    cycle_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get billing hierarchy cycle entries by merchant, reseller, or developer billing entity UUID and/or
    cycle date

    Args:
        billing_entity_uuid (Union[Unset, str]):
        cycle_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        cycle_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_hierarchy_cycle_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiBillingHierarchyCycle | ResponseError]:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiBillingHierarchyCycle, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_billing_hierarchy_cycle_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiBillingHierarchyCycle, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_hierarchy_cycle_by_uuid_sync(
    *, client: StolonClient, uuid: str
) -> ApiBillingHierarchyCycle | ResponseError | None:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiBillingHierarchyCycle, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiBillingHierarchyCycle | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_billing_hierarchy_cycle_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiBillingHierarchyCycle, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_hierarchy_cycle_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiBillingHierarchyCycle | ResponseError]:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiBillingHierarchyCycle, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_billing_hierarchy_cycle_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiBillingHierarchyCycle, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_hierarchy_cycle_by_uuid_asyncio(
    *, client: StolonClient, uuid: str
) -> ApiBillingHierarchyCycle | ResponseError | None:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiBillingHierarchyCycle, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiBillingHierarchyCycle | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_billing_hierarchy_cycle_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiBillingHierarchyCycle, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date_sync_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get billing hierarchy cycle entries for developers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date_sync(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get billing hierarchy cycle entries for developers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get billing hierarchy cycle entries for developers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    cycle_date: datetime.date,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get billing hierarchy cycle entries for developers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        cycle_date: datetime.date
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "cycle_date": serialize_argument(cycle_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_reseller_cycle_entries_for_processing_group_sync_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Populate reseller billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_reseller_cycle_entries_for_processing_group",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_reseller_cycle_entries_for_processing_group_sync(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Populate reseller billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_reseller_cycle_entries_for_processing_group",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_reseller_cycle_entries_for_processing_group_asyncio_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Populate reseller billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_reseller_cycle_entries_for_processing_group",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_reseller_cycle_entries_for_processing_group_asyncio(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Populate reseller billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_reseller_cycle_entries_for_processing_group",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_developer_cycle_entries_for_processing_group_sync_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Populate developer billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_developer_cycle_entries_for_processing_group",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_developer_cycle_entries_for_processing_group_sync(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Populate developer billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_developer_cycle_entries_for_processing_group",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_developer_cycle_entries_for_processing_group_asyncio_detailed(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Populate developer billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_developer_cycle_entries_for_processing_group",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def populate_developer_cycle_entries_for_processing_group_asyncio(
    *,
    client: StolonClient,
    processing_group_uuid: str,
    chunk_size: Union[Unset, int] = UNSET,
    chunk_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Populate developer billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                processing_group_uuid: str
        chunk_size: Union[Unset, int]
        chunk_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "processing_group_uuid": serialize_argument(processing_group_uuid),
        "chunk_size": serialize_argument(chunk_size),
        "chunk_number": serialize_argument(chunk_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_hierarchy_cycle.populate_developer_cycle_entries_for_processing_group",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
