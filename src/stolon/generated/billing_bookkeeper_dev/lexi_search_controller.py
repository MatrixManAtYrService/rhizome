"""
Proxied wrapper functions for billing-bookkeeper dev - lexi_search_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.all_rules import AllRules
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.get_word_by_regex_response_200 import (
    GetWordByRegexResponse200,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_word_by_regex_sync_detailed(
    *,
    client: StolonClient,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    lexicon: str,
    regex: str,
) -> Response[GetWordByRegexResponse200]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        lexicon (str):
        regex (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetWordByRegexResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        lexicon: str
        regex: str

    Returns:
        Response[GetWordByRegexResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "lexicon": serialize_argument(lexicon),
        "regex": serialize_argument(regex),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_word_by_regex",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetWordByRegexResponse200]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_word_by_regex_sync(
    *,
    client: StolonClient,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    lexicon: str,
    regex: str,
) -> GetWordByRegexResponse200 | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        lexicon (str):
        regex (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetWordByRegexResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        lexicon: str
        regex: str

    Returns:
        GetWordByRegexResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "lexicon": serialize_argument(lexicon),
        "regex": serialize_argument(regex),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_word_by_regex",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetWordByRegexResponse200]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_word_by_regex_asyncio_detailed(
    *,
    client: StolonClient,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    lexicon: str,
    regex: str,
) -> Response[GetWordByRegexResponse200]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        lexicon (str):
        regex (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetWordByRegexResponse200]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        lexicon: str
        regex: str

    Returns:
        Response[GetWordByRegexResponse200]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "lexicon": serialize_argument(lexicon),
        "regex": serialize_argument(regex),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_word_by_regex",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[GetWordByRegexResponse200]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_word_by_regex_asyncio(
    *,
    client: StolonClient,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    lexicon: str,
    regex: str,
) -> GetWordByRegexResponse200 | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        lexicon (str):
        regex (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetWordByRegexResponse200

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        lexicon: str
        regex: str

    Returns:
        GetWordByRegexResponse200 | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "lexicon": serialize_argument(lexicon),
        "regex": serialize_argument(regex),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_word_by_regex",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[GetWordByRegexResponse200]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_word_attributes_sync_detailed(*, client: StolonClient, lexicon: str, word: str) -> Response[list[str]]:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list[str]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        word: str

    Returns:
        Response[list[str]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_word_attributes",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[list[str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_word_attributes_sync(*, client: StolonClient, lexicon: str, word: str) -> list[str] | None:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        word: str

    Returns:
        list[str] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_word_attributes",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[list[str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_word_attributes_asyncio_detailed(*, client: StolonClient, lexicon: str, word: str) -> Response[list[str]]:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list[str]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        word: str

    Returns:
        Response[list[str]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_word_attributes",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[list[str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_word_attributes_asyncio(*, client: StolonClient, lexicon: str, word: str) -> list[str] | None:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        word: str

    Returns:
        list[str] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_word_attributes",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[list[str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_rules_for_word_sync_detailed(*, client: StolonClient, lexicon: str, word: str) -> Response[AllRules]:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[AllRules]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        word: str

    Returns:
        Response[AllRules]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_rules_for_word",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[AllRules]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_rules_for_word_sync(*, client: StolonClient, lexicon: str, word: str) -> AllRules | None:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        AllRules

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        word: str

    Returns:
        AllRules | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_rules_for_word",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[AllRules]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_rules_for_word_asyncio_detailed(*, client: StolonClient, lexicon: str, word: str) -> Response[AllRules]:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[AllRules]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        word: str

    Returns:
        Response[AllRules]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_rules_for_word",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[AllRules]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_rules_for_word_asyncio(*, client: StolonClient, lexicon: str, word: str) -> AllRules | None:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        AllRules

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        word: str

    Returns:
        AllRules | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_rules_for_word",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[AllRules]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_lexicons_for_word_sync_detailed(*, client: StolonClient, word: str) -> Response[list[str]]:
    """Args:
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list[str]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                word: str

    Returns:
        Response[list[str]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_lexicons_for_word",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[list[str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_lexicons_for_word_sync(*, client: StolonClient, word: str) -> list[str] | None:
    """Args:
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                word: str

    Returns:
        list[str] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_lexicons_for_word",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[list[str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_lexicons_for_word_asyncio_detailed(*, client: StolonClient, word: str) -> Response[list[str]]:
    """Args:
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list[str]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                word: str

    Returns:
        Response[list[str]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_lexicons_for_word",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[list[str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_lexicons_for_word_asyncio(*, client: StolonClient, word: str) -> list[str] | None:
    """Args:
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                word: str

    Returns:
        list[str] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"word": serialize_argument(word)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_search_controller.get_lexicons_for_word",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[list[str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
