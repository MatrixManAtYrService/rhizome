"""
Proxied wrapper functions for billing-bookkeeper dev - lexi_search_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_search_controller import get_lexicons_for_word
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_search_controller import get_rules_for_word
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_search_controller import get_word_attributes
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_search_controller import get_word_by_regex
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.all_rules import AllRules
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.get_word_by_regex_response_200 import GetWordByRegexResponse200
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import json


def get_word_by_regex_sync_detailed(
    *,
    client: StolonClient,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    lexicon: str,
    regex: str
) -> Response[GetWordByRegexResponse200]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        lexicon (str):
        regex (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetWordByRegexResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        lexicon: str
        regex: str

    Returns:
        Response[GetWordByRegexResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_word_by_regex._get_kwargs(page_size=page_size, page_number=page_number, lexicon=lexicon, regex=regex)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetWordByRegexResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetWordByRegexResponse200:
        parsed = GetWordByRegexResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_word_by_regex_sync(
    *,
    client: StolonClient,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    lexicon: str,
    regex: str
) -> GetWordByRegexResponse200 | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        lexicon (str):
        regex (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetWordByRegexResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        lexicon: str
        regex: str

    Returns:
        GetWordByRegexResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_word_by_regex._get_kwargs(page_size=page_size, page_number=page_number, lexicon=lexicon, regex=regex)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetWordByRegexResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_word_by_regex_asyncio_detailed(
    *,
    client: StolonClient,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    lexicon: str,
    regex: str
) -> Response[GetWordByRegexResponse200]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        lexicon (str):
        regex (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[GetWordByRegexResponse200]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        lexicon: str
        regex: str

    Returns:
        Response[GetWordByRegexResponse200]
    """

    # Extract request parameters from generated function
    kwargs = get_word_by_regex._get_kwargs(page_size=page_size, page_number=page_number, lexicon=lexicon, regex=regex)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: GetWordByRegexResponse200 | None
    if body_json and proxy_response.status_code == 200 and GetWordByRegexResponse200:
        parsed = GetWordByRegexResponse200.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_word_by_regex_asyncio(
    *,
    client: StolonClient,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    lexicon: str,
    regex: str
) -> GetWordByRegexResponse200 | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        lexicon (str):
        regex (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        GetWordByRegexResponse200

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        lexicon: str
        regex: str

    Returns:
        GetWordByRegexResponse200 | None
    """

    # Extract request parameters from generated function
    kwargs = get_word_by_regex._get_kwargs(page_size=page_size, page_number=page_number, lexicon=lexicon, regex=regex)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return GetWordByRegexResponse200.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_word_attributes_sync_detailed(
    *,
    client: StolonClient,
    lexicon: str,
    word: str
) -> Response[list[str]]:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list[str]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        word: str

    Returns:
        Response[list[str]]
    """

    # Extract request parameters from generated function
    kwargs = get_word_attributes._get_kwargs(lexicon=lexicon, word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_word_attributes_sync(
    *,
    client: StolonClient,
    lexicon: str,
    word: str
) -> list[str] | None:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list[str]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        word: str

    Returns:
        list[str] | None
    """

    # Extract request parameters from generated function
    kwargs = get_word_attributes._get_kwargs(lexicon=lexicon, word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_word_attributes_asyncio_detailed(
    *,
    client: StolonClient,
    lexicon: str,
    word: str
) -> Response[list[str]]:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list[str]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        word: str

    Returns:
        Response[list[str]]
    """

    # Extract request parameters from generated function
    kwargs = get_word_attributes._get_kwargs(lexicon=lexicon, word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_word_attributes_asyncio(
    *,
    client: StolonClient,
    lexicon: str,
    word: str
) -> list[str] | None:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list[str]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        word: str

    Returns:
        list[str] | None
    """

    # Extract request parameters from generated function
    kwargs = get_word_attributes._get_kwargs(lexicon=lexicon, word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_rules_for_word_sync_detailed(
    *,
    client: StolonClient,
    lexicon: str,
    word: str
) -> Response[AllRules]:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[AllRules]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        word: str

    Returns:
        Response[AllRules]
    """

    # Extract request parameters from generated function
    kwargs = get_rules_for_word._get_kwargs(lexicon=lexicon, word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: AllRules | None
    if body_json and proxy_response.status_code == 200 and AllRules:
        parsed = AllRules.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_rules_for_word_sync(
    *,
    client: StolonClient,
    lexicon: str,
    word: str
) -> AllRules | None:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        AllRules

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        word: str

    Returns:
        AllRules | None
    """

    # Extract request parameters from generated function
    kwargs = get_rules_for_word._get_kwargs(lexicon=lexicon, word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return AllRules.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_rules_for_word_asyncio_detailed(
    *,
    client: StolonClient,
    lexicon: str,
    word: str
) -> Response[AllRules]:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[AllRules]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        word: str

    Returns:
        Response[AllRules]
    """

    # Extract request parameters from generated function
    kwargs = get_rules_for_word._get_kwargs(lexicon=lexicon, word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: AllRules | None
    if body_json and proxy_response.status_code == 200 and AllRules:
        parsed = AllRules.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_rules_for_word_asyncio(
    *,
    client: StolonClient,
    lexicon: str,
    word: str
) -> AllRules | None:
    """Args:
        lexicon (str):
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        AllRules

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        word: str

    Returns:
        AllRules | None
    """

    # Extract request parameters from generated function
    kwargs = get_rules_for_word._get_kwargs(lexicon=lexicon, word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return AllRules.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_lexicons_for_word_sync_detailed(
    *,
    client: StolonClient,
    word: str
) -> Response[list[str]]:
    """Args:
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list[str]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                word: str

    Returns:
        Response[list[str]]
    """

    # Extract request parameters from generated function
    kwargs = get_lexicons_for_word._get_kwargs(word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_lexicons_for_word_sync(
    *,
    client: StolonClient,
    word: str
) -> list[str] | None:
    """Args:
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list[str]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                word: str

    Returns:
        list[str] | None
    """

    # Extract request parameters from generated function
    kwargs = get_lexicons_for_word._get_kwargs(word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_lexicons_for_word_asyncio_detailed(
    *,
    client: StolonClient,
    word: str
) -> Response[list[str]]:
    """Args:
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list[str]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                word: str

    Returns:
        Response[list[str]]
    """

    # Extract request parameters from generated function
    kwargs = get_lexicons_for_word._get_kwargs(word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_lexicons_for_word_asyncio(
    *,
    client: StolonClient,
    word: str
) -> list[str] | None:
    """Args:
        word (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list[str]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                word: str

    Returns:
        list[str] | None
    """

    # Extract request parameters from generated function
    kwargs = get_lexicons_for_word._get_kwargs(word=word)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None

