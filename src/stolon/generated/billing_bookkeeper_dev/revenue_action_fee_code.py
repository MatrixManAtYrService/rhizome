"""
Proxied wrapper functions for billing-bookkeeper dev - revenue_action_fee_code.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_revenue_action_fee_code import (
    ApiRevenueActionFeeCode,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def update_revenue_action_fee_code_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiRevenueActionFeeCode
) -> Response[ApiRevenueActionFeeCode]:
    """Update revenue-action-to-fee-code mapping

    Args:
        uuid (str):
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiRevenueActionFeeCode

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.update_revenue_action_fee_code",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_revenue_action_fee_code_sync(
    *, client: StolonClient, uuid: str, body: ApiRevenueActionFeeCode
) -> ApiRevenueActionFeeCode | None:
    """Update revenue-action-to-fee-code mapping

    Args:
        uuid (str):
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiRevenueActionFeeCode

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.update_revenue_action_fee_code",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_revenue_action_fee_code_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiRevenueActionFeeCode
) -> Response[ApiRevenueActionFeeCode]:
    """Update revenue-action-to-fee-code mapping

    Args:
        uuid (str):
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiRevenueActionFeeCode

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.update_revenue_action_fee_code",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_revenue_action_fee_code_asyncio(
    *, client: StolonClient, uuid: str, body: ApiRevenueActionFeeCode
) -> ApiRevenueActionFeeCode | None:
    """Update revenue-action-to-fee-code mapping

    Args:
        uuid (str):
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiRevenueActionFeeCode

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.update_revenue_action_fee_code",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_revenue_action_fee_code_sync_detailed(
    *, client: StolonClient, body: ApiRevenueActionFeeCode
) -> Response[ApiRevenueActionFeeCode]:
    """Create revenue-action-to-fee-code mapping

    Args:
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiRevenueActionFeeCode

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.create_revenue_action_fee_code",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_revenue_action_fee_code_sync(
    *, client: StolonClient, body: ApiRevenueActionFeeCode
) -> ApiRevenueActionFeeCode | None:
    """Create revenue-action-to-fee-code mapping

    Args:
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiRevenueActionFeeCode

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.create_revenue_action_fee_code",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_revenue_action_fee_code_asyncio_detailed(
    *, client: StolonClient, body: ApiRevenueActionFeeCode
) -> Response[ApiRevenueActionFeeCode]:
    """Create revenue-action-to-fee-code mapping

    Args:
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiRevenueActionFeeCode

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.create_revenue_action_fee_code",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_revenue_action_fee_code_asyncio(
    *, client: StolonClient, body: ApiRevenueActionFeeCode
) -> ApiRevenueActionFeeCode | None:
    """Create revenue-action-to-fee-code mapping

    Args:
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiRevenueActionFeeCode

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.create_revenue_action_fee_code",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_revenue_action_fee_code_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiRevenueActionFeeCode]:
    """Get revenue-action-to-fee-code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.get_revenue_action_fee_code_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_revenue_action_fee_code_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiRevenueActionFeeCode | None:
    """Get revenue-action-to-fee-code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.get_revenue_action_fee_code_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_revenue_action_fee_code_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiRevenueActionFeeCode]:
    """Get revenue-action-to-fee-code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.get_revenue_action_fee_code_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_revenue_action_fee_code_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiRevenueActionFeeCode | None:
    """Get revenue-action-to-fee-code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.get_revenue_action_fee_code_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_revenue_action_fee_codes_sync_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    revenue_action_type: Union[Unset, str] = UNSET,
    fee_category_group: Union[Unset, str] = UNSET,
    revenue_group: Union[Unset, str] = UNSET,
    revenue_share_group: Union[Unset, str] = UNSET,
    developer_uuid: Union[Unset, str] = UNSET,
    developer_app_uuid: Union[Unset, str] = UNSET,
    app_subscription_uuid: Union[Unset, str] = UNSET,
    app_metered_uuid: Union[Unset, str] = UNSET,
    plan_uuid: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiRevenueActionFeeCode]:
    """Get revenue-action-to-fee-code mappings

    Args:
        date (datetime.date):
        revenue_action_type (Union[Unset, str]):
        fee_category_group (Union[Unset, str]):
        revenue_group (Union[Unset, str]):
        revenue_share_group (Union[Unset, str]):
        developer_uuid (Union[Unset, str]):
        developer_app_uuid (Union[Unset, str]):
        app_subscription_uuid (Union[Unset, str]):
        app_metered_uuid (Union[Unset, str]):
        plan_uuid (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        revenue_action_type: Union[Unset, str]
        fee_category_group: Union[Unset, str]
        revenue_group: Union[Unset, str]
        revenue_share_group: Union[Unset, str]
        developer_uuid: Union[Unset, str]
        developer_app_uuid: Union[Unset, str]
        app_subscription_uuid: Union[Unset, str]
        app_metered_uuid: Union[Unset, str]
        plan_uuid: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "revenue_action_type": serialize_argument(revenue_action_type),
        "fee_category_group": serialize_argument(fee_category_group),
        "revenue_group": serialize_argument(revenue_group),
        "revenue_share_group": serialize_argument(revenue_share_group),
        "developer_uuid": serialize_argument(developer_uuid),
        "developer_app_uuid": serialize_argument(developer_app_uuid),
        "app_subscription_uuid": serialize_argument(app_subscription_uuid),
        "app_metered_uuid": serialize_argument(app_metered_uuid),
        "plan_uuid": serialize_argument(plan_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.get_revenue_action_fee_codes",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_revenue_action_fee_codes_sync(
    *,
    client: StolonClient,
    date: datetime.date,
    revenue_action_type: Union[Unset, str] = UNSET,
    fee_category_group: Union[Unset, str] = UNSET,
    revenue_group: Union[Unset, str] = UNSET,
    revenue_share_group: Union[Unset, str] = UNSET,
    developer_uuid: Union[Unset, str] = UNSET,
    developer_app_uuid: Union[Unset, str] = UNSET,
    app_subscription_uuid: Union[Unset, str] = UNSET,
    app_metered_uuid: Union[Unset, str] = UNSET,
    plan_uuid: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiRevenueActionFeeCode | None:
    """Get revenue-action-to-fee-code mappings

    Args:
        date (datetime.date):
        revenue_action_type (Union[Unset, str]):
        fee_category_group (Union[Unset, str]):
        revenue_group (Union[Unset, str]):
        revenue_share_group (Union[Unset, str]):
        developer_uuid (Union[Unset, str]):
        developer_app_uuid (Union[Unset, str]):
        app_subscription_uuid (Union[Unset, str]):
        app_metered_uuid (Union[Unset, str]):
        plan_uuid (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        revenue_action_type: Union[Unset, str]
        fee_category_group: Union[Unset, str]
        revenue_group: Union[Unset, str]
        revenue_share_group: Union[Unset, str]
        developer_uuid: Union[Unset, str]
        developer_app_uuid: Union[Unset, str]
        app_subscription_uuid: Union[Unset, str]
        app_metered_uuid: Union[Unset, str]
        plan_uuid: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "revenue_action_type": serialize_argument(revenue_action_type),
        "fee_category_group": serialize_argument(fee_category_group),
        "revenue_group": serialize_argument(revenue_group),
        "revenue_share_group": serialize_argument(revenue_share_group),
        "developer_uuid": serialize_argument(developer_uuid),
        "developer_app_uuid": serialize_argument(developer_app_uuid),
        "app_subscription_uuid": serialize_argument(app_subscription_uuid),
        "app_metered_uuid": serialize_argument(app_metered_uuid),
        "plan_uuid": serialize_argument(plan_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.get_revenue_action_fee_codes",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_revenue_action_fee_codes_asyncio_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    revenue_action_type: Union[Unset, str] = UNSET,
    fee_category_group: Union[Unset, str] = UNSET,
    revenue_group: Union[Unset, str] = UNSET,
    revenue_share_group: Union[Unset, str] = UNSET,
    developer_uuid: Union[Unset, str] = UNSET,
    developer_app_uuid: Union[Unset, str] = UNSET,
    app_subscription_uuid: Union[Unset, str] = UNSET,
    app_metered_uuid: Union[Unset, str] = UNSET,
    plan_uuid: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiRevenueActionFeeCode]:
    """Get revenue-action-to-fee-code mappings

    Args:
        date (datetime.date):
        revenue_action_type (Union[Unset, str]):
        fee_category_group (Union[Unset, str]):
        revenue_group (Union[Unset, str]):
        revenue_share_group (Union[Unset, str]):
        developer_uuid (Union[Unset, str]):
        developer_app_uuid (Union[Unset, str]):
        app_subscription_uuid (Union[Unset, str]):
        app_metered_uuid (Union[Unset, str]):
        plan_uuid (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        revenue_action_type: Union[Unset, str]
        fee_category_group: Union[Unset, str]
        revenue_group: Union[Unset, str]
        revenue_share_group: Union[Unset, str]
        developer_uuid: Union[Unset, str]
        developer_app_uuid: Union[Unset, str]
        app_subscription_uuid: Union[Unset, str]
        app_metered_uuid: Union[Unset, str]
        plan_uuid: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "revenue_action_type": serialize_argument(revenue_action_type),
        "fee_category_group": serialize_argument(fee_category_group),
        "revenue_group": serialize_argument(revenue_group),
        "revenue_share_group": serialize_argument(revenue_share_group),
        "developer_uuid": serialize_argument(developer_uuid),
        "developer_app_uuid": serialize_argument(developer_app_uuid),
        "app_subscription_uuid": serialize_argument(app_subscription_uuid),
        "app_metered_uuid": serialize_argument(app_metered_uuid),
        "plan_uuid": serialize_argument(plan_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.get_revenue_action_fee_codes",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_revenue_action_fee_codes_asyncio(
    *,
    client: StolonClient,
    date: datetime.date,
    revenue_action_type: Union[Unset, str] = UNSET,
    fee_category_group: Union[Unset, str] = UNSET,
    revenue_group: Union[Unset, str] = UNSET,
    revenue_share_group: Union[Unset, str] = UNSET,
    developer_uuid: Union[Unset, str] = UNSET,
    developer_app_uuid: Union[Unset, str] = UNSET,
    app_subscription_uuid: Union[Unset, str] = UNSET,
    app_metered_uuid: Union[Unset, str] = UNSET,
    plan_uuid: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiRevenueActionFeeCode | None:
    """Get revenue-action-to-fee-code mappings

    Args:
        date (datetime.date):
        revenue_action_type (Union[Unset, str]):
        fee_category_group (Union[Unset, str]):
        revenue_group (Union[Unset, str]):
        revenue_share_group (Union[Unset, str]):
        developer_uuid (Union[Unset, str]):
        developer_app_uuid (Union[Unset, str]):
        app_subscription_uuid (Union[Unset, str]):
        app_metered_uuid (Union[Unset, str]):
        plan_uuid (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        revenue_action_type: Union[Unset, str]
        fee_category_group: Union[Unset, str]
        revenue_group: Union[Unset, str]
        revenue_share_group: Union[Unset, str]
        developer_uuid: Union[Unset, str]
        developer_app_uuid: Union[Unset, str]
        app_subscription_uuid: Union[Unset, str]
        app_metered_uuid: Union[Unset, str]
        plan_uuid: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "revenue_action_type": serialize_argument(revenue_action_type),
        "fee_category_group": serialize_argument(fee_category_group),
        "revenue_group": serialize_argument(revenue_group),
        "revenue_share_group": serialize_argument(revenue_share_group),
        "developer_uuid": serialize_argument(developer_uuid),
        "developer_app_uuid": serialize_argument(developer_app_uuid),
        "app_subscription_uuid": serialize_argument(app_subscription_uuid),
        "app_metered_uuid": serialize_argument(app_metered_uuid),
        "plan_uuid": serialize_argument(plan_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.get_revenue_action_fee_codes",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiRevenueActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_revenue_action_fee_code_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ResponseError]:
    """Delete revenue-action-to-fee-code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.delete_revenue_action_fee_code_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_revenue_action_fee_code_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | None:
    """Delete revenue-action-to-fee-code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.delete_revenue_action_fee_code_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_revenue_action_fee_code_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError]:
    """Delete revenue-action-to-fee-code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.delete_revenue_action_fee_code_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_revenue_action_fee_code_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | None:
    """Delete revenue-action-to-fee-code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="revenue_action_fee_code.delete_revenue_action_fee_code_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
