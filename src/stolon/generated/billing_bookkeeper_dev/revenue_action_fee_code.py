"""
Proxied wrapper functions for billing-bookkeeper dev - revenue_action_fee_code.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
import json
from http import HTTPStatus
from typing import Union

from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.revenue_action_fee_code import (
    create_revenue_action_fee_code,
    delete_revenue_action_fee_code_by_uuid,
    get_revenue_action_fee_code_by_uuid,
    get_revenue_action_fee_codes,
    update_revenue_action_fee_code,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_revenue_action_fee_code import (
    ApiRevenueActionFeeCode,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset


def update_revenue_action_fee_code_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiRevenueActionFeeCode
) -> Response[ApiRevenueActionFeeCode]:
    """Update revenue-action-to-fee-code mapping

    Args:
        uuid (str):
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        body: ApiRevenueActionFeeCode

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Extract request parameters from generated function
    kwargs = update_revenue_action_fee_code._get_kwargs(uuid=uuid, body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiRevenueActionFeeCode:
        parsed = ApiRevenueActionFeeCode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def update_revenue_action_fee_code_sync(
    *, client: StolonClient, uuid: str, body: ApiRevenueActionFeeCode
) -> ApiRevenueActionFeeCode | None:
    """Update revenue-action-to-fee-code mapping

    Args:
        uuid (str):
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        body: ApiRevenueActionFeeCode

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Extract request parameters from generated function
    kwargs = update_revenue_action_fee_code._get_kwargs(uuid=uuid, body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiRevenueActionFeeCode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def update_revenue_action_fee_code_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiRevenueActionFeeCode
) -> Response[ApiRevenueActionFeeCode]:
    """Update revenue-action-to-fee-code mapping

    Args:
        uuid (str):
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        body: ApiRevenueActionFeeCode

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Extract request parameters from generated function
    kwargs = update_revenue_action_fee_code._get_kwargs(uuid=uuid, body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiRevenueActionFeeCode:
        parsed = ApiRevenueActionFeeCode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def update_revenue_action_fee_code_asyncio(
    *, client: StolonClient, uuid: str, body: ApiRevenueActionFeeCode
) -> ApiRevenueActionFeeCode | None:
    """Update revenue-action-to-fee-code mapping

    Args:
        uuid (str):
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        body: ApiRevenueActionFeeCode

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Extract request parameters from generated function
    kwargs = update_revenue_action_fee_code._get_kwargs(uuid=uuid, body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiRevenueActionFeeCode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_revenue_action_fee_code_sync_detailed(
    *, client: StolonClient, body: ApiRevenueActionFeeCode
) -> Response[ApiRevenueActionFeeCode]:
    """Create revenue-action-to-fee-code mapping

    Args:
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiRevenueActionFeeCode

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Extract request parameters from generated function
    kwargs = create_revenue_action_fee_code._get_kwargs(body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiRevenueActionFeeCode:
        parsed = ApiRevenueActionFeeCode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_revenue_action_fee_code_sync(
    *, client: StolonClient, body: ApiRevenueActionFeeCode
) -> ApiRevenueActionFeeCode | None:
    """Create revenue-action-to-fee-code mapping

    Args:
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiRevenueActionFeeCode

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Extract request parameters from generated function
    kwargs = create_revenue_action_fee_code._get_kwargs(body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiRevenueActionFeeCode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_revenue_action_fee_code_asyncio_detailed(
    *, client: StolonClient, body: ApiRevenueActionFeeCode
) -> Response[ApiRevenueActionFeeCode]:
    """Create revenue-action-to-fee-code mapping

    Args:
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiRevenueActionFeeCode

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Extract request parameters from generated function
    kwargs = create_revenue_action_fee_code._get_kwargs(body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiRevenueActionFeeCode:
        parsed = ApiRevenueActionFeeCode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_revenue_action_fee_code_asyncio(
    *, client: StolonClient, body: ApiRevenueActionFeeCode
) -> ApiRevenueActionFeeCode | None:
    """Create revenue-action-to-fee-code mapping

    Args:
        body (ApiRevenueActionFeeCode): All revenue action fee code records used by this revenue
            share abstraction.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiRevenueActionFeeCode

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Extract request parameters from generated function
    kwargs = create_revenue_action_fee_code._get_kwargs(body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiRevenueActionFeeCode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_revenue_action_fee_code_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiRevenueActionFeeCode]:
    """Get revenue-action-to-fee-code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Extract request parameters from generated function
    kwargs = get_revenue_action_fee_code_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiRevenueActionFeeCode:
        parsed = ApiRevenueActionFeeCode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_revenue_action_fee_code_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiRevenueActionFeeCode | None:
    """Get revenue-action-to-fee-code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Extract request parameters from generated function
    kwargs = get_revenue_action_fee_code_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiRevenueActionFeeCode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_revenue_action_fee_code_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiRevenueActionFeeCode]:
    """Get revenue-action-to-fee-code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Extract request parameters from generated function
    kwargs = get_revenue_action_fee_code_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiRevenueActionFeeCode:
        parsed = ApiRevenueActionFeeCode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_revenue_action_fee_code_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiRevenueActionFeeCode | None:
    """Get revenue-action-to-fee-code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Extract request parameters from generated function
    kwargs = get_revenue_action_fee_code_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiRevenueActionFeeCode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_revenue_action_fee_codes_sync_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    revenue_action_type: Union[Unset, str] = UNSET,
    fee_category_group: Union[Unset, str] = UNSET,
    revenue_group: Union[Unset, str] = UNSET,
    revenue_share_group: Union[Unset, str] = UNSET,
    developer_uuid: Union[Unset, str] = UNSET,
    developer_app_uuid: Union[Unset, str] = UNSET,
    app_subscription_uuid: Union[Unset, str] = UNSET,
    app_metered_uuid: Union[Unset, str] = UNSET,
    plan_uuid: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiRevenueActionFeeCode]:
    """Get revenue-action-to-fee-code mappings

    Args:
        date (datetime.date):
        revenue_action_type (Union[Unset, str]):
        fee_category_group (Union[Unset, str]):
        revenue_group (Union[Unset, str]):
        revenue_share_group (Union[Unset, str]):
        developer_uuid (Union[Unset, str]):
        developer_app_uuid (Union[Unset, str]):
        app_subscription_uuid (Union[Unset, str]):
        app_metered_uuid (Union[Unset, str]):
        plan_uuid (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        revenue_action_type: Union[Unset, str]
        fee_category_group: Union[Unset, str]
        revenue_group: Union[Unset, str]
        revenue_share_group: Union[Unset, str]
        developer_uuid: Union[Unset, str]
        developer_app_uuid: Union[Unset, str]
        app_subscription_uuid: Union[Unset, str]
        app_metered_uuid: Union[Unset, str]
        plan_uuid: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Extract request parameters from generated function
    kwargs = get_revenue_action_fee_codes._get_kwargs(
        date=date,
        revenue_action_type=revenue_action_type,
        fee_category_group=fee_category_group,
        revenue_group=revenue_group,
        revenue_share_group=revenue_share_group,
        developer_uuid=developer_uuid,
        developer_app_uuid=developer_app_uuid,
        app_subscription_uuid=app_subscription_uuid,
        app_metered_uuid=app_metered_uuid,
        plan_uuid=plan_uuid,
        fee_category=fee_category,
        fee_code=fee_code,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiRevenueActionFeeCode:
        parsed = ApiRevenueActionFeeCode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_revenue_action_fee_codes_sync(
    *,
    client: StolonClient,
    date: datetime.date,
    revenue_action_type: Union[Unset, str] = UNSET,
    fee_category_group: Union[Unset, str] = UNSET,
    revenue_group: Union[Unset, str] = UNSET,
    revenue_share_group: Union[Unset, str] = UNSET,
    developer_uuid: Union[Unset, str] = UNSET,
    developer_app_uuid: Union[Unset, str] = UNSET,
    app_subscription_uuid: Union[Unset, str] = UNSET,
    app_metered_uuid: Union[Unset, str] = UNSET,
    plan_uuid: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiRevenueActionFeeCode | None:
    """Get revenue-action-to-fee-code mappings

    Args:
        date (datetime.date):
        revenue_action_type (Union[Unset, str]):
        fee_category_group (Union[Unset, str]):
        revenue_group (Union[Unset, str]):
        revenue_share_group (Union[Unset, str]):
        developer_uuid (Union[Unset, str]):
        developer_app_uuid (Union[Unset, str]):
        app_subscription_uuid (Union[Unset, str]):
        app_metered_uuid (Union[Unset, str]):
        plan_uuid (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        revenue_action_type: Union[Unset, str]
        fee_category_group: Union[Unset, str]
        revenue_group: Union[Unset, str]
        revenue_share_group: Union[Unset, str]
        developer_uuid: Union[Unset, str]
        developer_app_uuid: Union[Unset, str]
        app_subscription_uuid: Union[Unset, str]
        app_metered_uuid: Union[Unset, str]
        plan_uuid: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Extract request parameters from generated function
    kwargs = get_revenue_action_fee_codes._get_kwargs(
        date=date,
        revenue_action_type=revenue_action_type,
        fee_category_group=fee_category_group,
        revenue_group=revenue_group,
        revenue_share_group=revenue_share_group,
        developer_uuid=developer_uuid,
        developer_app_uuid=developer_app_uuid,
        app_subscription_uuid=app_subscription_uuid,
        app_metered_uuid=app_metered_uuid,
        plan_uuid=plan_uuid,
        fee_category=fee_category,
        fee_code=fee_code,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiRevenueActionFeeCode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_revenue_action_fee_codes_asyncio_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    revenue_action_type: Union[Unset, str] = UNSET,
    fee_category_group: Union[Unset, str] = UNSET,
    revenue_group: Union[Unset, str] = UNSET,
    revenue_share_group: Union[Unset, str] = UNSET,
    developer_uuid: Union[Unset, str] = UNSET,
    developer_app_uuid: Union[Unset, str] = UNSET,
    app_subscription_uuid: Union[Unset, str] = UNSET,
    app_metered_uuid: Union[Unset, str] = UNSET,
    plan_uuid: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiRevenueActionFeeCode]:
    """Get revenue-action-to-fee-code mappings

    Args:
        date (datetime.date):
        revenue_action_type (Union[Unset, str]):
        fee_category_group (Union[Unset, str]):
        revenue_group (Union[Unset, str]):
        revenue_share_group (Union[Unset, str]):
        developer_uuid (Union[Unset, str]):
        developer_app_uuid (Union[Unset, str]):
        app_subscription_uuid (Union[Unset, str]):
        app_metered_uuid (Union[Unset, str]):
        plan_uuid (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiRevenueActionFeeCode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        revenue_action_type: Union[Unset, str]
        fee_category_group: Union[Unset, str]
        revenue_group: Union[Unset, str]
        revenue_share_group: Union[Unset, str]
        developer_uuid: Union[Unset, str]
        developer_app_uuid: Union[Unset, str]
        app_subscription_uuid: Union[Unset, str]
        app_metered_uuid: Union[Unset, str]
        plan_uuid: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiRevenueActionFeeCode]
    """
    # Extract request parameters from generated function
    kwargs = get_revenue_action_fee_codes._get_kwargs(
        date=date,
        revenue_action_type=revenue_action_type,
        fee_category_group=fee_category_group,
        revenue_group=revenue_group,
        revenue_share_group=revenue_share_group,
        developer_uuid=developer_uuid,
        developer_app_uuid=developer_app_uuid,
        app_subscription_uuid=app_subscription_uuid,
        app_metered_uuid=app_metered_uuid,
        plan_uuid=plan_uuid,
        fee_category=fee_category,
        fee_code=fee_code,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiRevenueActionFeeCode:
        parsed = ApiRevenueActionFeeCode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_revenue_action_fee_codes_asyncio(
    *,
    client: StolonClient,
    date: datetime.date,
    revenue_action_type: Union[Unset, str] = UNSET,
    fee_category_group: Union[Unset, str] = UNSET,
    revenue_group: Union[Unset, str] = UNSET,
    revenue_share_group: Union[Unset, str] = UNSET,
    developer_uuid: Union[Unset, str] = UNSET,
    developer_app_uuid: Union[Unset, str] = UNSET,
    app_subscription_uuid: Union[Unset, str] = UNSET,
    app_metered_uuid: Union[Unset, str] = UNSET,
    plan_uuid: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiRevenueActionFeeCode | None:
    """Get revenue-action-to-fee-code mappings

    Args:
        date (datetime.date):
        revenue_action_type (Union[Unset, str]):
        fee_category_group (Union[Unset, str]):
        revenue_group (Union[Unset, str]):
        revenue_share_group (Union[Unset, str]):
        developer_uuid (Union[Unset, str]):
        developer_app_uuid (Union[Unset, str]):
        app_subscription_uuid (Union[Unset, str]):
        app_metered_uuid (Union[Unset, str]):
        plan_uuid (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiRevenueActionFeeCode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        revenue_action_type: Union[Unset, str]
        fee_category_group: Union[Unset, str]
        revenue_group: Union[Unset, str]
        revenue_share_group: Union[Unset, str]
        developer_uuid: Union[Unset, str]
        developer_app_uuid: Union[Unset, str]
        app_subscription_uuid: Union[Unset, str]
        app_metered_uuid: Union[Unset, str]
        plan_uuid: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiRevenueActionFeeCode | None
    """
    # Extract request parameters from generated function
    kwargs = get_revenue_action_fee_codes._get_kwargs(
        date=date,
        revenue_action_type=revenue_action_type,
        fee_category_group=fee_category_group,
        revenue_group=revenue_group,
        revenue_share_group=revenue_share_group,
        developer_uuid=developer_uuid,
        developer_app_uuid=developer_app_uuid,
        app_subscription_uuid=app_subscription_uuid,
        app_metered_uuid=app_metered_uuid,
        plan_uuid=plan_uuid,
        fee_category=fee_category,
        fee_code=fee_code,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiRevenueActionFeeCode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def delete_revenue_action_fee_code_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ResponseError]:
    """Delete revenue-action-to-fee-code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = delete_revenue_action_fee_code_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def delete_revenue_action_fee_code_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | None:
    """Delete revenue-action-to-fee-code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = delete_revenue_action_fee_code_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def delete_revenue_action_fee_code_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError]:
    """Delete revenue-action-to-fee-code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = delete_revenue_action_fee_code_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def delete_revenue_action_fee_code_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | None:
    """Delete revenue-action-to-fee-code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = delete_revenue_action_fee_code_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None
