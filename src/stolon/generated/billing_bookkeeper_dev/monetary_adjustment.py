"""
Proxied wrapper functions for billing-bookkeeper dev - monetary_adjustment.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import json
from http import HTTPStatus
from typing import Union

from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.monetary_adjustment import (
    get_monetary_adjustment_by_uuid,
    get_monetary_adjustments,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_monetary_adjustment import (
    ApiMonetaryAdjustment,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset


def get_monetary_adjustment_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiMonetaryAdjustment | ResponseError]:
    """Get a monetary adjustment by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMonetaryAdjustment, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiMonetaryAdjustment | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = get_monetary_adjustment_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_monetary_adjustment_by_uuid_sync(
    *, client: StolonClient, uuid: str
) -> ApiMonetaryAdjustment | ResponseError | None:
    """Get a monetary adjustment by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMonetaryAdjustment, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiMonetaryAdjustment | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = get_monetary_adjustment_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_monetary_adjustment_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiMonetaryAdjustment | ResponseError]:
    """Get a monetary adjustment by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMonetaryAdjustment, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiMonetaryAdjustment | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = get_monetary_adjustment_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_monetary_adjustment_by_uuid_asyncio(
    *, client: StolonClient, uuid: str
) -> ApiMonetaryAdjustment | ResponseError | None:
    """Get a monetary adjustment by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMonetaryAdjustment, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiMonetaryAdjustment | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = get_monetary_adjustment_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_monetary_adjustments_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    adjust_fee_summary_uuid: Union[Unset, str] = UNSET,
    qualified_fee_summary_uuid: Union[Unset, str] = UNSET,
    rule_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get monetary adjustments

    Args:
        billing_entity_uuid (Union[Unset, str]):
        adjust_fee_summary_uuid (Union[Unset, str]):
        qualified_fee_summary_uuid (Union[Unset, str]):
        rule_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: Union[Unset, str]
        adjust_fee_summary_uuid: Union[Unset, str]
        qualified_fee_summary_uuid: Union[Unset, str]
        rule_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = get_monetary_adjustments._get_kwargs(
        billing_entity_uuid=billing_entity_uuid,
        adjust_fee_summary_uuid=adjust_fee_summary_uuid,
        qualified_fee_summary_uuid=qualified_fee_summary_uuid,
        rule_uuid=rule_uuid,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_monetary_adjustments_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    adjust_fee_summary_uuid: Union[Unset, str] = UNSET,
    qualified_fee_summary_uuid: Union[Unset, str] = UNSET,
    rule_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get monetary adjustments

    Args:
        billing_entity_uuid (Union[Unset, str]):
        adjust_fee_summary_uuid (Union[Unset, str]):
        qualified_fee_summary_uuid (Union[Unset, str]):
        rule_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: Union[Unset, str]
        adjust_fee_summary_uuid: Union[Unset, str]
        qualified_fee_summary_uuid: Union[Unset, str]
        rule_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = get_monetary_adjustments._get_kwargs(
        billing_entity_uuid=billing_entity_uuid,
        adjust_fee_summary_uuid=adjust_fee_summary_uuid,
        qualified_fee_summary_uuid=qualified_fee_summary_uuid,
        rule_uuid=rule_uuid,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_monetary_adjustments_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    adjust_fee_summary_uuid: Union[Unset, str] = UNSET,
    qualified_fee_summary_uuid: Union[Unset, str] = UNSET,
    rule_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get monetary adjustments

    Args:
        billing_entity_uuid (Union[Unset, str]):
        adjust_fee_summary_uuid (Union[Unset, str]):
        qualified_fee_summary_uuid (Union[Unset, str]):
        rule_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: Union[Unset, str]
        adjust_fee_summary_uuid: Union[Unset, str]
        qualified_fee_summary_uuid: Union[Unset, str]
        rule_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = get_monetary_adjustments._get_kwargs(
        billing_entity_uuid=billing_entity_uuid,
        adjust_fee_summary_uuid=adjust_fee_summary_uuid,
        qualified_fee_summary_uuid=qualified_fee_summary_uuid,
        rule_uuid=rule_uuid,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_monetary_adjustments_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    adjust_fee_summary_uuid: Union[Unset, str] = UNSET,
    qualified_fee_summary_uuid: Union[Unset, str] = UNSET,
    rule_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get monetary adjustments

    Args:
        billing_entity_uuid (Union[Unset, str]):
        adjust_fee_summary_uuid (Union[Unset, str]):
        qualified_fee_summary_uuid (Union[Unset, str]):
        rule_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: Union[Unset, str]
        adjust_fee_summary_uuid: Union[Unset, str]
        qualified_fee_summary_uuid: Union[Unset, str]
        rule_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = get_monetary_adjustments._get_kwargs(
        billing_entity_uuid=billing_entity_uuid,
        adjust_fee_summary_uuid=adjust_fee_summary_uuid,
        qualified_fee_summary_uuid=qualified_fee_summary_uuid,
        rule_uuid=rule_uuid,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None
