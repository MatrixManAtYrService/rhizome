"""
Proxied wrapper functions for billing-bookkeeper dev - settlement_action.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_action import (
    ApiSettlementAction,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_action_request import (
    ApiSettlementActionRequest,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.serialization import deserialize_result, serialize_argument


def get_reseller_settlement_actions_sync_detailed(
    *, client: StolonClient, r_id: str, settlement_uuid: str, x_clover_appenv: str
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions

    Args:
        r_id (str):
        settlement_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        settlement_uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "settlement_uuid": serialize_argument(settlement_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_reseller_settlement_actions",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_actions_sync(
    *, client: StolonClient, r_id: str, settlement_uuid: str, x_clover_appenv: str
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions

    Args:
        r_id (str):
        settlement_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        settlement_uuid: str
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "settlement_uuid": serialize_argument(settlement_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_reseller_settlement_actions",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_actions_asyncio_detailed(
    *, client: StolonClient, r_id: str, settlement_uuid: str, x_clover_appenv: str
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions

    Args:
        r_id (str):
        settlement_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        settlement_uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "settlement_uuid": serialize_argument(settlement_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_reseller_settlement_actions",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_actions_asyncio(
    *, client: StolonClient, r_id: str, settlement_uuid: str, x_clover_appenv: str
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions

    Args:
        r_id (str):
        settlement_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        settlement_uuid: str
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "settlement_uuid": serialize_argument(settlement_uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_reseller_settlement_actions",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_action_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiSettlementAction]:
    """Get a settlement action by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiSettlementAction]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_action_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_action_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiSettlementAction | None:
    """Get a settlement action by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiSettlementAction | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_action_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_action_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ApiSettlementAction]:
    """Get a settlement action by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiSettlementAction]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_action_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_action_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiSettlementAction | None:
    """Get a settlement action by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiSettlementAction | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_action_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_actions_sync_detailed(
    *, client: StolonClient, settlement_uuid: str
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions

    Args:
        settlement_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuid: str

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuid": serialize_argument(settlement_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_actions",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_actions_sync(
    *, client: StolonClient, settlement_uuid: str
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions

    Args:
        settlement_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuid: str

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuid": serialize_argument(settlement_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_actions",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_actions_asyncio_detailed(
    *, client: StolonClient, settlement_uuid: str
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions

    Args:
        settlement_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuid: str

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuid": serialize_argument(settlement_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_actions",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_actions_asyncio(
    *, client: StolonClient, settlement_uuid: str
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions

    Args:
        settlement_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuid: str

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuid": serialize_argument(settlement_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_actions",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def perform_settlement_actions_sync_detailed(
    *, client: StolonClient, body: list["ApiSettlementActionRequest"], x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Perform settlement actions for a collection of settlement requests

    Args:
        x_clover_appenv (str):
        body (list['ApiSettlementActionRequest']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list["ApiSettlementActionRequest"]
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.perform_settlement_actions",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def perform_settlement_actions_sync(
    *, client: StolonClient, body: list["ApiSettlementActionRequest"], x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Perform settlement actions for a collection of settlement requests

    Args:
        x_clover_appenv (str):
        body (list['ApiSettlementActionRequest']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list["ApiSettlementActionRequest"]
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.perform_settlement_actions",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def perform_settlement_actions_asyncio_detailed(
    *, client: StolonClient, body: list["ApiSettlementActionRequest"], x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Perform settlement actions for a collection of settlement requests

    Args:
        x_clover_appenv (str):
        body (list['ApiSettlementActionRequest']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list["ApiSettlementActionRequest"]
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.perform_settlement_actions",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def perform_settlement_actions_asyncio(
    *, client: StolonClient, body: list["ApiSettlementActionRequest"], x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Perform settlement actions for a collection of settlement requests

    Args:
        x_clover_appenv (str):
        body (list['ApiSettlementActionRequest']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list["ApiSettlementActionRequest"]
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.perform_settlement_actions",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_action_by_uuid_sync_detailed(
    *, client: StolonClient, r_id: str, uuid: str, x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Get a settlement action by UUID

    Args:
        r_id (str):
        uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "uuid": serialize_argument(uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_reseller_settlement_action_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_action_by_uuid_sync(
    *, client: StolonClient, r_id: str, uuid: str, x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Get a settlement action by UUID

    Args:
        r_id (str):
        uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        uuid: str
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "uuid": serialize_argument(uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_reseller_settlement_action_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_action_by_uuid_asyncio_detailed(
    *, client: StolonClient, r_id: str, uuid: str, x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Get a settlement action by UUID

    Args:
        r_id (str):
        uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "uuid": serialize_argument(uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_reseller_settlement_action_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_action_by_uuid_asyncio(
    *, client: StolonClient, r_id: str, uuid: str, x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Get a settlement action by UUID

    Args:
        r_id (str):
        uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        uuid: str
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "uuid": serialize_argument(uuid),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_reseller_settlement_action_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_actions_by_settlement_uuids_sync_detailed(
    *, client: StolonClient, settlement_uuids: list[str]
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions by settlement UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_actions_by_settlement_uuids",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_actions_by_settlement_uuids_sync(
    *, client: StolonClient, settlement_uuids: list[str]
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions by settlement UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_actions_by_settlement_uuids",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_actions_by_settlement_uuids_asyncio_detailed(
    *, client: StolonClient, settlement_uuids: list[str]
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions by settlement UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_actions_by_settlement_uuids",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_actions_by_settlement_uuids_asyncio(
    *, client: StolonClient, settlement_uuids: list[str]
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions by settlement UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.get_settlement_actions_by_settlement_uuids",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementAction, list["ApiSettlementAction"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def perform_settlement_action_sync_detailed(
    *, client: StolonClient, body: ApiSettlementActionRequest, x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Perform a settlement action

    Args:
        x_clover_appenv (str):
        body (ApiSettlementActionRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiSettlementActionRequest
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.perform_settlement_action",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def perform_settlement_action_sync(
    *, client: StolonClient, body: ApiSettlementActionRequest, x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Perform a settlement action

    Args:
        x_clover_appenv (str):
        body (ApiSettlementActionRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiSettlementActionRequest
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.perform_settlement_action",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def perform_settlement_action_asyncio_detailed(
    *, client: StolonClient, body: ApiSettlementActionRequest, x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Perform a settlement action

    Args:
        x_clover_appenv (str):
        body (ApiSettlementActionRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiSettlementActionRequest
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.perform_settlement_action",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def perform_settlement_action_asyncio(
    *, client: StolonClient, body: ApiSettlementActionRequest, x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Perform a settlement action

    Args:
        x_clover_appenv (str):
        body (ApiSettlementActionRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiSettlementActionRequest
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "x_clover_appenv": serialize_argument(x_clover_appenv)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement_action.perform_settlement_action",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlementAction]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
