"""
Proxied wrapper functions for billing-bookkeeper dev - settlement_action.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.settlement_action import get_reseller_settlement_action_by_uuid
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.settlement_action import get_reseller_settlement_actions
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.settlement_action import get_settlement_action_by_uuid
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.settlement_action import get_settlement_actions
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.settlement_action import get_settlement_actions_by_settlement_uuids
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.settlement_action import perform_settlement_action
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.settlement_action import perform_settlement_actions
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_action import ApiSettlementAction
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_action_request import ApiSettlementActionRequest
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from typing import Any
import json


def get_reseller_settlement_actions_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    settlement_uuid: str,
    x_clover_appenv: str
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions

    Args:
        r_id (str):
        settlement_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        settlement_uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """

    # Extract request parameters from generated function
    kwargs = get_reseller_settlement_actions._get_kwargs(r_id=r_id, settlement_uuid=settlement_uuid, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_reseller_settlement_actions_sync(
    *,
    client: StolonClient,
    r_id: str,
    settlement_uuid: str,
    x_clover_appenv: str
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions

    Args:
        r_id (str):
        settlement_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        settlement_uuid: str
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_reseller_settlement_actions._get_kwargs(r_id=r_id, settlement_uuid=settlement_uuid, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_reseller_settlement_actions_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    settlement_uuid: str,
    x_clover_appenv: str
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions

    Args:
        r_id (str):
        settlement_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        settlement_uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """

    # Extract request parameters from generated function
    kwargs = get_reseller_settlement_actions._get_kwargs(r_id=r_id, settlement_uuid=settlement_uuid, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_reseller_settlement_actions_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    settlement_uuid: str,
    x_clover_appenv: str
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions

    Args:
        r_id (str):
        settlement_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        settlement_uuid: str
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_reseller_settlement_actions._get_kwargs(r_id=r_id, settlement_uuid=settlement_uuid, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_settlement_action_by_uuid_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiSettlementAction]:
    """Get a settlement action by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiSettlementAction]
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_action_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiSettlementAction | None
    if body_json and proxy_response.status_code == 200 and ApiSettlementAction:
        parsed = ApiSettlementAction.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_settlement_action_by_uuid_sync(
    *,
    client: StolonClient,
    uuid: str
) -> ApiSettlementAction | None:
    """Get a settlement action by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiSettlementAction | None
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_action_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiSettlementAction.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_settlement_action_by_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiSettlementAction]:
    """Get a settlement action by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiSettlementAction]
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_action_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiSettlementAction | None
    if body_json and proxy_response.status_code == 200 and ApiSettlementAction:
        parsed = ApiSettlementAction.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_settlement_action_by_uuid_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> ApiSettlementAction | None:
    """Get a settlement action by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiSettlementAction | None
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_action_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiSettlementAction.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_settlement_actions_sync_detailed(
    *,
    client: StolonClient,
    settlement_uuid: str
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions

    Args:
        settlement_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                settlement_uuid: str

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_actions._get_kwargs(settlement_uuid=settlement_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_settlement_actions_sync(
    *,
    client: StolonClient,
    settlement_uuid: str
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions

    Args:
        settlement_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                settlement_uuid: str

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_actions._get_kwargs(settlement_uuid=settlement_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_settlement_actions_asyncio_detailed(
    *,
    client: StolonClient,
    settlement_uuid: str
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions

    Args:
        settlement_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                settlement_uuid: str

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_actions._get_kwargs(settlement_uuid=settlement_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_settlement_actions_asyncio(
    *,
    client: StolonClient,
    settlement_uuid: str
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions

    Args:
        settlement_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                settlement_uuid: str

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_actions._get_kwargs(settlement_uuid=settlement_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def perform_settlement_actions_sync_detailed(
    *,
    client: StolonClient,
    body: list["ApiSettlementActionRequest"],
    x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Perform settlement actions for a collection of settlement requests

    Args:
        x_clover_appenv (str):
        body (list['ApiSettlementActionRequest']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: list["ApiSettlementActionRequest"]
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """

    # Extract request parameters from generated function
    kwargs = perform_settlement_actions._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiSettlementAction | None
    if body_json and proxy_response.status_code == 200 and ApiSettlementAction:
        parsed = ApiSettlementAction.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def perform_settlement_actions_sync(
    *,
    client: StolonClient,
    body: list["ApiSettlementActionRequest"],
    x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Perform settlement actions for a collection of settlement requests

    Args:
        x_clover_appenv (str):
        body (list['ApiSettlementActionRequest']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: list["ApiSettlementActionRequest"]
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """

    # Extract request parameters from generated function
    kwargs = perform_settlement_actions._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiSettlementAction.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def perform_settlement_actions_asyncio_detailed(
    *,
    client: StolonClient,
    body: list["ApiSettlementActionRequest"],
    x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Perform settlement actions for a collection of settlement requests

    Args:
        x_clover_appenv (str):
        body (list['ApiSettlementActionRequest']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: list["ApiSettlementActionRequest"]
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """

    # Extract request parameters from generated function
    kwargs = perform_settlement_actions._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiSettlementAction | None
    if body_json and proxy_response.status_code == 200 and ApiSettlementAction:
        parsed = ApiSettlementAction.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def perform_settlement_actions_asyncio(
    *,
    client: StolonClient,
    body: list["ApiSettlementActionRequest"],
    x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Perform settlement actions for a collection of settlement requests

    Args:
        x_clover_appenv (str):
        body (list['ApiSettlementActionRequest']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: list["ApiSettlementActionRequest"]
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """

    # Extract request parameters from generated function
    kwargs = perform_settlement_actions._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiSettlementAction.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_reseller_settlement_action_by_uuid_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    uuid: str,
    x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Get a settlement action by UUID

    Args:
        r_id (str):
        uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """

    # Extract request parameters from generated function
    kwargs = get_reseller_settlement_action_by_uuid._get_kwargs(r_id=r_id, uuid=uuid, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiSettlementAction | None
    if body_json and proxy_response.status_code == 200 and ApiSettlementAction:
        parsed = ApiSettlementAction.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_reseller_settlement_action_by_uuid_sync(
    *,
    client: StolonClient,
    r_id: str,
    uuid: str,
    x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Get a settlement action by UUID

    Args:
        r_id (str):
        uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        uuid: str
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """

    # Extract request parameters from generated function
    kwargs = get_reseller_settlement_action_by_uuid._get_kwargs(r_id=r_id, uuid=uuid, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiSettlementAction.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_reseller_settlement_action_by_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    uuid: str,
    x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Get a settlement action by UUID

    Args:
        r_id (str):
        uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        uuid: str
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """

    # Extract request parameters from generated function
    kwargs = get_reseller_settlement_action_by_uuid._get_kwargs(r_id=r_id, uuid=uuid, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiSettlementAction | None
    if body_json and proxy_response.status_code == 200 and ApiSettlementAction:
        parsed = ApiSettlementAction.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_reseller_settlement_action_by_uuid_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    uuid: str,
    x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Get a settlement action by UUID

    Args:
        r_id (str):
        uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        uuid: str
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """

    # Extract request parameters from generated function
    kwargs = get_reseller_settlement_action_by_uuid._get_kwargs(r_id=r_id, uuid=uuid, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiSettlementAction.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_settlement_actions_by_settlement_uuids_sync_detailed(
    *,
    client: StolonClient,
    settlement_uuids: list[str]
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions by settlement UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                settlement_uuids: list[str]

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_actions_by_settlement_uuids._get_kwargs(settlement_uuids=settlement_uuids)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_settlement_actions_by_settlement_uuids_sync(
    *,
    client: StolonClient,
    settlement_uuids: list[str]
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions by settlement UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                settlement_uuids: list[str]

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_actions_by_settlement_uuids._get_kwargs(settlement_uuids=settlement_uuids)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_settlement_actions_by_settlement_uuids_asyncio_detailed(
    *,
    client: StolonClient,
    settlement_uuids: list[str]
) -> Response[ApiSettlementAction | list["ApiSettlementAction"]]:
    """Get settlement actions by settlement UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementAction, list['ApiSettlementAction']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                settlement_uuids: list[str]

    Returns:
        Response[ApiSettlementAction | list["ApiSettlementAction"]]
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_actions_by_settlement_uuids._get_kwargs(settlement_uuids=settlement_uuids)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_settlement_actions_by_settlement_uuids_asyncio(
    *,
    client: StolonClient,
    settlement_uuids: list[str]
) -> ApiSettlementAction | list["ApiSettlementAction"] | None:
    """Get settlement actions by settlement UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementAction, list['ApiSettlementAction']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                settlement_uuids: list[str]

    Returns:
        ApiSettlementAction | list["ApiSettlementAction"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_settlement_actions_by_settlement_uuids._get_kwargs(settlement_uuids=settlement_uuids)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def perform_settlement_action_sync_detailed(
    *,
    client: StolonClient,
    body: ApiSettlementActionRequest,
    x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Perform a settlement action

    Args:
        x_clover_appenv (str):
        body (ApiSettlementActionRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiSettlementActionRequest
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """

    # Extract request parameters from generated function
    kwargs = perform_settlement_action._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiSettlementAction | None
    if body_json and proxy_response.status_code == 200 and ApiSettlementAction:
        parsed = ApiSettlementAction.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def perform_settlement_action_sync(
    *,
    client: StolonClient,
    body: ApiSettlementActionRequest,
    x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Perform a settlement action

    Args:
        x_clover_appenv (str):
        body (ApiSettlementActionRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiSettlementActionRequest
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """

    # Extract request parameters from generated function
    kwargs = perform_settlement_action._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiSettlementAction.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def perform_settlement_action_asyncio_detailed(
    *,
    client: StolonClient,
    body: ApiSettlementActionRequest,
    x_clover_appenv: str
) -> Response[ApiSettlementAction]:
    """Perform a settlement action

    Args:
        x_clover_appenv (str):
        body (ApiSettlementActionRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlementAction]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiSettlementActionRequest
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementAction]
    """

    # Extract request parameters from generated function
    kwargs = perform_settlement_action._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiSettlementAction | None
    if body_json and proxy_response.status_code == 200 and ApiSettlementAction:
        parsed = ApiSettlementAction.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def perform_settlement_action_asyncio(
    *,
    client: StolonClient,
    body: ApiSettlementActionRequest,
    x_clover_appenv: str
) -> ApiSettlementAction | None:
    """Perform a settlement action

    Args:
        x_clover_appenv (str):
        body (ApiSettlementActionRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlementAction

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiSettlementActionRequest
        x_clover_appenv: str

    Returns:
        ApiSettlementAction | None
    """

    # Extract request parameters from generated function
    kwargs = perform_settlement_action._get_kwargs(body=body, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiSettlementAction.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

