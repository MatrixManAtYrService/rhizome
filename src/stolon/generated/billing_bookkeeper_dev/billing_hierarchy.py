"""
Proxied wrapper functions for billing-bookkeeper dev - billing_hierarchy.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import create_billing_hierarchy
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import delete_billing_hierarchy_by_uuid
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_archetypes
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchies
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_by_uuid
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_child_nodes
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_children
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_children_of_entity
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_date_nodes_for_entity
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_merchant_children
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_parent_nodes
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_parents
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_billing_hierarchy_parents_of_entity
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import get_effective_billing_hierarchy
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy import move_merchant_billing_hierarchies
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_billing_hierarchy import ApiBillingHierarchy
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_billing_hierarchy_level import ApiBillingHierarchyLevel
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_billing_hierarchy_level_node import ApiBillingHierarchyLevelNode
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.get_billing_hierarchy_child_nodes_entity_types_item import GetBillingHierarchyChildNodesEntityTypesItem
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import ResponseError
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import datetime
import json


def get_billing_hierarchy_children_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date,
    exclude_merchants: Union[Unset, bool] = UNSET
) -> Response[ResponseError]:
    """Get immediate children of billing hierarchy

    Args:
        uuid (str):
        date (datetime.date):
        exclude_merchants (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date
        exclude_merchants: Union[Unset, bool]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_children._get_kwargs(uuid=uuid, date=date, exclude_merchants=exclude_merchants)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_children_sync(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date,
    exclude_merchants: Union[Unset, bool] = UNSET
) -> ResponseError | None:
    """Get immediate children of billing hierarchy

    Args:
        uuid (str):
        date (datetime.date):
        exclude_merchants (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date
        exclude_merchants: Union[Unset, bool]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_children._get_kwargs(uuid=uuid, date=date, exclude_merchants=exclude_merchants)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_children_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date,
    exclude_merchants: Union[Unset, bool] = UNSET
) -> Response[ResponseError]:
    """Get immediate children of billing hierarchy

    Args:
        uuid (str):
        date (datetime.date):
        exclude_merchants (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date
        exclude_merchants: Union[Unset, bool]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_children._get_kwargs(uuid=uuid, date=date, exclude_merchants=exclude_merchants)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_children_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date,
    exclude_merchants: Union[Unset, bool] = UNSET
) -> ResponseError | None:
    """Get immediate children of billing hierarchy

    Args:
        uuid (str):
        date (datetime.date):
        exclude_merchants (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date
        exclude_merchants: Union[Unset, bool]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_children._get_kwargs(uuid=uuid, date=date, exclude_merchants=exclude_merchants)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def move_merchant_billing_hierarchies_sync_detailed(
    *,
    client: StolonClient,
    body: list[str],
    new_parent_billing_entity_uuid: str,
    date: datetime.date
) -> Response[ResponseError]:
    """Move billing hierarchy merchants

    Args:
        new_parent_billing_entity_uuid (str):
        date (datetime.date):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: list[str]
        new_parent_billing_entity_uuid: str
        date: datetime.date

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = move_merchant_billing_hierarchies._get_kwargs(body=body, new_parent_billing_entity_uuid=new_parent_billing_entity_uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def move_merchant_billing_hierarchies_sync(
    *,
    client: StolonClient,
    body: list[str],
    new_parent_billing_entity_uuid: str,
    date: datetime.date
) -> ResponseError | None:
    """Move billing hierarchy merchants

    Args:
        new_parent_billing_entity_uuid (str):
        date (datetime.date):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: list[str]
        new_parent_billing_entity_uuid: str
        date: datetime.date

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = move_merchant_billing_hierarchies._get_kwargs(body=body, new_parent_billing_entity_uuid=new_parent_billing_entity_uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def move_merchant_billing_hierarchies_asyncio_detailed(
    *,
    client: StolonClient,
    body: list[str],
    new_parent_billing_entity_uuid: str,
    date: datetime.date
) -> Response[ResponseError]:
    """Move billing hierarchy merchants

    Args:
        new_parent_billing_entity_uuid (str):
        date (datetime.date):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: list[str]
        new_parent_billing_entity_uuid: str
        date: datetime.date

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = move_merchant_billing_hierarchies._get_kwargs(body=body, new_parent_billing_entity_uuid=new_parent_billing_entity_uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def move_merchant_billing_hierarchies_asyncio(
    *,
    client: StolonClient,
    body: list[str],
    new_parent_billing_entity_uuid: str,
    date: datetime.date
) -> ResponseError | None:
    """Move billing hierarchy merchants

    Args:
        new_parent_billing_entity_uuid (str):
        date (datetime.date):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: list[str]
        new_parent_billing_entity_uuid: str
        date: datetime.date

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = move_merchant_billing_hierarchies._get_kwargs(body=body, new_parent_billing_entity_uuid=new_parent_billing_entity_uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_by_uuid_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiBillingHierarchy | ResponseError]:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiBillingHierarchy, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiBillingHierarchy | ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_by_uuid_sync(
    *,
    client: StolonClient,
    uuid: str
) -> ApiBillingHierarchy | ResponseError | None:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiBillingHierarchy, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiBillingHierarchy | ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_billing_hierarchy_by_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiBillingHierarchy | ResponseError]:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiBillingHierarchy, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiBillingHierarchy | ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_by_uuid_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> ApiBillingHierarchy | ResponseError | None:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiBillingHierarchy, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiBillingHierarchy | ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_billing_hierarchy_date_nodes_for_entity_sync_detailed(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str
) -> Response[ResponseError]:
    """Get hierarchy relationship effective-date nodes for billing entity

    Args:
        entityuuid (str):
        type_ (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_date_nodes_for_entity._get_kwargs(entityuuid=entityuuid, type_=type_)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_date_nodes_for_entity_sync(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str
) -> ResponseError | None:
    """Get hierarchy relationship effective-date nodes for billing entity

    Args:
        entityuuid (str):
        type_ (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_date_nodes_for_entity._get_kwargs(entityuuid=entityuuid, type_=type_)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_date_nodes_for_entity_asyncio_detailed(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str
) -> Response[ResponseError]:
    """Get hierarchy relationship effective-date nodes for billing entity

    Args:
        entityuuid (str):
        type_ (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_date_nodes_for_entity._get_kwargs(entityuuid=entityuuid, type_=type_)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_date_nodes_for_entity_asyncio(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str
) -> ResponseError | None:
    """Get hierarchy relationship effective-date nodes for billing entity

    Args:
        entityuuid (str):
        type_ (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_date_nodes_for_entity._get_kwargs(entityuuid=entityuuid, type_=type_)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_parent_nodes_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: datetime.date
) -> Response[ApiBillingHierarchyLevelNode]:
    """Get parent nodes of billing entity for specified hierarchy type

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevelNode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date

    Returns:
        Response[ApiBillingHierarchyLevelNode]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parent_nodes._get_kwargs(billing_entity_uuid=billing_entity_uuid, hierarchy_type=hierarchy_type, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevelNode | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevelNode:
        parsed = ApiBillingHierarchyLevelNode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_parent_nodes_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: datetime.date
) -> ApiBillingHierarchyLevelNode | None:
    """Get parent nodes of billing entity for specified hierarchy type

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevelNode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date

    Returns:
        ApiBillingHierarchyLevelNode | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parent_nodes._get_kwargs(billing_entity_uuid=billing_entity_uuid, hierarchy_type=hierarchy_type, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevelNode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_parent_nodes_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: datetime.date
) -> Response[ApiBillingHierarchyLevelNode]:
    """Get parent nodes of billing entity for specified hierarchy type

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevelNode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date

    Returns:
        Response[ApiBillingHierarchyLevelNode]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parent_nodes._get_kwargs(billing_entity_uuid=billing_entity_uuid, hierarchy_type=hierarchy_type, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevelNode | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevelNode:
        parsed = ApiBillingHierarchyLevelNode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_parent_nodes_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: datetime.date
) -> ApiBillingHierarchyLevelNode | None:
    """Get parent nodes of billing entity for specified hierarchy type

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevelNode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date

    Returns:
        ApiBillingHierarchyLevelNode | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parent_nodes._get_kwargs(billing_entity_uuid=billing_entity_uuid, hierarchy_type=hierarchy_type, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevelNode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_archetypes_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date
) -> Response[ApiBillingHierarchyLevel]:
    """Get billing entity archetypes

    Args:
        uuid (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevel]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date

    Returns:
        Response[ApiBillingHierarchyLevel]
    """

    # Extract request parameters from generated function
    kwargs = get_archetypes._get_kwargs(uuid=uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevel | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevel:
        parsed = ApiBillingHierarchyLevel.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_archetypes_sync(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date
) -> ApiBillingHierarchyLevel | None:
    """Get billing entity archetypes

    Args:
        uuid (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevel

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date

    Returns:
        ApiBillingHierarchyLevel | None
    """

    # Extract request parameters from generated function
    kwargs = get_archetypes._get_kwargs(uuid=uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevel.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_archetypes_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date
) -> Response[ApiBillingHierarchyLevel]:
    """Get billing entity archetypes

    Args:
        uuid (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevel]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date

    Returns:
        Response[ApiBillingHierarchyLevel]
    """

    # Extract request parameters from generated function
    kwargs = get_archetypes._get_kwargs(uuid=uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevel | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevel:
        parsed = ApiBillingHierarchyLevel.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_archetypes_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date
) -> ApiBillingHierarchyLevel | None:
    """Get billing entity archetypes

    Args:
        uuid (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevel

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date

    Returns:
        ApiBillingHierarchyLevel | None
    """

    # Extract request parameters from generated function
    kwargs = get_archetypes._get_kwargs(uuid=uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevel.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def delete_billing_hierarchy_by_uuid_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date
) -> Response[ApiBillingHierarchy | ResponseError]:
    """Mark billing hierarchy as deleted

    Args:
        uuid (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiBillingHierarchy, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date

    Returns:
        Response[ApiBillingHierarchy | ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = delete_billing_hierarchy_by_uuid._get_kwargs(uuid=uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_billing_hierarchy_by_uuid_sync(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date
) -> ApiBillingHierarchy | ResponseError | None:
    """Mark billing hierarchy as deleted

    Args:
        uuid (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiBillingHierarchy, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date

    Returns:
        ApiBillingHierarchy | ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = delete_billing_hierarchy_by_uuid._get_kwargs(uuid=uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def delete_billing_hierarchy_by_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date
) -> Response[ApiBillingHierarchy | ResponseError]:
    """Mark billing hierarchy as deleted

    Args:
        uuid (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiBillingHierarchy, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date

    Returns:
        Response[ApiBillingHierarchy | ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = delete_billing_hierarchy_by_uuid._get_kwargs(uuid=uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_billing_hierarchy_by_uuid_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date
) -> ApiBillingHierarchy | ResponseError | None:
    """Mark billing hierarchy as deleted

    Args:
        uuid (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiBillingHierarchy, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date

    Returns:
        ApiBillingHierarchy | ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = delete_billing_hierarchy_by_uuid._get_kwargs(uuid=uuid, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_billing_hierarchy_children_of_entity_sync_detailed(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str,
    date: datetime.date
) -> Response[ResponseError]:
    """Get hierarchy children of billing entity

    Args:
        entityuuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str
        date: datetime.date

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_children_of_entity._get_kwargs(entityuuid=entityuuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_children_of_entity_sync(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str,
    date: datetime.date
) -> ResponseError | None:
    """Get hierarchy children of billing entity

    Args:
        entityuuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str
        date: datetime.date

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_children_of_entity._get_kwargs(entityuuid=entityuuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_children_of_entity_asyncio_detailed(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str,
    date: datetime.date
) -> Response[ResponseError]:
    """Get hierarchy children of billing entity

    Args:
        entityuuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str
        date: datetime.date

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_children_of_entity._get_kwargs(entityuuid=entityuuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_children_of_entity_asyncio(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str,
    date: datetime.date
) -> ResponseError | None:
    """Get hierarchy children of billing entity

    Args:
        entityuuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str
        date: datetime.date

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_children_of_entity._get_kwargs(entityuuid=entityuuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_effective_billing_hierarchy_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    type_: str,
    date: datetime.date
) -> Response[ResponseError]:
    """Get the billing hierarchy node effective for the billing entity on the as-of date

    Args:
        billing_entity_uuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        type_: str
        date: datetime.date

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_effective_billing_hierarchy._get_kwargs(billing_entity_uuid=billing_entity_uuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_effective_billing_hierarchy_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    type_: str,
    date: datetime.date
) -> ResponseError | None:
    """Get the billing hierarchy node effective for the billing entity on the as-of date

    Args:
        billing_entity_uuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        type_: str
        date: datetime.date

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_effective_billing_hierarchy._get_kwargs(billing_entity_uuid=billing_entity_uuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_effective_billing_hierarchy_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    type_: str,
    date: datetime.date
) -> Response[ResponseError]:
    """Get the billing hierarchy node effective for the billing entity on the as-of date

    Args:
        billing_entity_uuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        type_: str
        date: datetime.date

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_effective_billing_hierarchy._get_kwargs(billing_entity_uuid=billing_entity_uuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_effective_billing_hierarchy_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    type_: str,
    date: datetime.date
) -> ResponseError | None:
    """Get the billing hierarchy node effective for the billing entity on the as-of date

    Args:
        billing_entity_uuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        type_: str
        date: datetime.date

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_effective_billing_hierarchy._get_kwargs(billing_entity_uuid=billing_entity_uuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchies_sync_detailed(
    *,
    client: StolonClient,
    type_: str,
    date: datetime.date,
    name: str
) -> Response[ResponseError]:
    """Get billing hierarchies by name or entity uuid

    Args:
        type_ (str):
        date (datetime.date):
        name (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        date: datetime.date
        name: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchies._get_kwargs(type_=type_, date=date, name=name)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchies_sync(
    *,
    client: StolonClient,
    type_: str,
    date: datetime.date,
    name: str
) -> ResponseError | None:
    """Get billing hierarchies by name or entity uuid

    Args:
        type_ (str):
        date (datetime.date):
        name (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        date: datetime.date
        name: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchies._get_kwargs(type_=type_, date=date, name=name)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchies_asyncio_detailed(
    *,
    client: StolonClient,
    type_: str,
    date: datetime.date,
    name: str
) -> Response[ResponseError]:
    """Get billing hierarchies by name or entity uuid

    Args:
        type_ (str):
        date (datetime.date):
        name (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        date: datetime.date
        name: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchies._get_kwargs(type_=type_, date=date, name=name)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchies_asyncio(
    *,
    client: StolonClient,
    type_: str,
    date: datetime.date,
    name: str
) -> ResponseError | None:
    """Get billing hierarchies by name or entity uuid

    Args:
        type_ (str):
        date (datetime.date):
        name (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        date: datetime.date
        name: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchies._get_kwargs(type_=type_, date=date, name=name)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_parents_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiBillingHierarchyLevel]:
    """Get parents of billing hierarchy

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevel]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiBillingHierarchyLevel]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parents._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevel | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevel:
        parsed = ApiBillingHierarchyLevel.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_parents_sync(
    *,
    client: StolonClient,
    uuid: str
) -> ApiBillingHierarchyLevel | None:
    """Get parents of billing hierarchy

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevel

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiBillingHierarchyLevel | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parents._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevel.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_parents_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiBillingHierarchyLevel]:
    """Get parents of billing hierarchy

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevel]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiBillingHierarchyLevel]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parents._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevel | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevel:
        parsed = ApiBillingHierarchyLevel.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_parents_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> ApiBillingHierarchyLevel | None:
    """Get parents of billing hierarchy

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevel

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiBillingHierarchyLevel | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parents._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevel.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_child_nodes_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: datetime.date,
    entity_types: Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]] = UNSET
) -> Response[ApiBillingHierarchyLevelNode]:
    """Get child nodes of billing entity for specified hierarchy type

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        entity_types (Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevelNode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date
        entity_types: Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]]

    Returns:
        Response[ApiBillingHierarchyLevelNode]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_child_nodes._get_kwargs(billing_entity_uuid=billing_entity_uuid, hierarchy_type=hierarchy_type, date=date, entity_types=entity_types)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevelNode | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevelNode:
        parsed = ApiBillingHierarchyLevelNode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_child_nodes_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: datetime.date,
    entity_types: Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]] = UNSET
) -> ApiBillingHierarchyLevelNode | None:
    """Get child nodes of billing entity for specified hierarchy type

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        entity_types (Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevelNode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date
        entity_types: Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]]

    Returns:
        ApiBillingHierarchyLevelNode | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_child_nodes._get_kwargs(billing_entity_uuid=billing_entity_uuid, hierarchy_type=hierarchy_type, date=date, entity_types=entity_types)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevelNode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_child_nodes_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: datetime.date,
    entity_types: Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]] = UNSET
) -> Response[ApiBillingHierarchyLevelNode]:
    """Get child nodes of billing entity for specified hierarchy type

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        entity_types (Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevelNode]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date
        entity_types: Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]]

    Returns:
        Response[ApiBillingHierarchyLevelNode]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_child_nodes._get_kwargs(billing_entity_uuid=billing_entity_uuid, hierarchy_type=hierarchy_type, date=date, entity_types=entity_types)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevelNode | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevelNode:
        parsed = ApiBillingHierarchyLevelNode.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_child_nodes_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: datetime.date,
    entity_types: Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]] = UNSET
) -> ApiBillingHierarchyLevelNode | None:
    """Get child nodes of billing entity for specified hierarchy type

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        entity_types (Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevelNode

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date
        entity_types: Union[Unset, list[GetBillingHierarchyChildNodesEntityTypesItem]]

    Returns:
        ApiBillingHierarchyLevelNode | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_child_nodes._get_kwargs(billing_entity_uuid=billing_entity_uuid, hierarchy_type=hierarchy_type, date=date, entity_types=entity_types)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevelNode.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_billing_hierarchy_sync_detailed(
    *,
    client: StolonClient,
    body: ApiBillingHierarchy
) -> Response[ResponseError]:
    """Create billing hierarchy

    Args:
        body (ApiBillingHierarchy):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiBillingHierarchy

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = create_billing_hierarchy._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_billing_hierarchy_sync(
    *,
    client: StolonClient,
    body: ApiBillingHierarchy
) -> ResponseError | None:
    """Create billing hierarchy

    Args:
        body (ApiBillingHierarchy):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiBillingHierarchy

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = create_billing_hierarchy._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_billing_hierarchy_asyncio_detailed(
    *,
    client: StolonClient,
    body: ApiBillingHierarchy
) -> Response[ResponseError]:
    """Create billing hierarchy

    Args:
        body (ApiBillingHierarchy):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiBillingHierarchy

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = create_billing_hierarchy._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_billing_hierarchy_asyncio(
    *,
    client: StolonClient,
    body: ApiBillingHierarchy
) -> ResponseError | None:
    """Create billing hierarchy

    Args:
        body (ApiBillingHierarchy):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiBillingHierarchy

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = create_billing_hierarchy._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_parents_of_entity_sync_detailed(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str,
    date: datetime.date
) -> Response[ApiBillingHierarchyLevel]:
    """Get hierarchy parents of billing entity

    Args:
        entityuuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevel]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str
        date: datetime.date

    Returns:
        Response[ApiBillingHierarchyLevel]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parents_of_entity._get_kwargs(entityuuid=entityuuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevel | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevel:
        parsed = ApiBillingHierarchyLevel.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_parents_of_entity_sync(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str,
    date: datetime.date
) -> ApiBillingHierarchyLevel | None:
    """Get hierarchy parents of billing entity

    Args:
        entityuuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevel

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str
        date: datetime.date

    Returns:
        ApiBillingHierarchyLevel | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parents_of_entity._get_kwargs(entityuuid=entityuuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevel.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_parents_of_entity_asyncio_detailed(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str,
    date: datetime.date
) -> Response[ApiBillingHierarchyLevel]:
    """Get hierarchy parents of billing entity

    Args:
        entityuuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyLevel]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str
        date: datetime.date

    Returns:
        Response[ApiBillingHierarchyLevel]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parents_of_entity._get_kwargs(entityuuid=entityuuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBillingHierarchyLevel | None
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyLevel:
        parsed = ApiBillingHierarchyLevel.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_parents_of_entity_asyncio(
    *,
    client: StolonClient,
    entityuuid: str,
    type_: str,
    date: datetime.date
) -> ApiBillingHierarchyLevel | None:
    """Get hierarchy parents of billing entity

    Args:
        entityuuid (str):
        type_ (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyLevel

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                entityuuid: str
        type_: str
        date: datetime.date

    Returns:
        ApiBillingHierarchyLevel | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_parents_of_entity._get_kwargs(entityuuid=entityuuid, type_=type_, date=date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyLevel.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_merchant_children_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date,
    name: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[ResponseError]:
    """Get immediate merchant children of billing hierarchy

    Args:
        uuid (str):
        date (datetime.date):
        name (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date
        name: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_merchant_children._get_kwargs(uuid=uuid, date=date, name=name, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_merchant_children_sync(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date,
    name: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> ResponseError | None:
    """Get immediate merchant children of billing hierarchy

    Args:
        uuid (str):
        date (datetime.date):
        name (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date
        name: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_merchant_children._get_kwargs(uuid=uuid, date=date, name=name, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_billing_hierarchy_merchant_children_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date,
    name: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[ResponseError]:
    """Get immediate merchant children of billing hierarchy

    Args:
        uuid (str):
        date (datetime.date):
        name (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date
        name: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_merchant_children._get_kwargs(uuid=uuid, date=date, name=name, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_billing_hierarchy_merchant_children_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    date: datetime.date,
    name: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> ResponseError | None:
    """Get immediate merchant children of billing hierarchy

    Args:
        uuid (str):
        date (datetime.date):
        name (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        date: datetime.date
        name: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_merchant_children._get_kwargs(uuid=uuid, date=date, name=name, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

