"""
Proxied wrapper functions for billing-bookkeeper dev - lexi_intent_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.activation_rule import (
    ActivationRule,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.conditional_rule import (
    ConditionalRule,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.lexi_attr_intent import (
    LexiAttrIntent,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.simple_rule import SimpleRule
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.unit_rule import UnitRule
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def apply_rules_sync_detailed(
    *, client: StolonClient, lexicon: str, dry_run: Union[Unset, bool] = UNSET
) -> Response[int]:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        dry_run: Union[Unset, bool]

    Returns:
        Response[int]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "dry_run": serialize_argument(dry_run)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.apply_rules",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_rules_sync(*, client: StolonClient, lexicon: str, dry_run: Union[Unset, bool] = UNSET) -> int | None:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        dry_run: Union[Unset, bool]

    Returns:
        int | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "dry_run": serialize_argument(dry_run)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.apply_rules",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_rules_asyncio_detailed(
    *, client: StolonClient, lexicon: str, dry_run: Union[Unset, bool] = UNSET
) -> Response[int]:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        dry_run: Union[Unset, bool]

    Returns:
        Response[int]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "dry_run": serialize_argument(dry_run)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.apply_rules",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_rules_asyncio(*, client: StolonClient, lexicon: str, dry_run: Union[Unset, bool] = UNSET) -> int | None:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        dry_run: Union[Unset, bool]

    Returns:
        int | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"lexicon": serialize_argument(lexicon), "dry_run": serialize_argument(dry_run)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.apply_rules",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_rules_from_input_sync_detailed(
    *, client: StolonClient, lexicon: str, body: list[str], dry_run: Union[Unset, bool] = UNSET
) -> Response[int]:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        body: list[str]
        dry_run: Union[Unset, bool]

    Returns:
        Response[int]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "lexicon": serialize_argument(lexicon),
        "body": serialize_argument(body),
        "dry_run": serialize_argument(dry_run),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.apply_rules_from_input",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_rules_from_input_sync(
    *, client: StolonClient, lexicon: str, body: list[str], dry_run: Union[Unset, bool] = UNSET
) -> int | None:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        body: list[str]
        dry_run: Union[Unset, bool]

    Returns:
        int | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "lexicon": serialize_argument(lexicon),
        "body": serialize_argument(body),
        "dry_run": serialize_argument(dry_run),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.apply_rules_from_input",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_rules_from_input_asyncio_detailed(
    *, client: StolonClient, lexicon: str, body: list[str], dry_run: Union[Unset, bool] = UNSET
) -> Response[int]:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        body: list[str]
        dry_run: Union[Unset, bool]

    Returns:
        Response[int]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "lexicon": serialize_argument(lexicon),
        "body": serialize_argument(body),
        "dry_run": serialize_argument(dry_run),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.apply_rules_from_input",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_rules_from_input_asyncio(
    *, client: StolonClient, lexicon: str, body: list[str], dry_run: Union[Unset, bool] = UNSET
) -> int | None:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                lexicon: str
        body: list[str]
        dry_run: Union[Unset, bool]

    Returns:
        int | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "lexicon": serialize_argument(lexicon),
        "body": serialize_argument(body),
        "dry_run": serialize_argument(dry_run),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.apply_rules_from_input",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[int]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_conditional_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    body: ConditionalRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ConditionalRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ConditionalRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_conditional_rule_intent",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_conditional_rule_intent_sync(
    *,
    client: StolonClient,
    body: ConditionalRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ConditionalRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ConditionalRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_conditional_rule_intent",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_conditional_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    body: ConditionalRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ConditionalRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ConditionalRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_conditional_rule_intent",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_conditional_rule_intent_asyncio(
    *,
    client: StolonClient,
    body: ConditionalRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ConditionalRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ConditionalRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_conditional_rule_intent",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_rule_intent_sync_detailed(
    *, client: StolonClient, uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.delete_rule_intent",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_rule_intent_sync(
    *, client: StolonClient, uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.delete_rule_intent",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_rule_intent_asyncio_detailed(
    *, client: StolonClient, uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.delete_rule_intent",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_rule_intent_asyncio(
    *, client: StolonClient, uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.delete_rule_intent",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_unit_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    body: UnitRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (UnitRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: UnitRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_unit_rule_intent",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_unit_rule_intent_sync(
    *,
    client: StolonClient,
    body: UnitRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (UnitRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: UnitRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_unit_rule_intent",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_unit_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    body: UnitRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (UnitRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: UnitRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_unit_rule_intent",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_unit_rule_intent_asyncio(
    *,
    client: StolonClient,
    body: UnitRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (UnitRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: UnitRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_unit_rule_intent",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_activation_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    body: ActivationRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ActivationRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ActivationRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_activation_rule_intent",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_activation_rule_intent_sync(
    *,
    client: StolonClient,
    body: ActivationRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ActivationRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ActivationRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_activation_rule_intent",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_activation_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    body: ActivationRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ActivationRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ActivationRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_activation_rule_intent",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_activation_rule_intent_asyncio(
    *,
    client: StolonClient,
    body: ActivationRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ActivationRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ActivationRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_activation_rule_intent",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_simple_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    body: SimpleRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (SimpleRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: SimpleRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_simple_rule_intent",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_simple_rule_intent_sync(
    *,
    client: StolonClient,
    body: SimpleRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (SimpleRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: SimpleRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_simple_rule_intent",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_simple_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    body: SimpleRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (SimpleRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: SimpleRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_simple_rule_intent",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_simple_rule_intent_asyncio(
    *,
    client: StolonClient,
    body: SimpleRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (SimpleRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: SimpleRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="lexi_intent_controller.create_simple_rule_intent",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["LexiAttrIntent"]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
