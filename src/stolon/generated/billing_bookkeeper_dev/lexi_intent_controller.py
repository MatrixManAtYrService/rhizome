"""
Proxied wrapper functions for billing-bookkeeper dev - lexi_intent_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_intent_controller import apply_rules
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_intent_controller import apply_rules_from_input
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_intent_controller import create_activation_rule_intent
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_intent_controller import create_conditional_rule_intent
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_intent_controller import create_simple_rule_intent
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_intent_controller import create_unit_rule_intent
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.lexi_intent_controller import delete_rule_intent
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.activation_rule import ActivationRule
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.conditional_rule import ConditionalRule
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.lexi_attr_intent import LexiAttrIntent
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.simple_rule import SimpleRule
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.unit_rule import UnitRule
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import json


def apply_rules_sync_detailed(
    *,
    client: StolonClient,
    lexicon: str,
    dry_run: Union[Unset, bool] = UNSET
) -> Response[int]:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        dry_run: Union[Unset, bool]

    Returns:
        Response[int]
    """

    # Extract request parameters from generated function
    kwargs = apply_rules._get_kwargs(lexicon=lexicon, dry_run=dry_run)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def apply_rules_sync(
    *,
    client: StolonClient,
    lexicon: str,
    dry_run: Union[Unset, bool] = UNSET
) -> int | None:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        dry_run: Union[Unset, bool]

    Returns:
        int | None
    """

    # Extract request parameters from generated function
    kwargs = apply_rules._get_kwargs(lexicon=lexicon, dry_run=dry_run)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def apply_rules_asyncio_detailed(
    *,
    client: StolonClient,
    lexicon: str,
    dry_run: Union[Unset, bool] = UNSET
) -> Response[int]:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        dry_run: Union[Unset, bool]

    Returns:
        Response[int]
    """

    # Extract request parameters from generated function
    kwargs = apply_rules._get_kwargs(lexicon=lexicon, dry_run=dry_run)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def apply_rules_asyncio(
    *,
    client: StolonClient,
    lexicon: str,
    dry_run: Union[Unset, bool] = UNSET
) -> int | None:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        dry_run: Union[Unset, bool]

    Returns:
        int | None
    """

    # Extract request parameters from generated function
    kwargs = apply_rules._get_kwargs(lexicon=lexicon, dry_run=dry_run)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def apply_rules_from_input_sync_detailed(
    *,
    client: StolonClient,
    lexicon: str,
    body: list[str],
    dry_run: Union[Unset, bool] = UNSET
) -> Response[int]:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        body: list[str]
        dry_run: Union[Unset, bool]

    Returns:
        Response[int]
    """

    # Extract request parameters from generated function
    kwargs = apply_rules_from_input._get_kwargs(lexicon=lexicon, body=body, dry_run=dry_run)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def apply_rules_from_input_sync(
    *,
    client: StolonClient,
    lexicon: str,
    body: list[str],
    dry_run: Union[Unset, bool] = UNSET
) -> int | None:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        body: list[str]
        dry_run: Union[Unset, bool]

    Returns:
        int | None
    """

    # Extract request parameters from generated function
    kwargs = apply_rules_from_input._get_kwargs(lexicon=lexicon, body=body, dry_run=dry_run)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def apply_rules_from_input_asyncio_detailed(
    *,
    client: StolonClient,
    lexicon: str,
    body: list[str],
    dry_run: Union[Unset, bool] = UNSET
) -> Response[int]:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        body: list[str]
        dry_run: Union[Unset, bool]

    Returns:
        Response[int]
    """

    # Extract request parameters from generated function
    kwargs = apply_rules_from_input._get_kwargs(lexicon=lexicon, body=body, dry_run=dry_run)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def apply_rules_from_input_asyncio(
    *,
    client: StolonClient,
    lexicon: str,
    body: list[str],
    dry_run: Union[Unset, bool] = UNSET
) -> int | None:
    """Args:
        lexicon (str):
        dry_run (Union[Unset, bool]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                lexicon: str
        body: list[str]
        dry_run: Union[Unset, bool]

    Returns:
        int | None
    """

    # Extract request parameters from generated function
    kwargs = apply_rules_from_input._get_kwargs(lexicon=lexicon, body=body, dry_run=dry_run)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_conditional_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    body: ConditionalRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ConditionalRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ConditionalRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = create_conditional_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_conditional_rule_intent_sync(
    *,
    client: StolonClient,
    body: ConditionalRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ConditionalRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ConditionalRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_conditional_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_conditional_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    body: ConditionalRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ConditionalRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ConditionalRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = create_conditional_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_conditional_rule_intent_asyncio(
    *,
    client: StolonClient,
    body: ConditionalRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ConditionalRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ConditionalRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_conditional_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def delete_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = delete_rule_intent._get_kwargs(uuid=uuid, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_rule_intent_sync(
    *,
    client: StolonClient,
    uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = delete_rule_intent._get_kwargs(uuid=uuid, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def delete_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = delete_rule_intent._get_kwargs(uuid=uuid, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_rule_intent_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = delete_rule_intent._get_kwargs(uuid=uuid, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_unit_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    body: UnitRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (UnitRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: UnitRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = create_unit_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_unit_rule_intent_sync(
    *,
    client: StolonClient,
    body: UnitRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (UnitRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: UnitRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_unit_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_unit_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    body: UnitRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (UnitRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: UnitRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = create_unit_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_unit_rule_intent_asyncio(
    *,
    client: StolonClient,
    body: UnitRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (UnitRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: UnitRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_unit_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_activation_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    body: ActivationRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ActivationRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ActivationRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = create_activation_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_activation_rule_intent_sync(
    *,
    client: StolonClient,
    body: ActivationRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ActivationRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ActivationRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_activation_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_activation_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    body: ActivationRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ActivationRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ActivationRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = create_activation_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_activation_rule_intent_asyncio(
    *,
    client: StolonClient,
    body: ActivationRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (ActivationRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ActivationRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_activation_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_simple_rule_intent_sync_detailed(
    *,
    client: StolonClient,
    body: SimpleRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (SimpleRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: SimpleRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = create_simple_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_simple_rule_intent_sync(
    *,
    client: StolonClient,
    body: SimpleRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (SimpleRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: SimpleRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_simple_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_simple_rule_intent_asyncio_detailed(
    *,
    client: StolonClient,
    body: SimpleRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[list["LexiAttrIntent"]]:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (SimpleRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['LexiAttrIntent']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: SimpleRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[list["LexiAttrIntent"]]
    """

    # Extract request parameters from generated function
    kwargs = create_simple_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_simple_rule_intent_asyncio(
    *,
    client: StolonClient,
    body: SimpleRule,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> list["LexiAttrIntent"] | None:
    """Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        body (SimpleRule):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['LexiAttrIntent']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: SimpleRule
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        list["LexiAttrIntent"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_simple_rule_intent._get_kwargs(body=body, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None

