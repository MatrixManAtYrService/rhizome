"""
Proxied wrapper functions for billing-bookkeeper dev - plan_action_fee_rate.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_fee_descriptions_for_merchant_plans_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    effective_date: Union[Unset, datetime.date] = UNSET,
    currency: Union[Unset, str] = UNSET,
    accept_language: Union[Unset, str] = UNSET,
) -> Response[ResponseError]:
    """Get fee descriptions for the provided plans

    Args:
        uuid (str):
        plan_uuids (list[str]):
        effective_date (Union[Unset, datetime.date]):
        currency (Union[Unset, str]):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        plan_uuids: list[str]
        effective_date: Union[Unset, datetime.date]
        currency: Union[Unset, str]
        accept_language: Union[Unset, str]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "plan_uuids": serialize_argument(plan_uuids),
        "effective_date": serialize_argument(effective_date),
        "currency": serialize_argument(currency),
        "accept_language": serialize_argument(accept_language),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_action_fee_rate.get_fee_descriptions_for_merchant_plans",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_descriptions_for_merchant_plans_sync(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    effective_date: Union[Unset, datetime.date] = UNSET,
    currency: Union[Unset, str] = UNSET,
    accept_language: Union[Unset, str] = UNSET,
) -> ResponseError | None:
    """Get fee descriptions for the provided plans

    Args:
        uuid (str):
        plan_uuids (list[str]):
        effective_date (Union[Unset, datetime.date]):
        currency (Union[Unset, str]):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        plan_uuids: list[str]
        effective_date: Union[Unset, datetime.date]
        currency: Union[Unset, str]
        accept_language: Union[Unset, str]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "plan_uuids": serialize_argument(plan_uuids),
        "effective_date": serialize_argument(effective_date),
        "currency": serialize_argument(currency),
        "accept_language": serialize_argument(accept_language),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_action_fee_rate.get_fee_descriptions_for_merchant_plans",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_descriptions_for_merchant_plans_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    effective_date: Union[Unset, datetime.date] = UNSET,
    currency: Union[Unset, str] = UNSET,
    accept_language: Union[Unset, str] = UNSET,
) -> Response[ResponseError]:
    """Get fee descriptions for the provided plans

    Args:
        uuid (str):
        plan_uuids (list[str]):
        effective_date (Union[Unset, datetime.date]):
        currency (Union[Unset, str]):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        plan_uuids: list[str]
        effective_date: Union[Unset, datetime.date]
        currency: Union[Unset, str]
        accept_language: Union[Unset, str]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "plan_uuids": serialize_argument(plan_uuids),
        "effective_date": serialize_argument(effective_date),
        "currency": serialize_argument(currency),
        "accept_language": serialize_argument(accept_language),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_action_fee_rate.get_fee_descriptions_for_merchant_plans",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_descriptions_for_merchant_plans_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    effective_date: Union[Unset, datetime.date] = UNSET,
    currency: Union[Unset, str] = UNSET,
    accept_language: Union[Unset, str] = UNSET,
) -> ResponseError | None:
    """Get fee descriptions for the provided plans

    Args:
        uuid (str):
        plan_uuids (list[str]):
        effective_date (Union[Unset, datetime.date]):
        currency (Union[Unset, str]):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        plan_uuids: list[str]
        effective_date: Union[Unset, datetime.date]
        currency: Union[Unset, str]
        accept_language: Union[Unset, str]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "plan_uuids": serialize_argument(plan_uuids),
        "effective_date": serialize_argument(effective_date),
        "currency": serialize_argument(currency),
        "accept_language": serialize_argument(accept_language),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_action_fee_rate.get_fee_descriptions_for_merchant_plans",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
