"""
Proxied wrapper functions for billing-bookkeeper dev - plan_action_fee_rate.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.plan_action_fee_rate import get_fee_descriptions_for_merchant_plans
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import ResponseError
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import datetime
import json


def get_fee_descriptions_for_merchant_plans_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    effective_date: Union[Unset, datetime.date] = UNSET,
    currency: Union[Unset, str] = UNSET,
    accept_language: Union[Unset, str] = UNSET
) -> Response[ResponseError]:
    """Get fee descriptions for the provided plans

    Args:
        uuid (str):
        plan_uuids (list[str]):
        effective_date (Union[Unset, datetime.date]):
        currency (Union[Unset, str]):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        plan_uuids: list[str]
        effective_date: Union[Unset, datetime.date]
        currency: Union[Unset, str]
        accept_language: Union[Unset, str]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_descriptions_for_merchant_plans._get_kwargs(uuid=uuid, plan_uuids=plan_uuids, effective_date=effective_date, currency=currency, accept_language=accept_language)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_descriptions_for_merchant_plans_sync(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    effective_date: Union[Unset, datetime.date] = UNSET,
    currency: Union[Unset, str] = UNSET,
    accept_language: Union[Unset, str] = UNSET
) -> ResponseError | None:
    """Get fee descriptions for the provided plans

    Args:
        uuid (str):
        plan_uuids (list[str]):
        effective_date (Union[Unset, datetime.date]):
        currency (Union[Unset, str]):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        plan_uuids: list[str]
        effective_date: Union[Unset, datetime.date]
        currency: Union[Unset, str]
        accept_language: Union[Unset, str]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_descriptions_for_merchant_plans._get_kwargs(uuid=uuid, plan_uuids=plan_uuids, effective_date=effective_date, currency=currency, accept_language=accept_language)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_fee_descriptions_for_merchant_plans_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    effective_date: Union[Unset, datetime.date] = UNSET,
    currency: Union[Unset, str] = UNSET,
    accept_language: Union[Unset, str] = UNSET
) -> Response[ResponseError]:
    """Get fee descriptions for the provided plans

    Args:
        uuid (str):
        plan_uuids (list[str]):
        effective_date (Union[Unset, datetime.date]):
        currency (Union[Unset, str]):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        plan_uuids: list[str]
        effective_date: Union[Unset, datetime.date]
        currency: Union[Unset, str]
        accept_language: Union[Unset, str]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_descriptions_for_merchant_plans._get_kwargs(uuid=uuid, plan_uuids=plan_uuids, effective_date=effective_date, currency=currency, accept_language=accept_language)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_descriptions_for_merchant_plans_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    effective_date: Union[Unset, datetime.date] = UNSET,
    currency: Union[Unset, str] = UNSET,
    accept_language: Union[Unset, str] = UNSET
) -> ResponseError | None:
    """Get fee descriptions for the provided plans

    Args:
        uuid (str):
        plan_uuids (list[str]):
        effective_date (Union[Unset, datetime.date]):
        currency (Union[Unset, str]):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        plan_uuids: list[str]
        effective_date: Union[Unset, datetime.date]
        currency: Union[Unset, str]
        accept_language: Union[Unset, str]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_descriptions_for_merchant_plans._get_kwargs(uuid=uuid, plan_uuids=plan_uuids, effective_date=effective_date, currency=currency, accept_language=accept_language)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

