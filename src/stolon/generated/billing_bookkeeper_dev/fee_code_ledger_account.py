"""
Proxied wrapper functions for billing-bookkeeper dev - fee_code_ledger_account.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_fee_code_ledger_account import (
    ApiFeeCodeLedgerAccount,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_ledger_account import (
    ApiLedgerAccount,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def resolve_fee_code_to_ledger_account_mapping_sync_detailed(
    *, client: StolonClient, fee_category: str, fee_code: str, date: Union[Unset, datetime.date] = UNSET
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping

    Args:
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: str
        date: Union[Unset, datetime.date]

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.resolve_fee_code_to_ledger_account_mapping",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_fee_code_to_ledger_account_mapping_sync(
    *, client: StolonClient, fee_category: str, fee_code: str, date: Union[Unset, datetime.date] = UNSET
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping

    Args:
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: str
        date: Union[Unset, datetime.date]

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.resolve_fee_code_to_ledger_account_mapping",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_fee_code_to_ledger_account_mapping_asyncio_detailed(
    *, client: StolonClient, fee_category: str, fee_code: str, date: Union[Unset, datetime.date] = UNSET
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping

    Args:
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: str
        date: Union[Unset, datetime.date]

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.resolve_fee_code_to_ledger_account_mapping",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_fee_code_to_ledger_account_mapping_asyncio(
    *, client: StolonClient, fee_category: str, fee_code: str, date: Union[Unset, datetime.date] = UNSET
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping

    Args:
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: str
        date: Union[Unset, datetime.date]

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.resolve_fee_code_to_ledger_account_mapping",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_ledger_account_key_sync_detailed(
    *,
    client: StolonClient,
    ledger_account_key: str,
    date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        ledger_account_key (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_account_key: str
        date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_account_key": serialize_argument(ledger_account_key),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_ledger_account_key",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_ledger_account_key_sync(
    *,
    client: StolonClient,
    ledger_account_key: str,
    date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        ledger_account_key (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_account_key: str
        date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_account_key": serialize_argument(ledger_account_key),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_ledger_account_key",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_ledger_account_key_asyncio_detailed(
    *,
    client: StolonClient,
    ledger_account_key: str,
    date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        ledger_account_key (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_account_key: str
        date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_account_key": serialize_argument(ledger_account_key),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_ledger_account_key",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_ledger_account_key_asyncio(
    *,
    client: StolonClient,
    ledger_account_key: str,
    date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        ledger_account_key (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_account_key: str
        date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_account_key": serialize_argument(ledger_account_key),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_ledger_account_key",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_account_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Get a fee-code-to-ledger-account mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_account_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_account_by_uuid_sync(
    *, client: StolonClient, uuid: str
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Get a fee-code-to-ledger-account mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_account_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_account_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Get a fee-code-to-ledger-account mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_account_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_account_by_uuid_asyncio(
    *, client: StolonClient, uuid: str
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Get a fee-code-to-ledger-account mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_account_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_fee_code_ledger_account_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError | str]:
    """Delete a fee-code-to-ledger-account mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, str]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError | str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.delete_fee_code_ledger_account_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ResponseError, str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_fee_code_ledger_account_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | str | None:
    """Delete a fee-code-to-ledger-account mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.delete_fee_code_ledger_account_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ResponseError, str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_fee_code_ledger_account_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError | str]:
    """Delete a fee-code-to-ledger-account mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, str]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError | str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.delete_fee_code_ledger_account_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ResponseError, str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_fee_code_ledger_account_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | str | None:
    """Delete a fee-code-to-ledger-account mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.delete_fee_code_ledger_account_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ResponseError, str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date_sync_detailed(
    *,
    client: StolonClient,
    fee_category: str,
    fee_code: Union[Unset, str] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Get a fee-code-to-ledger-account mapping using the fee category, fee code, and as-of date

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: Union[Unset, str]
        date: Union[Unset, datetime.date]

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date_sync(
    *,
    client: StolonClient,
    fee_category: str,
    fee_code: Union[Unset, str] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Get a fee-code-to-ledger-account mapping using the fee category, fee code, and as-of date

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: Union[Unset, str]
        date: Union[Unset, datetime.date]

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date_asyncio_detailed(
    *,
    client: StolonClient,
    fee_category: str,
    fee_code: Union[Unset, str] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Get a fee-code-to-ledger-account mapping using the fee category, fee code, and as-of date

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: Union[Unset, str]
        date: Union[Unset, datetime.date]

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date_asyncio(
    *,
    client: StolonClient,
    fee_category: str,
    fee_code: Union[Unset, str] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Get a fee-code-to-ledger-account mapping using the fee category, fee code, and as-of date

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: Union[Unset, str]
        date: Union[Unset, datetime.date]

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    fee_category: str,
    fee_code: str,
    date: Union[Unset, datetime.date] = UNSET,
) -> Response[ApiLedgerAccount]:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping for a billing
    entity

    Args:
        billing_entity_uuid (str):
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiLedgerAccount]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        fee_category: str
        fee_code: str
        date: Union[Unset, datetime.date]

    Returns:
        Response[ApiLedgerAccount]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiLedgerAccount]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    fee_category: str,
    fee_code: str,
    date: Union[Unset, datetime.date] = UNSET,
) -> ApiLedgerAccount | None:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping for a billing
    entity

    Args:
        billing_entity_uuid (str):
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiLedgerAccount

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        fee_category: str
        fee_code: str
        date: Union[Unset, datetime.date]

    Returns:
        ApiLedgerAccount | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiLedgerAccount]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    fee_category: str,
    fee_code: str,
    date: Union[Unset, datetime.date] = UNSET,
) -> Response[ApiLedgerAccount]:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping for a billing
    entity

    Args:
        billing_entity_uuid (str):
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiLedgerAccount]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        fee_category: str
        fee_code: str
        date: Union[Unset, datetime.date]

    Returns:
        Response[ApiLedgerAccount]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiLedgerAccount]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    fee_category: str,
    fee_code: str,
    date: Union[Unset, datetime.date] = UNSET,
) -> ApiLedgerAccount | None:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping for a billing
    entity

    Args:
        billing_entity_uuid (str):
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiLedgerAccount

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        fee_category: str
        fee_code: str
        date: Union[Unset, datetime.date]

    Returns:
        ApiLedgerAccount | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiLedgerAccount]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_fee_code_ledger_account_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiFeeCodeLedgerAccount
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Update a fee-code-to-ledger-account mapping

    Args:
        uuid (str):
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiFeeCodeLedgerAccount

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.update_fee_code_ledger_account",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_fee_code_ledger_account_sync(
    *, client: StolonClient, uuid: str, body: ApiFeeCodeLedgerAccount
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Update a fee-code-to-ledger-account mapping

    Args:
        uuid (str):
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiFeeCodeLedgerAccount

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.update_fee_code_ledger_account",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_fee_code_ledger_account_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiFeeCodeLedgerAccount
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Update a fee-code-to-ledger-account mapping

    Args:
        uuid (str):
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiFeeCodeLedgerAccount

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.update_fee_code_ledger_account",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_fee_code_ledger_account_asyncio(
    *, client: StolonClient, uuid: str, body: ApiFeeCodeLedgerAccount
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Update a fee-code-to-ledger-account mapping

    Args:
        uuid (str):
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiFeeCodeLedgerAccount

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.update_fee_code_ledger_account",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_fee_code_ledger_account_sync_detailed(
    *, client: StolonClient, body: ApiFeeCodeLedgerAccount
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Create a fee-code-to-ledger-account mapping

    Args:
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiFeeCodeLedgerAccount

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.create_fee_code_ledger_account",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_fee_code_ledger_account_sync(
    *, client: StolonClient, body: ApiFeeCodeLedgerAccount
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Create a fee-code-to-ledger-account mapping

    Args:
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiFeeCodeLedgerAccount

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.create_fee_code_ledger_account",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_fee_code_ledger_account_asyncio_detailed(
    *, client: StolonClient, body: ApiFeeCodeLedgerAccount
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Create a fee-code-to-ledger-account mapping

    Args:
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiFeeCodeLedgerAccount

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.create_fee_code_ledger_account",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_fee_code_ledger_account_asyncio(
    *, client: StolonClient, body: ApiFeeCodeLedgerAccount
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Create a fee-code-to-ledger-account mapping

    Args:
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiFeeCodeLedgerAccount

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.create_fee_code_ledger_account",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCodeLedgerAccount, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_fee_category_fee_code_sync_detailed(
    *,
    client: StolonClient,
    fee_category: str,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings using the from fee category and fee code, returning the
    mappings across effective dates

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_fee_category_fee_code",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_fee_category_fee_code_sync(
    *,
    client: StolonClient,
    fee_category: str,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings using the from fee category and fee code, returning the
    mappings across effective dates

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_fee_category_fee_code",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_fee_category_fee_code_asyncio_detailed(
    *,
    client: StolonClient,
    fee_category: str,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings using the from fee category and fee code, returning the
    mappings across effective dates

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_fee_category_fee_code",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_fee_category_fee_code_asyncio(
    *,
    client: StolonClient,
    fee_category: str,
    fee_code: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings using the from fee category and fee code, returning the
    mappings across effective dates

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_category: str
        fee_code: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_fee_category_fee_code",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_date_sync_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    ledger_account_key: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        date (datetime.date):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        ledger_account_key (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        ledger_account_key: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "ledger_account_key": serialize_argument(ledger_account_key),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_date_sync(
    *,
    client: StolonClient,
    date: datetime.date,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    ledger_account_key: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        date (datetime.date):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        ledger_account_key (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        ledger_account_key: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "ledger_account_key": serialize_argument(ledger_account_key),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_date_asyncio_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    ledger_account_key: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        date (datetime.date):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        ledger_account_key (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        ledger_account_key: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "ledger_account_key": serialize_argument(ledger_account_key),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_code_ledger_accounts_by_date_asyncio(
    *,
    client: StolonClient,
    date: datetime.date,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    ledger_account_key: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        date (datetime.date):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        ledger_account_key (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        ledger_account_key: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "ledger_account_key": serialize_argument(ledger_account_key),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_code_ledger_account.get_fee_code_ledger_accounts_by_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiFeeCodeLedgerAccount"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
