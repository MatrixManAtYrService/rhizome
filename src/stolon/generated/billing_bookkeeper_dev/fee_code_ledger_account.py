"""
Proxied wrapper functions for billing-bookkeeper dev - fee_code_ledger_account.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import create_fee_code_ledger_account
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import delete_fee_code_ledger_account_by_uuid
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import get_fee_code_ledger_account_by_uuid
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import get_fee_code_ledger_accounts_by_date
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import get_fee_code_ledger_accounts_by_fee_category_fee_code
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import get_fee_code_ledger_accounts_by_ledger_account_key
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import resolve_fee_code_to_ledger_account_mapping
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_code_ledger_account import update_fee_code_ledger_account
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_fee_code_ledger_account import ApiFeeCodeLedgerAccount
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_ledger_account import ApiLedgerAccount
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import ResponseError
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from typing import Any
import json


def resolve_fee_code_to_ledger_account_mapping_sync_detailed(
    *,
    client: StolonClient
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping

    Args:
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = resolve_fee_code_to_ledger_account_mapping._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def resolve_fee_code_to_ledger_account_mapping_sync(
    *,
    client: StolonClient
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping

    Args:
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = resolve_fee_code_to_ledger_account_mapping._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def resolve_fee_code_to_ledger_account_mapping_asyncio_detailed(
    *,
    client: StolonClient
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping

    Args:
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = resolve_fee_code_to_ledger_account_mapping._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def resolve_fee_code_to_ledger_account_mapping_asyncio(
    *,
    client: StolonClient
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping

    Args:
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = resolve_fee_code_to_ledger_account_mapping._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_accounts_by_ledger_account_key_sync_detailed(
    *,
    client: StolonClient
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        ledger_account_key (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_ledger_account_key._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_accounts_by_ledger_account_key_sync(
    *,
    client: StolonClient
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        ledger_account_key (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_ledger_account_key._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_accounts_by_ledger_account_key_asyncio_detailed(
    *,
    client: StolonClient
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        ledger_account_key (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_ledger_account_key._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_accounts_by_ledger_account_key_asyncio(
    *,
    client: StolonClient
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        ledger_account_key (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_ledger_account_key._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_account_by_uuid_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Get a fee-code-to-ledger-account mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_account_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_account_by_uuid_sync(
    *,
    client: StolonClient,
    uuid: str
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Get a fee-code-to-ledger-account mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_account_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_account_by_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Get a fee-code-to-ledger-account mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_account_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_account_by_uuid_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Get a fee-code-to-ledger-account mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_account_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def delete_fee_code_ledger_account_by_uuid_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ResponseError | str]:
    """Delete a fee-code-to-ledger-account mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, str]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ResponseError | str]
    """
    # Extract request parameters from generated function
    kwargs = delete_fee_code_ledger_account_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_fee_code_ledger_account_by_uuid_sync(
    *,
    client: StolonClient,
    uuid: str
) -> ResponseError | str | None:
    """Delete a fee-code-to-ledger-account mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, str]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ResponseError | str | None
    """
    # Extract request parameters from generated function
    kwargs = delete_fee_code_ledger_account_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def delete_fee_code_ledger_account_by_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ResponseError | str]:
    """Delete a fee-code-to-ledger-account mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, str]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ResponseError | str]
    """
    # Extract request parameters from generated function
    kwargs = delete_fee_code_ledger_account_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_fee_code_ledger_account_by_uuid_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> ResponseError | str | None:
    """Delete a fee-code-to-ledger-account mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, str]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ResponseError | str | None
    """
    # Extract request parameters from generated function
    kwargs = delete_fee_code_ledger_account_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date_sync_detailed(
    *,
    client: StolonClient
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Get a fee-code-to-ledger-account mapping using the fee category, fee code, and as-of date

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date_sync(
    *,
    client: StolonClient
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Get a fee-code-to-ledger-account mapping using the fee category, fee code, and as-of date

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date_asyncio_detailed(
    *,
    client: StolonClient
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Get a fee-code-to-ledger-account mapping using the fee category, fee code, and as-of date

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date_asyncio(
    *,
    client: StolonClient
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Get a fee-code-to-ledger-account mapping using the fee category, fee code, and as-of date

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_account_by_fee_category_fee_code_as_of_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str
) -> Response[ApiLedgerAccount]:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping for a billing
    entity

    Args:
        billing_entity_uuid (str):
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiLedgerAccount]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiLedgerAccount]
    """
    # Extract request parameters from generated function
    kwargs = resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiLedgerAccount:
        parsed = ApiLedgerAccount.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str
) -> ApiLedgerAccount | None:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping for a billing
    entity

    Args:
        billing_entity_uuid (str):
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiLedgerAccount

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiLedgerAccount | None
    """
    # Extract request parameters from generated function
    kwargs = resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiLedgerAccount.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str
) -> Response[ApiLedgerAccount]:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping for a billing
    entity

    Args:
        billing_entity_uuid (str):
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiLedgerAccount]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiLedgerAccount]
    """
    # Extract request parameters from generated function
    kwargs = resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiLedgerAccount:
        parsed = ApiLedgerAccount.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str
) -> ApiLedgerAccount | None:
    """Resolves a fee category and fee code pair to the fee-code-to-ledger-account mapping for a billing
    entity

    Args:
        billing_entity_uuid (str):
        fee_category (str):
        fee_code (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiLedgerAccount

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiLedgerAccount | None
    """
    # Extract request parameters from generated function
    kwargs = resolve_fee_category_fee_code_billing_entity_uuid_to_ledger_account._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiLedgerAccount.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def update_fee_code_ledger_account_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Update a fee-code-to-ledger-account mapping

    Args:
        uuid (str):
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = update_fee_code_ledger_account._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def update_fee_code_ledger_account_sync(
    *,
    client: StolonClient,
    uuid: str
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Update a fee-code-to-ledger-account mapping

    Args:
        uuid (str):
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = update_fee_code_ledger_account._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def update_fee_code_ledger_account_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Update a fee-code-to-ledger-account mapping

    Args:
        uuid (str):
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = update_fee_code_ledger_account._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def update_fee_code_ledger_account_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Update a fee-code-to-ledger-account mapping

    Args:
        uuid (str):
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = update_fee_code_ledger_account._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_fee_code_ledger_account_sync_detailed(
    *,
    client: StolonClient
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Create a fee-code-to-ledger-account mapping

    Args:
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = create_fee_code_ledger_account._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_fee_code_ledger_account_sync(
    *,
    client: StolonClient
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Create a fee-code-to-ledger-account mapping

    Args:
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = create_fee_code_ledger_account._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_fee_code_ledger_account_asyncio_detailed(
    *,
    client: StolonClient
) -> Response[ApiFeeCodeLedgerAccount | ResponseError]:
    """Create a fee-code-to-ledger-account mapping

    Args:
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCodeLedgerAccount, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ApiFeeCodeLedgerAccount | ResponseError]
    """
    # Extract request parameters from generated function
    kwargs = create_fee_code_ledger_account._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_fee_code_ledger_account_asyncio(
    *,
    client: StolonClient
) -> ApiFeeCodeLedgerAccount | ResponseError | None:
    """Create a fee-code-to-ledger-account mapping

    Args:
        body (ApiFeeCodeLedgerAccount):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCodeLedgerAccount, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ApiFeeCodeLedgerAccount | ResponseError | None
    """
    # Extract request parameters from generated function
    kwargs = create_fee_code_ledger_account._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_accounts_by_fee_category_fee_code_sync_detailed(
    *,
    client: StolonClient
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings using the from fee category and fee code, returning the
    mappings across effective dates

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_fee_category_fee_code._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_accounts_by_fee_category_fee_code_sync(
    *,
    client: StolonClient
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings using the from fee category and fee code, returning the
    mappings across effective dates

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_fee_category_fee_code._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_accounts_by_fee_category_fee_code_asyncio_detailed(
    *,
    client: StolonClient
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings using the from fee category and fee code, returning the
    mappings across effective dates

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_fee_category_fee_code._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_accounts_by_fee_category_fee_code_asyncio(
    *,
    client: StolonClient
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings using the from fee category and fee code, returning the
    mappings across effective dates

    Args:
        fee_category (str):
        fee_code (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_fee_category_fee_code._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_accounts_by_date_sync_detailed(
    *,
    client: StolonClient
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        date (datetime.date):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        ledger_account_key (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_accounts_by_date_sync(
    *,
    client: StolonClient
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        date (datetime.date):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        ledger_account_key (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_code_ledger_accounts_by_date_asyncio_detailed(
    *,
    client: StolonClient
) -> Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        date (datetime.date):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        ledger_account_key (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiFeeCodeLedgerAccount']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        Response[ResponseError | list["ApiFeeCodeLedgerAccount"]]
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_code_ledger_accounts_by_date_asyncio(
    *,
    client: StolonClient
) -> ResponseError | list["ApiFeeCodeLedgerAccount"] | None:
    """Get fee-code-to-ledger-account mappings that map to a ledger account key value

    Args:
        date (datetime.date):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        ledger_account_key (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiFeeCodeLedgerAccount']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
        

    Returns:
        ResponseError | list["ApiFeeCodeLedgerAccount"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_fee_code_ledger_accounts_by_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None

