"""
Proxied wrapper functions for billing-bookkeeper dev - flight_check_job_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.check_date_params import (
    CheckDateParams,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.check_db_relational_integrity_params import (
    CheckDbRelationalIntegrityParams,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.check_developer_entities_exist_params import (
    CheckDeveloperEntitiesExistParams,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.check_fee_category_names_params import (
    CheckFeeCategoryNamesParams,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.check_fee_code_missing_lexi_attribute_params import (
    CheckFeeCodeMissingLexiAttributeParams,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.check_hidden_system_apps_exist_params import (
    CheckHiddenSystemAppsExistParams,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.check_response import (
    CheckResponse,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.serialization import deserialize_result, serialize_argument


def check_fee_category_names_sync_detailed(
    *, client: StolonClient, body: CheckFeeCategoryNamesParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckFeeCategoryNamesParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckFeeCategoryNamesParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_fee_category_names",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_fee_category_names_sync(*, client: StolonClient, body: CheckFeeCategoryNamesParams) -> CheckResponse | None:
    """Args:
        body (CheckFeeCategoryNamesParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckFeeCategoryNamesParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_fee_category_names",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_fee_category_names_asyncio_detailed(
    *, client: StolonClient, body: CheckFeeCategoryNamesParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckFeeCategoryNamesParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckFeeCategoryNamesParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_fee_category_names",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_fee_category_names_asyncio(
    *, client: StolonClient, body: CheckFeeCategoryNamesParams
) -> CheckResponse | None:
    """Args:
        body (CheckFeeCategoryNamesParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckFeeCategoryNamesParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_fee_category_names",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def job_exe_results_sync_detailed(*, client: StolonClient, request_uuid: str) -> Response[str]:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.job_exe_results",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[str]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def job_exe_results_sync(*, client: StolonClient, request_uuid: str) -> str | None:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        str

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.job_exe_results",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[str]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def job_exe_results_asyncio_detailed(*, client: StolonClient, request_uuid: str) -> Response[str]:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.job_exe_results",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[str]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def job_exe_results_asyncio(*, client: StolonClient, request_uuid: str) -> str | None:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        str

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.job_exe_results",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[str]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_processing_group_dates_sync_detailed(
    *, client: StolonClient, body: CheckDateParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckDateParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDateParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_processing_group_dates",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_processing_group_dates_sync(*, client: StolonClient, body: CheckDateParams) -> CheckResponse | None:
    """Args:
        body (CheckDateParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDateParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_processing_group_dates",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_processing_group_dates_asyncio_detailed(
    *, client: StolonClient, body: CheckDateParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckDateParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDateParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_processing_group_dates",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_processing_group_dates_asyncio(*, client: StolonClient, body: CheckDateParams) -> CheckResponse | None:
    """Args:
        body (CheckDateParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDateParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_processing_group_dates",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_developer_entities_exist_sync_detailed(
    *, client: StolonClient, body: CheckDeveloperEntitiesExistParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckDeveloperEntitiesExistParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDeveloperEntitiesExistParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_developer_entities_exist",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_developer_entities_exist_sync(
    *, client: StolonClient, body: CheckDeveloperEntitiesExistParams
) -> CheckResponse | None:
    """Args:
        body (CheckDeveloperEntitiesExistParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDeveloperEntitiesExistParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_developer_entities_exist",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_developer_entities_exist_asyncio_detailed(
    *, client: StolonClient, body: CheckDeveloperEntitiesExistParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckDeveloperEntitiesExistParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDeveloperEntitiesExistParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_developer_entities_exist",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_developer_entities_exist_asyncio(
    *, client: StolonClient, body: CheckDeveloperEntitiesExistParams
) -> CheckResponse | None:
    """Args:
        body (CheckDeveloperEntitiesExistParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDeveloperEntitiesExistParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_developer_entities_exist",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_db_relational_integrity_sync_detailed(
    *, client: StolonClient, body: CheckDbRelationalIntegrityParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckDbRelationalIntegrityParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDbRelationalIntegrityParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_db_relational_integrity",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_db_relational_integrity_sync(
    *, client: StolonClient, body: CheckDbRelationalIntegrityParams
) -> CheckResponse | None:
    """Args:
        body (CheckDbRelationalIntegrityParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDbRelationalIntegrityParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_db_relational_integrity",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_db_relational_integrity_asyncio_detailed(
    *, client: StolonClient, body: CheckDbRelationalIntegrityParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckDbRelationalIntegrityParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDbRelationalIntegrityParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_db_relational_integrity",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_db_relational_integrity_asyncio(
    *, client: StolonClient, body: CheckDbRelationalIntegrityParams
) -> CheckResponse | None:
    """Args:
        body (CheckDbRelationalIntegrityParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDbRelationalIntegrityParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_db_relational_integrity",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def query_job_1_sync_detailed(*, client: StolonClient, request_uuid: str) -> Response[CheckResponse]:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.query_job_1",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def query_job_1_sync(*, client: StolonClient, request_uuid: str) -> CheckResponse | None:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.query_job_1",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def query_job_1_asyncio_detailed(*, client: StolonClient, request_uuid: str) -> Response[CheckResponse]:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.query_job_1",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def query_job_1_asyncio(*, client: StolonClient, request_uuid: str) -> CheckResponse | None:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.query_job_1",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_missing_hidden_system_apps_sync_detailed(
    *, client: StolonClient, body: CheckHiddenSystemAppsExistParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckHiddenSystemAppsExistParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckHiddenSystemAppsExistParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_missing_hidden_system_apps",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_missing_hidden_system_apps_sync(
    *, client: StolonClient, body: CheckHiddenSystemAppsExistParams
) -> CheckResponse | None:
    """Args:
        body (CheckHiddenSystemAppsExistParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckHiddenSystemAppsExistParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_missing_hidden_system_apps",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_missing_hidden_system_apps_asyncio_detailed(
    *, client: StolonClient, body: CheckHiddenSystemAppsExistParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckHiddenSystemAppsExistParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckHiddenSystemAppsExistParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_missing_hidden_system_apps",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_missing_hidden_system_apps_asyncio(
    *, client: StolonClient, body: CheckHiddenSystemAppsExistParams
) -> CheckResponse | None:
    """Args:
        body (CheckHiddenSystemAppsExistParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckHiddenSystemAppsExistParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_missing_hidden_system_apps",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_db_relational_integrity_2_sync_detailed(
    *, client: StolonClient, body: CheckDbRelationalIntegrityParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckDbRelationalIntegrityParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDbRelationalIntegrityParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_db_relational_integrity_2",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_db_relational_integrity_2_sync(
    *, client: StolonClient, body: CheckDbRelationalIntegrityParams
) -> CheckResponse | None:
    """Args:
        body (CheckDbRelationalIntegrityParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDbRelationalIntegrityParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_db_relational_integrity_2",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_db_relational_integrity_2_asyncio_detailed(
    *, client: StolonClient, body: CheckDbRelationalIntegrityParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckDbRelationalIntegrityParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDbRelationalIntegrityParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_db_relational_integrity_2",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_db_relational_integrity_2_asyncio(
    *, client: StolonClient, body: CheckDbRelationalIntegrityParams
) -> CheckResponse | None:
    """Args:
        body (CheckDbRelationalIntegrityParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckDbRelationalIntegrityParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_db_relational_integrity_2",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_job_execution_connection_sync_detailed(*, client: StolonClient) -> Response[CheckResponse]:
    """Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_job_execution_connection",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_job_execution_connection_sync(*, client: StolonClient) -> CheckResponse | None:
    """Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_job_execution_connection",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_job_execution_connection_asyncio_detailed(*, client: StolonClient) -> Response[CheckResponse]:
    """Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_job_execution_connection",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_job_execution_connection_asyncio(*, client: StolonClient) -> CheckResponse | None:
    """Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_job_execution_connection",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def kill_job_1_sync_detailed(*, client: StolonClient, request_uuid: str) -> Response[CheckResponse]:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.kill_job_1",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def kill_job_1_sync(*, client: StolonClient, request_uuid: str) -> CheckResponse | None:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.kill_job_1",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def kill_job_1_asyncio_detailed(*, client: StolonClient, request_uuid: str) -> Response[CheckResponse]:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.kill_job_1",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def kill_job_1_asyncio(*, client: StolonClient, request_uuid: str) -> CheckResponse | None:
    """Args:
        request_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                request_uuid: str

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"request_uuid": serialize_argument(request_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.kill_job_1",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_fee_code_missing_lexi_attribute_sync_detailed(
    *, client: StolonClient, body: CheckFeeCodeMissingLexiAttributeParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckFeeCodeMissingLexiAttributeParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckFeeCodeMissingLexiAttributeParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_fee_code_missing_lexi_attribute",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_fee_code_missing_lexi_attribute_sync(
    *, client: StolonClient, body: CheckFeeCodeMissingLexiAttributeParams
) -> CheckResponse | None:
    """Args:
        body (CheckFeeCodeMissingLexiAttributeParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckFeeCodeMissingLexiAttributeParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_fee_code_missing_lexi_attribute",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_fee_code_missing_lexi_attribute_asyncio_detailed(
    *, client: StolonClient, body: CheckFeeCodeMissingLexiAttributeParams
) -> Response[CheckResponse]:
    """Args:
        body (CheckFeeCodeMissingLexiAttributeParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[CheckResponse]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckFeeCodeMissingLexiAttributeParams

    Returns:
        Response[CheckResponse]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_fee_code_missing_lexi_attribute",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def check_fee_code_missing_lexi_attribute_asyncio(
    *, client: StolonClient, body: CheckFeeCodeMissingLexiAttributeParams
) -> CheckResponse | None:
    """Args:
        body (CheckFeeCodeMissingLexiAttributeParams):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        CheckResponse

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: CheckFeeCodeMissingLexiAttributeParams

    Returns:
        CheckResponse | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="flight_check_job_controller.check_fee_code_missing_lexi_attribute",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[CheckResponse]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
