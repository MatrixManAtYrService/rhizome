"""
Proxied wrapper functions for billing-bookkeeper dev - invoice_info.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_invoice_info import (
    ApiInvoiceInfo,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_invoice_info_extended import (
    ApiInvoiceInfoExtended,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_reseller_invoice_infos_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]:
    """Get invoice information for reseller

    Args:
        r_id (str):
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_reseller_invoice_infos",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_invoice_infos_sync(
    *,
    client: StolonClient,
    r_id: str,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> ApiInvoiceInfo | list["ApiInvoiceInfo"] | None:
    """Get invoice information for reseller

    Args:
        r_id (str):
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        ApiInvoiceInfo | list["ApiInvoiceInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_reseller_invoice_infos",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_invoice_infos_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]:
    """Get invoice information for reseller

    Args:
        r_id (str):
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_reseller_invoice_infos",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_invoice_infos_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> ApiInvoiceInfo | list["ApiInvoiceInfo"] | None:
    """Get invoice information for reseller

    Args:
        r_id (str):
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        ApiInvoiceInfo | list["ApiInvoiceInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_reseller_invoice_infos",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_info_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiInvoiceInfo]:
    """Get invoice info by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiInvoiceInfo]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiInvoiceInfo]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_info_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiInvoiceInfo]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_info_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiInvoiceInfo | None:
    """Get invoice info by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiInvoiceInfo

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiInvoiceInfo | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_info_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiInvoiceInfo]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_info_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ApiInvoiceInfo]:
    """Get invoice info by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiInvoiceInfo]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiInvoiceInfo]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_info_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiInvoiceInfo]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_info_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiInvoiceInfo | None:
    """Get invoice info by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiInvoiceInfo

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiInvoiceInfo | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_info_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiInvoiceInfo]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_developer_invoice_infos_sync_detailed(
    *,
    client: StolonClient,
    developer_uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]:
    """Get invoice information for developer

    Args:
        developer_uuid (str):
        date (Union[Unset, datetime.date]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                developer_uuid: str
        date: Union[Unset, datetime.date]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "developer_uuid": serialize_argument(developer_uuid),
        "date": serialize_argument(date),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_developer_invoice_infos",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_developer_invoice_infos_sync(
    *,
    client: StolonClient,
    developer_uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> ApiInvoiceInfo | list["ApiInvoiceInfo"] | None:
    """Get invoice information for developer

    Args:
        developer_uuid (str):
        date (Union[Unset, datetime.date]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                developer_uuid: str
        date: Union[Unset, datetime.date]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        ApiInvoiceInfo | list["ApiInvoiceInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "developer_uuid": serialize_argument(developer_uuid),
        "date": serialize_argument(date),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_developer_invoice_infos",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_developer_invoice_infos_asyncio_detailed(
    *,
    client: StolonClient,
    developer_uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]:
    """Get invoice information for developer

    Args:
        developer_uuid (str):
        date (Union[Unset, datetime.date]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                developer_uuid: str
        date: Union[Unset, datetime.date]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "developer_uuid": serialize_argument(developer_uuid),
        "date": serialize_argument(date),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_developer_invoice_infos",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_developer_invoice_infos_asyncio(
    *,
    client: StolonClient,
    developer_uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> ApiInvoiceInfo | list["ApiInvoiceInfo"] | None:
    """Get invoice information for developer

    Args:
        developer_uuid (str):
        date (Union[Unset, datetime.date]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                developer_uuid: str
        date: Union[Unset, datetime.date]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        ApiInvoiceInfo | list["ApiInvoiceInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "developer_uuid": serialize_argument(developer_uuid),
        "date": serialize_argument(date),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_developer_invoice_infos",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_info_extended_sync_detailed(
    *, client: StolonClient, merchant_uuids: list[str], date: Union[Unset, datetime.date] = UNSET
) -> Response[ApiInvoiceInfoExtended | list["ApiInvoiceInfoExtended"]]:
    """Return Extended Invoice Information per Location

     Returns a list of Invoice_info objects with Invoice_info_extended filtered by a list of merchant
    UUIDs and invoice date. This endpoint is intended to provide a summary view per location.

    Args:
        merchant_uuids (list[str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfoExtended, list['ApiInvoiceInfoExtended']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuids: list[str]
        date: Union[Unset, datetime.date]

    Returns:
        Response[ApiInvoiceInfoExtended | list["ApiInvoiceInfoExtended"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuids": serialize_argument(merchant_uuids), "date": serialize_argument(date)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_info_extended",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfoExtended, list["ApiInvoiceInfoExtended"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_info_extended_sync(
    *, client: StolonClient, merchant_uuids: list[str], date: Union[Unset, datetime.date] = UNSET
) -> ApiInvoiceInfoExtended | list["ApiInvoiceInfoExtended"] | None:
    """Return Extended Invoice Information per Location

     Returns a list of Invoice_info objects with Invoice_info_extended filtered by a list of merchant
    UUIDs and invoice date. This endpoint is intended to provide a summary view per location.

    Args:
        merchant_uuids (list[str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfoExtended, list['ApiInvoiceInfoExtended']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuids: list[str]
        date: Union[Unset, datetime.date]

    Returns:
        ApiInvoiceInfoExtended | list["ApiInvoiceInfoExtended"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuids": serialize_argument(merchant_uuids), "date": serialize_argument(date)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_info_extended",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfoExtended, list["ApiInvoiceInfoExtended"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_info_extended_asyncio_detailed(
    *, client: StolonClient, merchant_uuids: list[str], date: Union[Unset, datetime.date] = UNSET
) -> Response[ApiInvoiceInfoExtended | list["ApiInvoiceInfoExtended"]]:
    """Return Extended Invoice Information per Location

     Returns a list of Invoice_info objects with Invoice_info_extended filtered by a list of merchant
    UUIDs and invoice date. This endpoint is intended to provide a summary view per location.

    Args:
        merchant_uuids (list[str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfoExtended, list['ApiInvoiceInfoExtended']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuids: list[str]
        date: Union[Unset, datetime.date]

    Returns:
        Response[ApiInvoiceInfoExtended | list["ApiInvoiceInfoExtended"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuids": serialize_argument(merchant_uuids), "date": serialize_argument(date)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_info_extended",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfoExtended, list["ApiInvoiceInfoExtended"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_info_extended_asyncio(
    *, client: StolonClient, merchant_uuids: list[str], date: Union[Unset, datetime.date] = UNSET
) -> ApiInvoiceInfoExtended | list["ApiInvoiceInfoExtended"] | None:
    """Return Extended Invoice Information per Location

     Returns a list of Invoice_info objects with Invoice_info_extended filtered by a list of merchant
    UUIDs and invoice date. This endpoint is intended to provide a summary view per location.

    Args:
        merchant_uuids (list[str]):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfoExtended, list['ApiInvoiceInfoExtended']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_uuids: list[str]
        date: Union[Unset, datetime.date]

    Returns:
        ApiInvoiceInfoExtended | list["ApiInvoiceInfoExtended"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_uuids": serialize_argument(merchant_uuids), "date": serialize_argument(date)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_info_extended",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfoExtended, list["ApiInvoiceInfoExtended"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_invoice_infos_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]:
    """Get invoice information for merchant

    Args:
        uuid (str):
        date (Union[Unset, datetime.date]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        date: Union[Unset, datetime.date]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "date": serialize_argument(date),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_merchant_invoice_infos",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_invoice_infos_sync(
    *,
    client: StolonClient,
    uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> ApiInvoiceInfo | list["ApiInvoiceInfo"] | None:
    """Get invoice information for merchant

    Args:
        uuid (str):
        date (Union[Unset, datetime.date]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        date: Union[Unset, datetime.date]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        ApiInvoiceInfo | list["ApiInvoiceInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "date": serialize_argument(date),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_merchant_invoice_infos",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_invoice_infos_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]:
    """Get invoice information for merchant

    Args:
        uuid (str):
        date (Union[Unset, datetime.date]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        date: Union[Unset, datetime.date]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "date": serialize_argument(date),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_merchant_invoice_infos",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_merchant_invoice_infos_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> ApiInvoiceInfo | list["ApiInvoiceInfo"] | None:
    """Get invoice information for merchant

    Args:
        uuid (str):
        date (Union[Unset, datetime.date]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        date: Union[Unset, datetime.date]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        ApiInvoiceInfo | list["ApiInvoiceInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "date": serialize_argument(date),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_merchant_invoice_infos",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_infos_sync_detailed(
    *,
    client: StolonClient,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]:
    """Get invoice information

    Args:
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_infos",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_infos_sync(
    *,
    client: StolonClient,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiInvoiceInfo | list["ApiInvoiceInfo"] | None:
    """Get invoice information

    Args:
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiInvoiceInfo | list["ApiInvoiceInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_infos",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_infos_asyncio_detailed(
    *,
    client: StolonClient,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]:
    """Get invoice information

    Args:
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiInvoiceInfo | list["ApiInvoiceInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_infos",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_infos_asyncio(
    *,
    client: StolonClient,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    invoice_num: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiInvoiceInfo | list["ApiInvoiceInfo"] | None:
    """Get invoice information

    Args:
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        invoice_num (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceInfo, list['ApiInvoiceInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        invoice_num: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiInvoiceInfo | list["ApiInvoiceInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "invoice_num": serialize_argument(invoice_num),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="invoice_info.get_invoice_infos",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceInfo, list["ApiInvoiceInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
