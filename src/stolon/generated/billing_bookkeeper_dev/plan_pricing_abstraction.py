"""
Proxied wrapper functions for billing-bookkeeper dev - plan_pricing_abstraction.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.plan_pricing_abstraction import apply_to_children
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.plan_pricing_abstraction import create_update_plan_pricing_abstraction
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.plan_pricing_abstraction import get_plan_pricing_abstraction
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.plan_pricing_abstraction import get_plan_pricing_abstraction_details
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.plan_pricing_abstraction import preview_plan_pricing_abstraction_for_create_or_update
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_plan_pricing_abstraction import ApiPlanPricingAbstraction
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_plan_pricing_abstraction_details import ApiPlanPricingAbstractionDetails
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import ResponseError
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import datetime
import json


def get_plan_pricing_abstraction_sync_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    currency: str,
    plan_uuid: Union[Unset, str] = UNSET
) -> Response[ResponseError]:
    """Gets a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_abstraction._get_kwargs(date=date, currency=currency, plan_uuid=plan_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_abstraction_sync(
    *,
    client: StolonClient,
    date: datetime.date,
    currency: str,
    plan_uuid: Union[Unset, str] = UNSET
) -> ResponseError | None:
    """Gets a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_abstraction._get_kwargs(date=date, currency=currency, plan_uuid=plan_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_abstraction_asyncio_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    currency: str,
    plan_uuid: Union[Unset, str] = UNSET
) -> Response[ResponseError]:
    """Gets a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_abstraction._get_kwargs(date=date, currency=currency, plan_uuid=plan_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_abstraction_asyncio(
    *,
    client: StolonClient,
    date: datetime.date,
    currency: str,
    plan_uuid: Union[Unset, str] = UNSET
) -> ResponseError | None:
    """Gets a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_abstraction._get_kwargs(date=date, currency=currency, plan_uuid=plan_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_abstraction_details_sync_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    currency: str,
    plan_uuid: Union[Unset, str] = UNSET
) -> Response[ApiPlanPricingAbstractionDetails]:
    """Get details of a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricingAbstractionDetails]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        Response[ApiPlanPricingAbstractionDetails]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_abstraction_details._get_kwargs(date=date, currency=currency, plan_uuid=plan_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiPlanPricingAbstractionDetails | None
    if body_json and proxy_response.status_code == 200 and ApiPlanPricingAbstractionDetails:
        parsed = ApiPlanPricingAbstractionDetails.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_abstraction_details_sync(
    *,
    client: StolonClient,
    date: datetime.date,
    currency: str,
    plan_uuid: Union[Unset, str] = UNSET
) -> ApiPlanPricingAbstractionDetails | None:
    """Get details of a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricingAbstractionDetails

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        ApiPlanPricingAbstractionDetails | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_abstraction_details._get_kwargs(date=date, currency=currency, plan_uuid=plan_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiPlanPricingAbstractionDetails.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_abstraction_details_asyncio_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    currency: str,
    plan_uuid: Union[Unset, str] = UNSET
) -> Response[ApiPlanPricingAbstractionDetails]:
    """Get details of a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricingAbstractionDetails]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        Response[ApiPlanPricingAbstractionDetails]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_abstraction_details._get_kwargs(date=date, currency=currency, plan_uuid=plan_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiPlanPricingAbstractionDetails | None
    if body_json and proxy_response.status_code == 200 and ApiPlanPricingAbstractionDetails:
        parsed = ApiPlanPricingAbstractionDetails.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_abstraction_details_asyncio(
    *,
    client: StolonClient,
    date: datetime.date,
    currency: str,
    plan_uuid: Union[Unset, str] = UNSET
) -> ApiPlanPricingAbstractionDetails | None:
    """Get details of a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricingAbstractionDetails

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        ApiPlanPricingAbstractionDetails | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_abstraction_details._get_kwargs(date=date, currency=currency, plan_uuid=plan_uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiPlanPricingAbstractionDetails.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def preview_plan_pricing_abstraction_for_create_or_update_sync_detailed(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Returns a preview of bookkeeper records that would be created when creating/updating an abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = preview_plan_pricing_abstraction_for_create_or_update._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def preview_plan_pricing_abstraction_for_create_or_update_sync(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Returns a preview of bookkeeper records that would be created when creating/updating an abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = preview_plan_pricing_abstraction_for_create_or_update._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def preview_plan_pricing_abstraction_for_create_or_update_asyncio_detailed(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Returns a preview of bookkeeper records that would be created when creating/updating an abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = preview_plan_pricing_abstraction_for_create_or_update._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def preview_plan_pricing_abstraction_for_create_or_update_asyncio(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Returns a preview of bookkeeper records that would be created when creating/updating an abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = preview_plan_pricing_abstraction_for_create_or_update._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_update_plan_pricing_abstraction_sync_detailed(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Create/update all bookkeeper records needed to save the plan pricing abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = create_update_plan_pricing_abstraction._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_update_plan_pricing_abstraction_sync(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Create/update all bookkeeper records needed to save the plan pricing abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = create_update_plan_pricing_abstraction._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_update_plan_pricing_abstraction_asyncio_detailed(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Create/update all bookkeeper records needed to save the plan pricing abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = create_update_plan_pricing_abstraction._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_update_plan_pricing_abstraction_asyncio(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Create/update all bookkeeper records needed to save the plan pricing abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = create_update_plan_pricing_abstraction._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def apply_to_children_sync_detailed(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Adds DEFAULT fee records for all children of the owner recursively.  This does NOT modify the
    abstraction.  If the passed abstraction is different than the actual, a 400 will be returned.

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = apply_to_children._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def apply_to_children_sync(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Adds DEFAULT fee records for all children of the owner recursively.  This does NOT modify the
    abstraction.  If the passed abstraction is different than the actual, a 400 will be returned.

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = apply_to_children._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def apply_to_children_asyncio_detailed(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Adds DEFAULT fee records for all children of the owner recursively.  This does NOT modify the
    abstraction.  If the passed abstraction is different than the actual, a 400 will be returned.

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = apply_to_children._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def apply_to_children_asyncio(
    *,
    client: StolonClient,
    body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Adds DEFAULT fee records for all children of the owner recursively.  This does NOT modify the
    abstraction.  If the passed abstraction is different than the actual, a 400 will be returned.

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = apply_to_children._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

