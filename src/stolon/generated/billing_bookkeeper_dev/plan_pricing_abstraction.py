"""
Proxied wrapper functions for billing-bookkeeper dev - plan_pricing_abstraction.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_plan_pricing_abstraction import (
    ApiPlanPricingAbstraction,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_plan_pricing_abstraction_details import (
    ApiPlanPricingAbstractionDetails,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_plan_pricing_abstraction_sync_detailed(
    *, client: StolonClient, date: datetime.date, currency: str, plan_uuid: Union[Unset, str] = UNSET
) -> Response[ResponseError]:
    """Gets a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "currency": serialize_argument(currency),
        "plan_uuid": serialize_argument(plan_uuid),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.get_plan_pricing_abstraction",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_abstraction_sync(
    *, client: StolonClient, date: datetime.date, currency: str, plan_uuid: Union[Unset, str] = UNSET
) -> ResponseError | None:
    """Gets a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "currency": serialize_argument(currency),
        "plan_uuid": serialize_argument(plan_uuid),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.get_plan_pricing_abstraction",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_abstraction_asyncio_detailed(
    *, client: StolonClient, date: datetime.date, currency: str, plan_uuid: Union[Unset, str] = UNSET
) -> Response[ResponseError]:
    """Gets a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "currency": serialize_argument(currency),
        "plan_uuid": serialize_argument(plan_uuid),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.get_plan_pricing_abstraction",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_abstraction_asyncio(
    *, client: StolonClient, date: datetime.date, currency: str, plan_uuid: Union[Unset, str] = UNSET
) -> ResponseError | None:
    """Gets a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "currency": serialize_argument(currency),
        "plan_uuid": serialize_argument(plan_uuid),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.get_plan_pricing_abstraction",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_abstraction_details_sync_detailed(
    *, client: StolonClient, date: datetime.date, currency: str, plan_uuid: Union[Unset, str] = UNSET
) -> Response[ApiPlanPricingAbstractionDetails]:
    """Get details of a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricingAbstractionDetails]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        Response[ApiPlanPricingAbstractionDetails]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "currency": serialize_argument(currency),
        "plan_uuid": serialize_argument(plan_uuid),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.get_plan_pricing_abstraction_details",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPlanPricingAbstractionDetails]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_abstraction_details_sync(
    *, client: StolonClient, date: datetime.date, currency: str, plan_uuid: Union[Unset, str] = UNSET
) -> ApiPlanPricingAbstractionDetails | None:
    """Get details of a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricingAbstractionDetails

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        ApiPlanPricingAbstractionDetails | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "currency": serialize_argument(currency),
        "plan_uuid": serialize_argument(plan_uuid),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.get_plan_pricing_abstraction_details",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPlanPricingAbstractionDetails]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_abstraction_details_asyncio_detailed(
    *, client: StolonClient, date: datetime.date, currency: str, plan_uuid: Union[Unset, str] = UNSET
) -> Response[ApiPlanPricingAbstractionDetails]:
    """Get details of a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricingAbstractionDetails]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        Response[ApiPlanPricingAbstractionDetails]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "currency": serialize_argument(currency),
        "plan_uuid": serialize_argument(plan_uuid),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.get_plan_pricing_abstraction_details",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPlanPricingAbstractionDetails]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_abstraction_details_asyncio(
    *, client: StolonClient, date: datetime.date, currency: str, plan_uuid: Union[Unset, str] = UNSET
) -> ApiPlanPricingAbstractionDetails | None:
    """Get details of a plan pricing abstraction

    Args:
        date (datetime.date):
        currency (str):
        plan_uuid (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricingAbstractionDetails

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        currency: str
        plan_uuid: Union[Unset, str]

    Returns:
        ApiPlanPricingAbstractionDetails | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "currency": serialize_argument(currency),
        "plan_uuid": serialize_argument(plan_uuid),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.get_plan_pricing_abstraction_details",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPlanPricingAbstractionDetails]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def preview_plan_pricing_abstraction_for_create_or_update_sync_detailed(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Returns a preview of bookkeeper records that would be created when creating/updating an abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.preview_plan_pricing_abstraction_for_create_or_update",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def preview_plan_pricing_abstraction_for_create_or_update_sync(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Returns a preview of bookkeeper records that would be created when creating/updating an abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.preview_plan_pricing_abstraction_for_create_or_update",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def preview_plan_pricing_abstraction_for_create_or_update_asyncio_detailed(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Returns a preview of bookkeeper records that would be created when creating/updating an abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.preview_plan_pricing_abstraction_for_create_or_update",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def preview_plan_pricing_abstraction_for_create_or_update_asyncio(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Returns a preview of bookkeeper records that would be created when creating/updating an abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.preview_plan_pricing_abstraction_for_create_or_update",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_update_plan_pricing_abstraction_sync_detailed(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Create/update all bookkeeper records needed to save the plan pricing abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.create_update_plan_pricing_abstraction",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_update_plan_pricing_abstraction_sync(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Create/update all bookkeeper records needed to save the plan pricing abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.create_update_plan_pricing_abstraction",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_update_plan_pricing_abstraction_asyncio_detailed(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Create/update all bookkeeper records needed to save the plan pricing abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.create_update_plan_pricing_abstraction",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_update_plan_pricing_abstraction_asyncio(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> ResponseError | None:
    """Create/update all bookkeeper records needed to save the plan pricing abstraction

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.create_update_plan_pricing_abstraction",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_to_children_sync_detailed(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Adds DEFAULT fee records for all children of the owner recursively.  This does NOT modify the
    abstraction.  If the passed abstraction is different than the actual, a 400 will be returned.

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.apply_to_children",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_to_children_sync(*, client: StolonClient, body: ApiPlanPricingAbstraction) -> ResponseError | None:
    """Adds DEFAULT fee records for all children of the owner recursively.  This does NOT modify the
    abstraction.  If the passed abstraction is different than the actual, a 400 will be returned.

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.apply_to_children",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_to_children_asyncio_detailed(
    *, client: StolonClient, body: ApiPlanPricingAbstraction
) -> Response[ResponseError]:
    """Adds DEFAULT fee records for all children of the owner recursively.  This does NOT modify the
    abstraction.  If the passed abstraction is different than the actual, a 400 will be returned.

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.apply_to_children",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def apply_to_children_asyncio(*, client: StolonClient, body: ApiPlanPricingAbstraction) -> ResponseError | None:
    """Adds DEFAULT fee records for all children of the owner recursively.  This does NOT modify the
    abstraction.  If the passed abstraction is different than the actual, a 400 will be returned.

    Args:
        body (ApiPlanPricingAbstraction):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPlanPricingAbstraction

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="plan_pricing_abstraction.apply_to_children",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
