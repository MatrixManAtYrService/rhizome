"""
Proxied wrapper functions for billing-bookkeeper dev - minutiae_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import json
from http import HTTPStatus
from typing import Any

from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.minutiae_controller import (
    get_billing_entity_minutiae,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response


def get_billing_entity_minutiae_sync_detailed(*, client: StolonClient) -> Response[Any]:
    """Args:
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        as_of_date (Union[Unset, str]):
        start_date (Union[Unset, str]):
        end_date (Union[Unset, str]):
        limit (Union[Unset, int]):
        only_effective (Union[Unset, bool]):
        fees (Union[Unset, bool]):
        actions (Union[Unset, bool]):
        action_errors (Union[Unset, bool]):
        ledgers (Union[Unset, bool]):
        monetary (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[Any]
    """
    # Extract request parameters from generated function
    kwargs = get_billing_entity_minutiae._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_billing_entity_minutiae_asyncio_detailed(*, client: StolonClient) -> Response[Any]:
    """Args:
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        as_of_date (Union[Unset, str]):
        start_date (Union[Unset, str]):
        end_date (Union[Unset, str]):
        limit (Union[Unset, int]):
        only_effective (Union[Unset, bool]):
        fees (Union[Unset, bool]):
        actions (Union[Unset, bool]):
        action_errors (Union[Unset, bool]):
        ledgers (Union[Unset, bool]):
        monetary (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[Any]
    """
    # Extract request parameters from generated function
    kwargs = get_billing_entity_minutiae._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )
