"""
Proxied wrapper functions for billing-bookkeeper dev - minutiae_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Any, Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_billing_entity_minutiae_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    as_of_date: Union[Unset, str] = UNSET,
    start_date: Union[Unset, str] = UNSET,
    end_date: Union[Unset, str] = UNSET,
    limit: Union[Unset, int] = UNSET,
    only_effective: Union[Unset, bool] = UNSET,
    fees: Union[Unset, bool] = UNSET,
    actions: Union[Unset, bool] = UNSET,
    action_errors: Union[Unset, bool] = UNSET,
    ledgers: Union[Unset, bool] = UNSET,
    monetary: Union[Unset, bool] = UNSET,
) -> Response[Any]:
    """Args:
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        as_of_date (Union[Unset, str]):
        start_date (Union[Unset, str]):
        end_date (Union[Unset, str]):
        limit (Union[Unset, int]):
        only_effective (Union[Unset, bool]):
        fees (Union[Unset, bool]):
        actions (Union[Unset, bool]):
        action_errors (Union[Unset, bool]):
        ledgers (Union[Unset, bool]):
        monetary (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        as_of_date: Union[Unset, str]
        start_date: Union[Unset, str]
        end_date: Union[Unset, str]
        limit: Union[Unset, int]
        only_effective: Union[Unset, bool]
        fees: Union[Unset, bool]
        actions: Union[Unset, bool]
        action_errors: Union[Unset, bool]
        ledgers: Union[Unset, bool]
        monetary: Union[Unset, bool]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "as_of_date": serialize_argument(as_of_date),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "limit": serialize_argument(limit),
        "only_effective": serialize_argument(only_effective),
        "fees": serialize_argument(fees),
        "actions": serialize_argument(actions),
        "action_errors": serialize_argument(action_errors),
        "ledgers": serialize_argument(ledgers),
        "monetary": serialize_argument(monetary),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="minutiae_controller.get_billing_entity_minutiae",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_entity_minutiae_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    as_of_date: Union[Unset, str] = UNSET,
    start_date: Union[Unset, str] = UNSET,
    end_date: Union[Unset, str] = UNSET,
    limit: Union[Unset, int] = UNSET,
    only_effective: Union[Unset, bool] = UNSET,
    fees: Union[Unset, bool] = UNSET,
    actions: Union[Unset, bool] = UNSET,
    action_errors: Union[Unset, bool] = UNSET,
    ledgers: Union[Unset, bool] = UNSET,
    monetary: Union[Unset, bool] = UNSET,
) -> Response[Any]:
    """Args:
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        as_of_date (Union[Unset, str]):
        start_date (Union[Unset, str]):
        end_date (Union[Unset, str]):
        limit (Union[Unset, int]):
        only_effective (Union[Unset, bool]):
        fees (Union[Unset, bool]):
        actions (Union[Unset, bool]):
        action_errors (Union[Unset, bool]):
        ledgers (Union[Unset, bool]):
        monetary (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        as_of_date: Union[Unset, str]
        start_date: Union[Unset, str]
        end_date: Union[Unset, str]
        limit: Union[Unset, int]
        only_effective: Union[Unset, bool]
        fees: Union[Unset, bool]
        actions: Union[Unset, bool]
        action_errors: Union[Unset, bool]
        ledgers: Union[Unset, bool]
        monetary: Union[Unset, bool]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "as_of_date": serialize_argument(as_of_date),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "limit": serialize_argument(limit),
        "only_effective": serialize_argument(only_effective),
        "fees": serialize_argument(fees),
        "actions": serialize_argument(actions),
        "action_errors": serialize_argument(action_errors),
        "ledgers": serialize_argument(ledgers),
        "monetary": serialize_argument(monetary),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="minutiae_controller.get_billing_entity_minutiae",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
