"""
Proxied wrapper functions for billing-bookkeeper dev - auto_adjust_advice.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_auto_adjust_advice import (
    ApiAutoAdjustAdvice,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def create_auto_adjust_advice_sync_detailed(
    *, client: StolonClient, body: ApiAutoAdjustAdvice
) -> Response[ApiAutoAdjustAdvice]:
    """Create auto-adjust advice

    Args:
        body (ApiAutoAdjustAdvice):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustAdvice]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAutoAdjustAdvice

    Returns:
        Response[ApiAutoAdjustAdvice]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.create_auto_adjust_advice",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_auto_adjust_advice_sync(*, client: StolonClient, body: ApiAutoAdjustAdvice) -> ApiAutoAdjustAdvice | None:
    """Create auto-adjust advice

    Args:
        body (ApiAutoAdjustAdvice):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustAdvice

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAutoAdjustAdvice

    Returns:
        ApiAutoAdjustAdvice | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.create_auto_adjust_advice",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_auto_adjust_advice_asyncio_detailed(
    *, client: StolonClient, body: ApiAutoAdjustAdvice
) -> Response[ApiAutoAdjustAdvice]:
    """Create auto-adjust advice

    Args:
        body (ApiAutoAdjustAdvice):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustAdvice]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAutoAdjustAdvice

    Returns:
        Response[ApiAutoAdjustAdvice]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.create_auto_adjust_advice",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_auto_adjust_advice_asyncio(*, client: StolonClient, body: ApiAutoAdjustAdvice) -> ApiAutoAdjustAdvice | None:
    """Create auto-adjust advice

    Args:
        body (ApiAutoAdjustAdvice):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustAdvice

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiAutoAdjustAdvice

    Returns:
        ApiAutoAdjustAdvice | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.create_auto_adjust_advice",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_auto_adjust_advices_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    rule_uuid: Union[Unset, str] = UNSET,
    is_active: Union[Unset, bool] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiAutoAdjustAdvice]:
    """Get auto-adjust advices

    Args:
        billing_entity_uuid (Union[Unset, str]):
        rule_uuid (Union[Unset, str]):
        is_active (Union[Unset, bool]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustAdvice]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        rule_uuid: Union[Unset, str]
        is_active: Union[Unset, bool]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiAutoAdjustAdvice]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "rule_uuid": serialize_argument(rule_uuid),
        "is_active": serialize_argument(is_active),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.get_auto_adjust_advices",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_auto_adjust_advices_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    rule_uuid: Union[Unset, str] = UNSET,
    is_active: Union[Unset, bool] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiAutoAdjustAdvice | None:
    """Get auto-adjust advices

    Args:
        billing_entity_uuid (Union[Unset, str]):
        rule_uuid (Union[Unset, str]):
        is_active (Union[Unset, bool]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustAdvice

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        rule_uuid: Union[Unset, str]
        is_active: Union[Unset, bool]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiAutoAdjustAdvice | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "rule_uuid": serialize_argument(rule_uuid),
        "is_active": serialize_argument(is_active),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.get_auto_adjust_advices",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_auto_adjust_advices_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    rule_uuid: Union[Unset, str] = UNSET,
    is_active: Union[Unset, bool] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiAutoAdjustAdvice]:
    """Get auto-adjust advices

    Args:
        billing_entity_uuid (Union[Unset, str]):
        rule_uuid (Union[Unset, str]):
        is_active (Union[Unset, bool]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustAdvice]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        rule_uuid: Union[Unset, str]
        is_active: Union[Unset, bool]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiAutoAdjustAdvice]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "rule_uuid": serialize_argument(rule_uuid),
        "is_active": serialize_argument(is_active),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.get_auto_adjust_advices",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_auto_adjust_advices_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    rule_uuid: Union[Unset, str] = UNSET,
    is_active: Union[Unset, bool] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiAutoAdjustAdvice | None:
    """Get auto-adjust advices

    Args:
        billing_entity_uuid (Union[Unset, str]):
        rule_uuid (Union[Unset, str]):
        is_active (Union[Unset, bool]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustAdvice

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: Union[Unset, str]
        rule_uuid: Union[Unset, str]
        is_active: Union[Unset, bool]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiAutoAdjustAdvice | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "rule_uuid": serialize_argument(rule_uuid),
        "is_active": serialize_argument(is_active),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.get_auto_adjust_advices",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_auto_adjust_advice_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiAutoAdjustAdvice
) -> Response[ApiAutoAdjustAdvice]:
    """Update auto-adjust advice

    Args:
        uuid (str):
        body (ApiAutoAdjustAdvice):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustAdvice]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiAutoAdjustAdvice

    Returns:
        Response[ApiAutoAdjustAdvice]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.update_auto_adjust_advice",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_auto_adjust_advice_sync(
    *, client: StolonClient, uuid: str, body: ApiAutoAdjustAdvice
) -> ApiAutoAdjustAdvice | None:
    """Update auto-adjust advice

    Args:
        uuid (str):
        body (ApiAutoAdjustAdvice):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustAdvice

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiAutoAdjustAdvice

    Returns:
        ApiAutoAdjustAdvice | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.update_auto_adjust_advice",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_auto_adjust_advice_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiAutoAdjustAdvice
) -> Response[ApiAutoAdjustAdvice]:
    """Update auto-adjust advice

    Args:
        uuid (str):
        body (ApiAutoAdjustAdvice):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustAdvice]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiAutoAdjustAdvice

    Returns:
        Response[ApiAutoAdjustAdvice]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.update_auto_adjust_advice",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_auto_adjust_advice_asyncio(
    *, client: StolonClient, uuid: str, body: ApiAutoAdjustAdvice
) -> ApiAutoAdjustAdvice | None:
    """Update auto-adjust advice

    Args:
        uuid (str):
        body (ApiAutoAdjustAdvice):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustAdvice

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiAutoAdjustAdvice

    Returns:
        ApiAutoAdjustAdvice | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.update_auto_adjust_advice",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_auto_adjust_advice_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiAutoAdjustAdvice]:
    """Get auto-adjust advice by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustAdvice]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiAutoAdjustAdvice]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.get_auto_adjust_advice_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_auto_adjust_advice_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiAutoAdjustAdvice | None:
    """Get auto-adjust advice by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustAdvice

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiAutoAdjustAdvice | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.get_auto_adjust_advice_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_auto_adjust_advice_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiAutoAdjustAdvice]:
    """Get auto-adjust advice by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustAdvice]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiAutoAdjustAdvice]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.get_auto_adjust_advice_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_auto_adjust_advice_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiAutoAdjustAdvice | None:
    """Get auto-adjust advice by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustAdvice

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiAutoAdjustAdvice | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.get_auto_adjust_advice_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiAutoAdjustAdvice]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_auto_adjust_advice_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError | bool]:
    """Delete auto-adjust advice

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, bool]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError | bool]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.delete_auto_adjust_advice_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ResponseError, bool]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_auto_adjust_advice_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | bool | None:
    """Delete auto-adjust advice

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, bool]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | bool | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.delete_auto_adjust_advice_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ResponseError, bool]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_auto_adjust_advice_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError | bool]:
    """Delete auto-adjust advice

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, bool]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError | bool]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.delete_auto_adjust_advice_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ResponseError, bool]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_auto_adjust_advice_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | bool | None:
    """Delete auto-adjust advice

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, bool]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | bool | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="auto_adjust_advice.delete_auto_adjust_advice_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ResponseError, bool]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
