"""
Proxied wrapper functions for billing-bookkeeper dev - processing_group_dates.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_processing_group_dates import (
    ApiProcessingGroupDates,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def resolve_processing_group_dates_for_child_sync_detailed(
    *, client: StolonClient, billing_entity_uuid: str, date: Union[Unset, datetime.date] = UNSET
) -> Response[ResponseError]:
    """Resolves the processing group that a child billing entity belongs to and returns the processing
    group's dates

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.resolve_processing_group_dates_for_child",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_processing_group_dates_for_child_sync(
    *, client: StolonClient, billing_entity_uuid: str, date: Union[Unset, datetime.date] = UNSET
) -> ResponseError | None:
    """Resolves the processing group that a child billing entity belongs to and returns the processing
    group's dates

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.resolve_processing_group_dates_for_child",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_processing_group_dates_for_child_asyncio_detailed(
    *, client: StolonClient, billing_entity_uuid: str, date: Union[Unset, datetime.date] = UNSET
) -> Response[ResponseError]:
    """Resolves the processing group that a child billing entity belongs to and returns the processing
    group's dates

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.resolve_processing_group_dates_for_child",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def resolve_processing_group_dates_for_child_asyncio(
    *, client: StolonClient, billing_entity_uuid: str, date: Union[Unset, datetime.date] = UNSET
) -> ResponseError | None:
    """Resolves the processing group that a child billing entity belongs to and returns the processing
    group's dates

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.resolve_processing_group_dates_for_child",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def list_processing_group_dates_sync_detailed(
    *,
    client: StolonClient,
    name: Union[Unset, str] = UNSET,
    hierarchy_type: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Lists processing group dates

    Args:
        name (Union[Unset, str]):
        hierarchy_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                name: Union[Unset, str]
        hierarchy_type: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "name": serialize_argument(name),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.list_processing_group_dates",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def list_processing_group_dates_sync(
    *,
    client: StolonClient,
    name: Union[Unset, str] = UNSET,
    hierarchy_type: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Lists processing group dates

    Args:
        name (Union[Unset, str]):
        hierarchy_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                name: Union[Unset, str]
        hierarchy_type: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "name": serialize_argument(name),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.list_processing_group_dates",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def list_processing_group_dates_asyncio_detailed(
    *,
    client: StolonClient,
    name: Union[Unset, str] = UNSET,
    hierarchy_type: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Lists processing group dates

    Args:
        name (Union[Unset, str]):
        hierarchy_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                name: Union[Unset, str]
        hierarchy_type: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "name": serialize_argument(name),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.list_processing_group_dates",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def list_processing_group_dates_asyncio(
    *,
    client: StolonClient,
    name: Union[Unset, str] = UNSET,
    hierarchy_type: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Lists processing group dates

    Args:
        name (Union[Unset, str]):
        hierarchy_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                name: Union[Unset, str]
        hierarchy_type: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "name": serialize_argument(name),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.list_processing_group_dates",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_processing_group_dates_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ResponseError]:
    """Get processing group dates by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.get_processing_group_dates_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_processing_group_dates_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | None:
    """Get processing group dates by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.get_processing_group_dates_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_processing_group_dates_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ResponseError]:
    """Get processing group dates by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.get_processing_group_dates_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_processing_group_dates_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | None:
    """Get processing group dates by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.get_processing_group_dates_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_posting_date_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    posting_date: Union[Unset, datetime.date] = UNSET,
) -> Response[ResponseError]:
    """Advance posting date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        posting_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        posting_date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "posting_date": serialize_argument(posting_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_posting_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_posting_date_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    posting_date: Union[Unset, datetime.date] = UNSET,
) -> ResponseError | None:
    """Advance posting date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        posting_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        posting_date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "posting_date": serialize_argument(posting_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_posting_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_posting_date_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    posting_date: Union[Unset, datetime.date] = UNSET,
) -> Response[ResponseError]:
    """Advance posting date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        posting_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        posting_date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "posting_date": serialize_argument(posting_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_posting_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_posting_date_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    posting_date: Union[Unset, datetime.date] = UNSET,
) -> ResponseError | None:
    """Advance posting date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        posting_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        posting_date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "posting_date": serialize_argument(posting_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_posting_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_processing_group_dates_by_billing_entity_uuid_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: Union[Unset, str] = UNSET,
    include_name: Union[Unset, bool] = UNSET,
) -> Response[ResponseError]:
    """Get processing group dates by billing entity UUID

    Args:
        billing_entity_uuid (str):
        hierarchy_type (Union[Unset, str]):
        include_name (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: Union[Unset, str]
        include_name: Union[Unset, bool]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "include_name": serialize_argument(include_name),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.get_processing_group_dates_by_billing_entity_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_processing_group_dates_by_billing_entity_uuid_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: Union[Unset, str] = UNSET,
    include_name: Union[Unset, bool] = UNSET,
) -> ResponseError | None:
    """Get processing group dates by billing entity UUID

    Args:
        billing_entity_uuid (str):
        hierarchy_type (Union[Unset, str]):
        include_name (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: Union[Unset, str]
        include_name: Union[Unset, bool]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "include_name": serialize_argument(include_name),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.get_processing_group_dates_by_billing_entity_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_processing_group_dates_by_billing_entity_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: Union[Unset, str] = UNSET,
    include_name: Union[Unset, bool] = UNSET,
) -> Response[ResponseError]:
    """Get processing group dates by billing entity UUID

    Args:
        billing_entity_uuid (str):
        hierarchy_type (Union[Unset, str]):
        include_name (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: Union[Unset, str]
        include_name: Union[Unset, bool]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "include_name": serialize_argument(include_name),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.get_processing_group_dates_by_billing_entity_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_processing_group_dates_by_billing_entity_uuid_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: Union[Unset, str] = UNSET,
    include_name: Union[Unset, bool] = UNSET,
) -> ResponseError | None:
    """Get processing group dates by billing entity UUID

    Args:
        billing_entity_uuid (str):
        hierarchy_type (Union[Unset, str]):
        include_name (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: Union[Unset, str]
        include_name: Union[Unset, bool]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "include_name": serialize_argument(include_name),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.get_processing_group_dates_by_billing_entity_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_processing_group_dates_sync_detailed(
    *, client: StolonClient, body: ApiProcessingGroupDates
) -> Response[ResponseError]:
    """Create processing group dates

    Args:
        body (ApiProcessingGroupDates):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiProcessingGroupDates

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.create_processing_group_dates",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_processing_group_dates_sync(*, client: StolonClient, body: ApiProcessingGroupDates) -> ResponseError | None:
    """Create processing group dates

    Args:
        body (ApiProcessingGroupDates):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiProcessingGroupDates

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.create_processing_group_dates",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_processing_group_dates_asyncio_detailed(
    *, client: StolonClient, body: ApiProcessingGroupDates
) -> Response[ResponseError]:
    """Create processing group dates

    Args:
        body (ApiProcessingGroupDates):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiProcessingGroupDates

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.create_processing_group_dates",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_processing_group_dates_asyncio(
    *, client: StolonClient, body: ApiProcessingGroupDates
) -> ResponseError | None:
    """Create processing group dates

    Args:
        body (ApiProcessingGroupDates):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiProcessingGroupDates

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.create_processing_group_dates",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_billing_date_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    billing_date: Union[Unset, datetime.date] = UNSET,
) -> Response[ResponseError]:
    """Advance billing date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        billing_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        billing_date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "billing_date": serialize_argument(billing_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_billing_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_billing_date_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    billing_date: Union[Unset, datetime.date] = UNSET,
) -> ResponseError | None:
    """Advance billing date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        billing_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        billing_date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "billing_date": serialize_argument(billing_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_billing_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_billing_date_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    billing_date: Union[Unset, datetime.date] = UNSET,
) -> Response[ResponseError]:
    """Advance billing date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        billing_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        billing_date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "billing_date": serialize_argument(billing_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_billing_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_billing_date_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    billing_date: Union[Unset, datetime.date] = UNSET,
) -> ResponseError | None:
    """Advance billing date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        billing_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        billing_date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "billing_date": serialize_argument(billing_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_billing_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_settlement_date_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    settlement_date: Union[Unset, datetime.date] = UNSET,
) -> Response[ResponseError]:
    """Advance settlement date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        settlement_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        settlement_date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "settlement_date": serialize_argument(settlement_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_settlement_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_settlement_date_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    settlement_date: Union[Unset, datetime.date] = UNSET,
) -> ResponseError | None:
    """Advance settlement date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        settlement_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        settlement_date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "settlement_date": serialize_argument(settlement_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_settlement_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_settlement_date_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    settlement_date: Union[Unset, datetime.date] = UNSET,
) -> Response[ResponseError]:
    """Advance settlement date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        settlement_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        settlement_date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "settlement_date": serialize_argument(settlement_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_settlement_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_settlement_date_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    settlement_date: Union[Unset, datetime.date] = UNSET,
) -> ResponseError | None:
    """Advance settlement date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        settlement_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        settlement_date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "settlement_date": serialize_argument(settlement_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_settlement_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_cycle_date_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    cycle_date: Union[Unset, datetime.date] = UNSET,
) -> Response[ResponseError]:
    """Advance cycle date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        cycle_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        cycle_date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "cycle_date": serialize_argument(cycle_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_cycle_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_cycle_date_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    cycle_date: Union[Unset, datetime.date] = UNSET,
) -> ResponseError | None:
    """Advance cycle date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        cycle_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        cycle_date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "cycle_date": serialize_argument(cycle_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_cycle_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_cycle_date_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    cycle_date: Union[Unset, datetime.date] = UNSET,
) -> Response[ResponseError]:
    """Advance cycle date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        cycle_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        cycle_date: Union[Unset, datetime.date]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "cycle_date": serialize_argument(cycle_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_cycle_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def advance_cycle_date_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    cycle_date: Union[Unset, datetime.date] = UNSET,
) -> ResponseError | None:
    """Advance cycle date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        cycle_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        cycle_date: Union[Unset, datetime.date]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "cycle_date": serialize_argument(cycle_date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="processing_group_dates.advance_cycle_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
