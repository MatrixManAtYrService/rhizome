"""
Proxied wrapper functions for billing-bookkeeper dev - settlement.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement import (
    ApiSettlement,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_adjust_info import (
    ApiSettlementAdjustInfo,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_details import (
    ApiSettlementDetails,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_export import (
    ApiSettlementExport,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_tax import (
    ApiSettlementTax,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_settlements_by_uuids_sync_detailed(
    *, client: StolonClient, settlement_uuids: list[str]
) -> Response[ApiSettlement | list["ApiSettlement"]]:
    """Get settlement requests by UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlement, list['ApiSettlement']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        Response[ApiSettlement | list["ApiSettlement"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlements_by_uuids",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlements_by_uuids_sync(
    *, client: StolonClient, settlement_uuids: list[str]
) -> ApiSettlement | list["ApiSettlement"] | None:
    """Get settlement requests by UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlement, list['ApiSettlement']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        ApiSettlement | list["ApiSettlement"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlements_by_uuids",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlements_by_uuids_asyncio_detailed(
    *, client: StolonClient, settlement_uuids: list[str]
) -> Response[ApiSettlement | list["ApiSettlement"]]:
    """Get settlement requests by UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlement, list['ApiSettlement']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        Response[ApiSettlement | list["ApiSettlement"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlements_by_uuids",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlements_by_uuids_asyncio(
    *, client: StolonClient, settlement_uuids: list[str]
) -> ApiSettlement | list["ApiSettlement"] | None:
    """Get settlement requests by UUIDs

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlement, list['ApiSettlement']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        ApiSettlement | list["ApiSettlement"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlements_by_uuids",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_exports_sync_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    billing_entity_uuids: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiSettlementExport | list["ApiSettlementExport"]]:
    """Get export data for settlement requests

    Args:
        date (datetime.date):
        billing_entity_uuids (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementExport, list['ApiSettlementExport']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        billing_entity_uuids: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiSettlementExport | list["ApiSettlementExport"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuids": serialize_argument(billing_entity_uuids),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_exports",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementExport, list["ApiSettlementExport"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_exports_sync(
    *,
    client: StolonClient,
    date: datetime.date,
    billing_entity_uuids: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiSettlementExport | list["ApiSettlementExport"] | None:
    """Get export data for settlement requests

    Args:
        date (datetime.date):
        billing_entity_uuids (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementExport, list['ApiSettlementExport']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        billing_entity_uuids: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiSettlementExport | list["ApiSettlementExport"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuids": serialize_argument(billing_entity_uuids),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_exports",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementExport, list["ApiSettlementExport"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_exports_asyncio_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    billing_entity_uuids: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiSettlementExport | list["ApiSettlementExport"]]:
    """Get export data for settlement requests

    Args:
        date (datetime.date):
        billing_entity_uuids (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementExport, list['ApiSettlementExport']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        billing_entity_uuids: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiSettlementExport | list["ApiSettlementExport"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuids": serialize_argument(billing_entity_uuids),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_exports",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementExport, list["ApiSettlementExport"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_exports_asyncio(
    *,
    client: StolonClient,
    date: datetime.date,
    billing_entity_uuids: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiSettlementExport | list["ApiSettlementExport"] | None:
    """Get export data for settlement requests

    Args:
        date (datetime.date):
        billing_entity_uuids (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementExport, list['ApiSettlementExport']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        billing_entity_uuids: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiSettlementExport | list["ApiSettlementExport"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuids": serialize_argument(billing_entity_uuids),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_exports",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementExport, list["ApiSettlementExport"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiSettlement]:
    """Get a settlement request by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiSettlement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlement]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiSettlement | None:
    """Get a settlement request by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiSettlement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlement]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ApiSettlement]:
    """Get a settlement request by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiSettlement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlement]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiSettlement | None:
    """Get a settlement request by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiSettlement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlement]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_details_by_invoice_info_uuid_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    invoice_info_uuid: str,
    include_actions: Union[Unset, bool] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiSettlementDetails | ResponseError]:
    """Get fee summary data from settlement requests and invoice info using invoice info UUID

    Args:
        r_id (str):
        invoice_info_uuid (str):
        include_actions (Union[Unset, bool]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementDetails, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        invoice_info_uuid: str
        include_actions: Union[Unset, bool]
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementDetails | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "invoice_info_uuid": serialize_argument(invoice_info_uuid),
        "include_actions": serialize_argument(include_actions),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_reseller_settlement_details_by_invoice_info_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_details_by_invoice_info_uuid_sync(
    *,
    client: StolonClient,
    r_id: str,
    invoice_info_uuid: str,
    include_actions: Union[Unset, bool] = UNSET,
    x_clover_appenv: str,
) -> ApiSettlementDetails | ResponseError | None:
    """Get fee summary data from settlement requests and invoice info using invoice info UUID

    Args:
        r_id (str):
        invoice_info_uuid (str):
        include_actions (Union[Unset, bool]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementDetails, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        invoice_info_uuid: str
        include_actions: Union[Unset, bool]
        x_clover_appenv: str

    Returns:
        ApiSettlementDetails | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "invoice_info_uuid": serialize_argument(invoice_info_uuid),
        "include_actions": serialize_argument(include_actions),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_reseller_settlement_details_by_invoice_info_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_details_by_invoice_info_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    invoice_info_uuid: str,
    include_actions: Union[Unset, bool] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiSettlementDetails | ResponseError]:
    """Get fee summary data from settlement requests and invoice info using invoice info UUID

    Args:
        r_id (str):
        invoice_info_uuid (str):
        include_actions (Union[Unset, bool]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementDetails, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        invoice_info_uuid: str
        include_actions: Union[Unset, bool]
        x_clover_appenv: str

    Returns:
        Response[ApiSettlementDetails | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "invoice_info_uuid": serialize_argument(invoice_info_uuid),
        "include_actions": serialize_argument(include_actions),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_reseller_settlement_details_by_invoice_info_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_reseller_settlement_details_by_invoice_info_uuid_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    invoice_info_uuid: str,
    include_actions: Union[Unset, bool] = UNSET,
    x_clover_appenv: str,
) -> ApiSettlementDetails | ResponseError | None:
    """Get fee summary data from settlement requests and invoice info using invoice info UUID

    Args:
        r_id (str):
        invoice_info_uuid (str):
        include_actions (Union[Unset, bool]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementDetails, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        invoice_info_uuid: str
        include_actions: Union[Unset, bool]
        x_clover_appenv: str

    Returns:
        ApiSettlementDetails | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "invoice_info_uuid": serialize_argument(invoice_info_uuid),
        "include_actions": serialize_argument(include_actions),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_reseller_settlement_details_by_invoice_info_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_details_by_settlement_uuid_sync_detailed(
    *, client: StolonClient, settlement_uuid: str, include_actions: Union[Unset, bool] = UNSET
) -> Response[ApiSettlementDetails | ResponseError]:
    """Get fee summary data from settlement requests and invoice info using settlement UUID

    Args:
        settlement_uuid (str):
        include_actions (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementDetails, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuid: str
        include_actions: Union[Unset, bool]

    Returns:
        Response[ApiSettlementDetails | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "settlement_uuid": serialize_argument(settlement_uuid),
        "include_actions": serialize_argument(include_actions),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_details_by_settlement_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_details_by_settlement_uuid_sync(
    *, client: StolonClient, settlement_uuid: str, include_actions: Union[Unset, bool] = UNSET
) -> ApiSettlementDetails | ResponseError | None:
    """Get fee summary data from settlement requests and invoice info using settlement UUID

    Args:
        settlement_uuid (str):
        include_actions (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementDetails, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuid: str
        include_actions: Union[Unset, bool]

    Returns:
        ApiSettlementDetails | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "settlement_uuid": serialize_argument(settlement_uuid),
        "include_actions": serialize_argument(include_actions),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_details_by_settlement_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_details_by_settlement_uuid_asyncio_detailed(
    *, client: StolonClient, settlement_uuid: str, include_actions: Union[Unset, bool] = UNSET
) -> Response[ApiSettlementDetails | ResponseError]:
    """Get fee summary data from settlement requests and invoice info using settlement UUID

    Args:
        settlement_uuid (str):
        include_actions (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementDetails, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuid: str
        include_actions: Union[Unset, bool]

    Returns:
        Response[ApiSettlementDetails | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "settlement_uuid": serialize_argument(settlement_uuid),
        "include_actions": serialize_argument(include_actions),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_details_by_settlement_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_details_by_settlement_uuid_asyncio(
    *, client: StolonClient, settlement_uuid: str, include_actions: Union[Unset, bool] = UNSET
) -> ApiSettlementDetails | ResponseError | None:
    """Get fee summary data from settlement requests and invoice info using settlement UUID

    Args:
        settlement_uuid (str):
        include_actions (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementDetails, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuid: str
        include_actions: Union[Unset, bool]

    Returns:
        ApiSettlementDetails | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "settlement_uuid": serialize_argument(settlement_uuid),
        "include_actions": serialize_argument(include_actions),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_details_by_settlement_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlements_sync_detailed(
    *,
    client: StolonClient,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiSettlement | list["ApiSettlement"]]:
    """Get settlement requests

    Args:
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlement, list['ApiSettlement']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiSettlement | list["ApiSettlement"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlements",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlements_sync(
    *,
    client: StolonClient,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiSettlement | list["ApiSettlement"] | None:
    """Get settlement requests

    Args:
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlement, list['ApiSettlement']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiSettlement | list["ApiSettlement"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlements",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlements_asyncio_detailed(
    *,
    client: StolonClient,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiSettlement | list["ApiSettlement"]]:
    """Get settlement requests

    Args:
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlement, list['ApiSettlement']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiSettlement | list["ApiSettlement"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlements",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlements_asyncio(
    *,
    client: StolonClient,
    date: Union[Unset, datetime.date] = UNSET,
    billing_entity_uuid: Union[Unset, str] = UNSET,
    entity_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiSettlement | list["ApiSettlement"] | None:
    """Get settlement requests

    Args:
        date (Union[Unset, datetime.date]):
        billing_entity_uuid (Union[Unset, str]):
        entity_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlement, list['ApiSettlement']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: Union[Unset, datetime.date]
        billing_entity_uuid: Union[Unset, str]
        entity_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiSettlement | list["ApiSettlement"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "entity_uuid": serialize_argument(entity_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlements",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_adjustment_info_by_settlement_uuids_sync_detailed(
    *, client: StolonClient, settlement_uuids: list[str]
) -> Response[ResponseError | list["ApiSettlementAdjustInfo"]]:
    """Get fee summary data from settlement requests and invoice info using settlement UUID

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiSettlementAdjustInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        Response[ResponseError | list["ApiSettlementAdjustInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_adjustment_info_by_settlement_uuids",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiSettlementAdjustInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_adjustment_info_by_settlement_uuids_sync(
    *, client: StolonClient, settlement_uuids: list[str]
) -> ResponseError | list["ApiSettlementAdjustInfo"] | None:
    """Get fee summary data from settlement requests and invoice info using settlement UUID

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiSettlementAdjustInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        ResponseError | list["ApiSettlementAdjustInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_adjustment_info_by_settlement_uuids",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiSettlementAdjustInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_adjustment_info_by_settlement_uuids_asyncio_detailed(
    *, client: StolonClient, settlement_uuids: list[str]
) -> Response[ResponseError | list["ApiSettlementAdjustInfo"]]:
    """Get fee summary data from settlement requests and invoice info using settlement UUID

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiSettlementAdjustInfo']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        Response[ResponseError | list["ApiSettlementAdjustInfo"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_adjustment_info_by_settlement_uuids",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiSettlementAdjustInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_adjustment_info_by_settlement_uuids_asyncio(
    *, client: StolonClient, settlement_uuids: list[str]
) -> ResponseError | list["ApiSettlementAdjustInfo"] | None:
    """Get fee summary data from settlement requests and invoice info using settlement UUID

    Args:
        settlement_uuids (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiSettlementAdjustInfo']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                settlement_uuids: list[str]

    Returns:
        ResponseError | list["ApiSettlementAdjustInfo"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"settlement_uuids": serialize_argument(settlement_uuids)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_adjustment_info_by_settlement_uuids",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiSettlementAdjustInfo"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def set_settlement_tax_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiSettlementTax
) -> Response[ApiSettlement]:
    """Set tax amounts on a settlement request

    Args:
        uuid (str):
        body (ApiSettlementTax):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiSettlementTax

    Returns:
        Response[ApiSettlement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.set_settlement_tax",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlement]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def set_settlement_tax_sync(*, client: StolonClient, uuid: str, body: ApiSettlementTax) -> ApiSettlement | None:
    """Set tax amounts on a settlement request

    Args:
        uuid (str):
        body (ApiSettlementTax):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiSettlementTax

    Returns:
        ApiSettlement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.set_settlement_tax",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlement]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def set_settlement_tax_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiSettlementTax
) -> Response[ApiSettlement]:
    """Set tax amounts on a settlement request

    Args:
        uuid (str):
        body (ApiSettlementTax):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiSettlement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiSettlementTax

    Returns:
        Response[ApiSettlement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.set_settlement_tax",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiSettlement]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def set_settlement_tax_asyncio(*, client: StolonClient, uuid: str, body: ApiSettlementTax) -> ApiSettlement | None:
    """Set tax amounts on a settlement request

    Args:
        uuid (str):
        body (ApiSettlementTax):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiSettlement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiSettlementTax

    Returns:
        ApiSettlement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.set_settlement_tax",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiSettlement]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_details_by_invoice_info_uuid_sync_detailed(
    *, client: StolonClient, invoice_info_uuid: str, include_actions: Union[Unset, bool] = UNSET
) -> Response[ApiSettlementDetails | ResponseError]:
    """Get fee summary data from settlement requests and invoice info using invoice info UUID

    Args:
        invoice_info_uuid (str):
        include_actions (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementDetails, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                invoice_info_uuid: str
        include_actions: Union[Unset, bool]

    Returns:
        Response[ApiSettlementDetails | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "invoice_info_uuid": serialize_argument(invoice_info_uuid),
        "include_actions": serialize_argument(include_actions),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_details_by_invoice_info_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_details_by_invoice_info_uuid_sync(
    *, client: StolonClient, invoice_info_uuid: str, include_actions: Union[Unset, bool] = UNSET
) -> ApiSettlementDetails | ResponseError | None:
    """Get fee summary data from settlement requests and invoice info using invoice info UUID

    Args:
        invoice_info_uuid (str):
        include_actions (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementDetails, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                invoice_info_uuid: str
        include_actions: Union[Unset, bool]

    Returns:
        ApiSettlementDetails | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "invoice_info_uuid": serialize_argument(invoice_info_uuid),
        "include_actions": serialize_argument(include_actions),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_details_by_invoice_info_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_details_by_invoice_info_uuid_asyncio_detailed(
    *, client: StolonClient, invoice_info_uuid: str, include_actions: Union[Unset, bool] = UNSET
) -> Response[ApiSettlementDetails | ResponseError]:
    """Get fee summary data from settlement requests and invoice info using invoice info UUID

    Args:
        invoice_info_uuid (str):
        include_actions (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementDetails, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                invoice_info_uuid: str
        include_actions: Union[Unset, bool]

    Returns:
        Response[ApiSettlementDetails | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "invoice_info_uuid": serialize_argument(invoice_info_uuid),
        "include_actions": serialize_argument(include_actions),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_details_by_invoice_info_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_details_by_invoice_info_uuid_asyncio(
    *, client: StolonClient, invoice_info_uuid: str, include_actions: Union[Unset, bool] = UNSET
) -> ApiSettlementDetails | ResponseError | None:
    """Get fee summary data from settlement requests and invoice info using invoice info UUID

    Args:
        invoice_info_uuid (str):
        include_actions (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementDetails, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                invoice_info_uuid: str
        include_actions: Union[Unset, bool]

    Returns:
        ApiSettlementDetails | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "invoice_info_uuid": serialize_argument(invoice_info_uuid),
        "include_actions": serialize_argument(include_actions),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.get_settlement_details_by_invoice_info_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiSettlementDetails, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def set_settlement_tax_for_billing_entity_sync_detailed(
    *, client: StolonClient, billing_entity_uuid: str, body: list["ApiSettlementTax"]
) -> Response[ApiSettlement | list["ApiSettlement"]]:
    """Set tax amounts for a collection of settlement requests for a billing entity

    Args:
        billing_entity_uuid (str):
        body (list['ApiSettlementTax']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlement, list['ApiSettlement']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        body: list["ApiSettlementTax"]

    Returns:
        Response[ApiSettlement | list["ApiSettlement"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "body": serialize_argument(body),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.set_settlement_tax_for_billing_entity",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def set_settlement_tax_for_billing_entity_sync(
    *, client: StolonClient, billing_entity_uuid: str, body: list["ApiSettlementTax"]
) -> ApiSettlement | list["ApiSettlement"] | None:
    """Set tax amounts for a collection of settlement requests for a billing entity

    Args:
        billing_entity_uuid (str):
        body (list['ApiSettlementTax']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlement, list['ApiSettlement']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        body: list["ApiSettlementTax"]

    Returns:
        ApiSettlement | list["ApiSettlement"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "body": serialize_argument(body),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.set_settlement_tax_for_billing_entity",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def set_settlement_tax_for_billing_entity_asyncio_detailed(
    *, client: StolonClient, billing_entity_uuid: str, body: list["ApiSettlementTax"]
) -> Response[ApiSettlement | list["ApiSettlement"]]:
    """Set tax amounts for a collection of settlement requests for a billing entity

    Args:
        billing_entity_uuid (str):
        body (list['ApiSettlementTax']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlement, list['ApiSettlement']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        body: list["ApiSettlementTax"]

    Returns:
        Response[ApiSettlement | list["ApiSettlement"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "body": serialize_argument(body),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.set_settlement_tax_for_billing_entity",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def set_settlement_tax_for_billing_entity_asyncio(
    *, client: StolonClient, billing_entity_uuid: str, body: list["ApiSettlementTax"]
) -> ApiSettlement | list["ApiSettlement"] | None:
    """Set tax amounts for a collection of settlement requests for a billing entity

    Args:
        billing_entity_uuid (str):
        body (list['ApiSettlementTax']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlement, list['ApiSettlement']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        body: list["ApiSettlementTax"]

    Returns:
        ApiSettlement | list["ApiSettlement"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "body": serialize_argument(body),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="settlement.set_settlement_tax_for_billing_entity",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlement, list["ApiSettlement"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
