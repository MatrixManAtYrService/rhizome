"""
Proxied wrapper functions for billing-bookkeeper dev - prototype_fee_rate.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_prototype_fee_rate import (
    ApiPrototypeFeeRate,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_prototype_fee_rate_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiPrototypeFeeRate]:
    """Get a prototype fee rate by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPrototypeFeeRate]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiPrototypeFeeRate]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.get_prototype_fee_rate_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_prototype_fee_rate_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiPrototypeFeeRate | None:
    """Get a prototype fee rate by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPrototypeFeeRate

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiPrototypeFeeRate | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.get_prototype_fee_rate_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_prototype_fee_rate_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiPrototypeFeeRate]:
    """Get a prototype fee rate by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPrototypeFeeRate]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiPrototypeFeeRate]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.get_prototype_fee_rate_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_prototype_fee_rate_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiPrototypeFeeRate | None:
    """Get a prototype fee rate by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPrototypeFeeRate

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiPrototypeFeeRate | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.get_prototype_fee_rate_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_prototype_fee_rate_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiPrototypeFeeRate
) -> Response[ApiPrototypeFeeRate]:
    """Update prototype fee rate

    Args:
        uuid (str):
        body (ApiPrototypeFeeRate):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPrototypeFeeRate]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiPrototypeFeeRate

    Returns:
        Response[ApiPrototypeFeeRate]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.update_prototype_fee_rate",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_prototype_fee_rate_sync(
    *, client: StolonClient, uuid: str, body: ApiPrototypeFeeRate
) -> ApiPrototypeFeeRate | None:
    """Update prototype fee rate

    Args:
        uuid (str):
        body (ApiPrototypeFeeRate):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPrototypeFeeRate

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiPrototypeFeeRate

    Returns:
        ApiPrototypeFeeRate | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.update_prototype_fee_rate",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_prototype_fee_rate_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiPrototypeFeeRate
) -> Response[ApiPrototypeFeeRate]:
    """Update prototype fee rate

    Args:
        uuid (str):
        body (ApiPrototypeFeeRate):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPrototypeFeeRate]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiPrototypeFeeRate

    Returns:
        Response[ApiPrototypeFeeRate]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.update_prototype_fee_rate",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_prototype_fee_rate_asyncio(
    *, client: StolonClient, uuid: str, body: ApiPrototypeFeeRate
) -> ApiPrototypeFeeRate | None:
    """Update prototype fee rate

    Args:
        uuid (str):
        body (ApiPrototypeFeeRate):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPrototypeFeeRate

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiPrototypeFeeRate

    Returns:
        ApiPrototypeFeeRate | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.update_prototype_fee_rate",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_prototype_fee_rates_sync_detailed(
    *, client: StolonClient, body: list["ApiPrototypeFeeRate"]
) -> Response[ApiPrototypeFeeRate]:
    """Create prototype fee rate

    Args:
        body (list['ApiPrototypeFeeRate']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPrototypeFeeRate]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list["ApiPrototypeFeeRate"]

    Returns:
        Response[ApiPrototypeFeeRate]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.create_prototype_fee_rates",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_prototype_fee_rates_sync(
    *, client: StolonClient, body: list["ApiPrototypeFeeRate"]
) -> ApiPrototypeFeeRate | None:
    """Create prototype fee rate

    Args:
        body (list['ApiPrototypeFeeRate']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPrototypeFeeRate

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list["ApiPrototypeFeeRate"]

    Returns:
        ApiPrototypeFeeRate | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.create_prototype_fee_rates",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_prototype_fee_rates_asyncio_detailed(
    *, client: StolonClient, body: list["ApiPrototypeFeeRate"]
) -> Response[ApiPrototypeFeeRate]:
    """Create prototype fee rate

    Args:
        body (list['ApiPrototypeFeeRate']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPrototypeFeeRate]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list["ApiPrototypeFeeRate"]

    Returns:
        Response[ApiPrototypeFeeRate]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.create_prototype_fee_rates",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_prototype_fee_rates_asyncio(
    *, client: StolonClient, body: list["ApiPrototypeFeeRate"]
) -> ApiPrototypeFeeRate | None:
    """Create prototype fee rate

    Args:
        body (list['ApiPrototypeFeeRate']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPrototypeFeeRate

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list["ApiPrototypeFeeRate"]

    Returns:
        ApiPrototypeFeeRate | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.create_prototype_fee_rates",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPrototypeFeeRate]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_resolved_prototype_fee_rates_sync_detailed(
    *,
    client: StolonClient,
    hierarchy_type: str,
    prototype_fee_set_uuid: str,
    billing_entity_uuid: str,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_rates_be_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get resolved prototype fee rates by prototype fee set, hierarchy type, billing entity, date, fee
    category, fee code, and/or currency

    Args:
        hierarchy_type (str):
        prototype_fee_set_uuid (str):
        billing_entity_uuid (str):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_rates_be_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                hierarchy_type: str
        prototype_fee_set_uuid: str
        billing_entity_uuid: str
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_rates_be_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "hierarchy_type": serialize_argument(hierarchy_type),
        "prototype_fee_set_uuid": serialize_argument(prototype_fee_set_uuid),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "currency": serialize_argument(currency),
        "exclude_rates_be_uuid": serialize_argument(exclude_rates_be_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.get_resolved_prototype_fee_rates",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_resolved_prototype_fee_rates_sync(
    *,
    client: StolonClient,
    hierarchy_type: str,
    prototype_fee_set_uuid: str,
    billing_entity_uuid: str,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_rates_be_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get resolved prototype fee rates by prototype fee set, hierarchy type, billing entity, date, fee
    category, fee code, and/or currency

    Args:
        hierarchy_type (str):
        prototype_fee_set_uuid (str):
        billing_entity_uuid (str):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_rates_be_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                hierarchy_type: str
        prototype_fee_set_uuid: str
        billing_entity_uuid: str
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_rates_be_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "hierarchy_type": serialize_argument(hierarchy_type),
        "prototype_fee_set_uuid": serialize_argument(prototype_fee_set_uuid),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "currency": serialize_argument(currency),
        "exclude_rates_be_uuid": serialize_argument(exclude_rates_be_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.get_resolved_prototype_fee_rates",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_resolved_prototype_fee_rates_asyncio_detailed(
    *,
    client: StolonClient,
    hierarchy_type: str,
    prototype_fee_set_uuid: str,
    billing_entity_uuid: str,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_rates_be_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError]:
    """Get resolved prototype fee rates by prototype fee set, hierarchy type, billing entity, date, fee
    category, fee code, and/or currency

    Args:
        hierarchy_type (str):
        prototype_fee_set_uuid (str):
        billing_entity_uuid (str):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_rates_be_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                hierarchy_type: str
        prototype_fee_set_uuid: str
        billing_entity_uuid: str
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_rates_be_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "hierarchy_type": serialize_argument(hierarchy_type),
        "prototype_fee_set_uuid": serialize_argument(prototype_fee_set_uuid),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "currency": serialize_argument(currency),
        "exclude_rates_be_uuid": serialize_argument(exclude_rates_be_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.get_resolved_prototype_fee_rates",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_resolved_prototype_fee_rates_asyncio(
    *,
    client: StolonClient,
    hierarchy_type: str,
    prototype_fee_set_uuid: str,
    billing_entity_uuid: str,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_rates_be_uuid: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | None:
    """Get resolved prototype fee rates by prototype fee set, hierarchy type, billing entity, date, fee
    category, fee code, and/or currency

    Args:
        hierarchy_type (str):
        prototype_fee_set_uuid (str):
        billing_entity_uuid (str):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_rates_be_uuid (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                hierarchy_type: str
        prototype_fee_set_uuid: str
        billing_entity_uuid: str
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_rates_be_uuid: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "hierarchy_type": serialize_argument(hierarchy_type),
        "prototype_fee_set_uuid": serialize_argument(prototype_fee_set_uuid),
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "currency": serialize_argument(currency),
        "exclude_rates_be_uuid": serialize_argument(exclude_rates_be_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="prototype_fee_rate.get_resolved_prototype_fee_rates",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
