"""
Proxied wrapper functions for billing-bookkeeper dev - fee_summary.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_summary import create_fee_summary
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_summary import get_fee_summary_billing_dates_by_billing_entity_uuid
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_summary import get_fee_summary_by_billing_entity_and_billing_date
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_summary import get_fee_summary_by_uuid
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.fee_summary import get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_fee_summary import ApiFeeSummary
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_fee_summary_extended import ApiFeeSummaryExtended
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_fee_summary_fee_category_report import ApiFeeSummaryFeeCategoryReport
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import ResponseError
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import datetime
import json


def get_fee_summary_by_uuid_sync_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiFeeSummaryExtended | ResponseError]:
    """Get fee summary by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeSummaryExtended, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiFeeSummaryExtended | ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_summary_by_uuid_sync(
    *,
    client: StolonClient,
    uuid: str
) -> ApiFeeSummaryExtended | ResponseError | None:
    """Get fee summary by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeSummaryExtended, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiFeeSummaryExtended | ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_summary_by_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str
) -> Response[ApiFeeSummaryExtended | ResponseError]:
    """Get fee summary by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeSummaryExtended, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiFeeSummaryExtended | ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_summary_by_uuid_asyncio(
    *,
    client: StolonClient,
    uuid: str
) -> ApiFeeSummaryExtended | ResponseError | None:
    """Get fee summary by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeSummaryExtended, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiFeeSummaryExtended | ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_by_uuid._get_kwargs(uuid=uuid)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_fee_summary_sync_detailed(
    *,
    client: StolonClient,
    body: ApiFeeSummary
) -> Response[ApiFeeSummary]:
    """Create fee summary

    Args:
        body (ApiFeeSummary):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiFeeSummary]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiFeeSummary

    Returns:
        Response[ApiFeeSummary]
    """

    # Extract request parameters from generated function
    kwargs = create_fee_summary._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiFeeSummary | None
    if body_json and proxy_response.status_code == 200 and ApiFeeSummary:
        parsed = ApiFeeSummary.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_fee_summary_sync(
    *,
    client: StolonClient,
    body: ApiFeeSummary
) -> ApiFeeSummary | None:
    """Create fee summary

    Args:
        body (ApiFeeSummary):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiFeeSummary

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiFeeSummary

    Returns:
        ApiFeeSummary | None
    """

    # Extract request parameters from generated function
    kwargs = create_fee_summary._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiFeeSummary.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_fee_summary_asyncio_detailed(
    *,
    client: StolonClient,
    body: ApiFeeSummary
) -> Response[ApiFeeSummary]:
    """Create fee summary

    Args:
        body (ApiFeeSummary):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiFeeSummary]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiFeeSummary

    Returns:
        Response[ApiFeeSummary]
    """

    # Extract request parameters from generated function
    kwargs = create_fee_summary._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiFeeSummary | None
    if body_json and proxy_response.status_code == 200 and ApiFeeSummary:
        parsed = ApiFeeSummary.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_fee_summary_asyncio(
    *,
    client: StolonClient,
    body: ApiFeeSummary
) -> ApiFeeSummary | None:
    """Create fee summary

    Args:
        body (ApiFeeSummary):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiFeeSummary

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiFeeSummary

    Returns:
        ApiFeeSummary | None
    """

    # Extract request parameters from generated function
    kwargs = create_fee_summary._get_kwargs(body=body)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiFeeSummary.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_fee_summary_by_billing_entity_and_billing_date_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    fee_category: Union[Unset, list[str]] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_zero_amounts: Union[Unset, bool] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[ResponseError]:
    """Get fee summary(ies) for a billing entity

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):
        fee_category (Union[Unset, list[str]]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_zero_amounts (Union[Unset, bool]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        date: Union[Unset, datetime.date]
        fee_category: Union[Unset, list[str]]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_zero_amounts: Union[Unset, bool]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_by_billing_entity_and_billing_date._get_kwargs(billing_entity_uuid=billing_entity_uuid, date=date, fee_category=fee_category, fee_code=fee_code, currency=currency, exclude_zero_amounts=exclude_zero_amounts, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_summary_by_billing_entity_and_billing_date_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    fee_category: Union[Unset, list[str]] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_zero_amounts: Union[Unset, bool] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> ResponseError | None:
    """Get fee summary(ies) for a billing entity

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):
        fee_category (Union[Unset, list[str]]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_zero_amounts (Union[Unset, bool]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        date: Union[Unset, datetime.date]
        fee_category: Union[Unset, list[str]]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_zero_amounts: Union[Unset, bool]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_by_billing_entity_and_billing_date._get_kwargs(billing_entity_uuid=billing_entity_uuid, date=date, fee_category=fee_category, fee_code=fee_code, currency=currency, exclude_zero_amounts=exclude_zero_amounts, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_fee_summary_by_billing_entity_and_billing_date_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    fee_category: Union[Unset, list[str]] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_zero_amounts: Union[Unset, bool] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[ResponseError]:
    """Get fee summary(ies) for a billing entity

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):
        fee_category (Union[Unset, list[str]]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_zero_amounts (Union[Unset, bool]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        date: Union[Unset, datetime.date]
        fee_category: Union[Unset, list[str]]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_zero_amounts: Union[Unset, bool]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_by_billing_entity_and_billing_date._get_kwargs(billing_entity_uuid=billing_entity_uuid, date=date, fee_category=fee_category, fee_code=fee_code, currency=currency, exclude_zero_amounts=exclude_zero_amounts, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_summary_by_billing_entity_and_billing_date_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    date: Union[Unset, datetime.date] = UNSET,
    fee_category: Union[Unset, list[str]] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_zero_amounts: Union[Unset, bool] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> ResponseError | None:
    """Get fee summary(ies) for a billing entity

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):
        fee_category (Union[Unset, list[str]]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_zero_amounts (Union[Unset, bool]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        date: Union[Unset, datetime.date]
        fee_category: Union[Unset, list[str]]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_zero_amounts: Union[Unset, bool]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_by_billing_entity_and_billing_date._get_kwargs(billing_entity_uuid=billing_entity_uuid, date=date, fee_category=fee_category, fee_code=fee_code, currency=currency, exclude_zero_amounts=exclude_zero_amounts, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_fee_summary_billing_dates_by_billing_entity_uuid_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[ResponseError | list[datetime.date]]:
    """Get billing dates for the summarized fees for a billing entity UUID

    Args:
        billing_entity_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list[datetime.date]]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list[datetime.date]]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_billing_dates_by_billing_entity_uuid._get_kwargs(billing_entity_uuid=billing_entity_uuid, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_summary_billing_dates_by_billing_entity_uuid_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> ResponseError | list[datetime.date] | None:
    """Get billing dates for the summarized fees for a billing entity UUID

    Args:
        billing_entity_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list[datetime.date]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list[datetime.date] | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_billing_dates_by_billing_entity_uuid._get_kwargs(billing_entity_uuid=billing_entity_uuid, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_summary_billing_dates_by_billing_entity_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> Response[ResponseError | list[datetime.date]]:
    """Get billing dates for the summarized fees for a billing entity UUID

    Args:
        billing_entity_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list[datetime.date]]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list[datetime.date]]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_billing_dates_by_billing_entity_uuid._get_kwargs(billing_entity_uuid=billing_entity_uuid, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_summary_billing_dates_by_billing_entity_uuid_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET
) -> ResponseError | list[datetime.date] | None:
    """Get billing dates for the summarized fees for a billing entity UUID

    Args:
        billing_entity_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list[datetime.date]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list[datetime.date] | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_billing_dates_by_billing_entity_uuid._get_kwargs(billing_entity_uuid=billing_entity_uuid, page_size=page_size, page_number=page_number)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    start_date: datetime.date,
    end_date: datetime.date
) -> Response[ApiFeeSummaryFeeCategoryReport | ResponseError]:
    """Get fee summary totals grouped by fee categories by billing entity UUID and date range

    Args:
        billing_entity_uuid (str):
        start_date (datetime.date):
        end_date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeSummaryFeeCategoryReport, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        start_date: datetime.date
        end_date: datetime.date

    Returns:
        Response[ApiFeeSummaryFeeCategoryReport | ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range._get_kwargs(billing_entity_uuid=billing_entity_uuid, start_date=start_date, end_date=end_date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    start_date: datetime.date,
    end_date: datetime.date
) -> ApiFeeSummaryFeeCategoryReport | ResponseError | None:
    """Get fee summary totals grouped by fee categories by billing entity UUID and date range

    Args:
        billing_entity_uuid (str):
        start_date (datetime.date):
        end_date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeSummaryFeeCategoryReport, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        start_date: datetime.date
        end_date: datetime.date

    Returns:
        ApiFeeSummaryFeeCategoryReport | ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range._get_kwargs(billing_entity_uuid=billing_entity_uuid, start_date=start_date, end_date=end_date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    start_date: datetime.date,
    end_date: datetime.date
) -> Response[ApiFeeSummaryFeeCategoryReport | ResponseError]:
    """Get fee summary totals grouped by fee categories by billing entity UUID and date range

    Args:
        billing_entity_uuid (str):
        start_date (datetime.date):
        end_date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeSummaryFeeCategoryReport, ResponseError]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        start_date: datetime.date
        end_date: datetime.date

    Returns:
        Response[ApiFeeSummaryFeeCategoryReport | ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range._get_kwargs(billing_entity_uuid=billing_entity_uuid, start_date=start_date, end_date=end_date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    start_date: datetime.date,
    end_date: datetime.date
) -> ApiFeeSummaryFeeCategoryReport | ResponseError | None:
    """Get fee summary totals grouped by fee categories by billing entity UUID and date range

    Args:
        billing_entity_uuid (str):
        start_date (datetime.date):
        end_date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeSummaryFeeCategoryReport, ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str
        start_date: datetime.date
        end_date: datetime.date

    Returns:
        ApiFeeSummaryFeeCategoryReport | ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_fee_summary_fee_categories_by_billing_entity_uuid_and_date_range._get_kwargs(billing_entity_uuid=billing_entity_uuid, start_date=start_date, end_date=end_date)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None

