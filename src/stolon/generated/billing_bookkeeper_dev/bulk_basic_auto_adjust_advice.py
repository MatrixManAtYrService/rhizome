"""
Proxied wrapper functions for billing-bookkeeper dev - bulk_basic_auto_adjust_advice.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.bulk_basic_auto_adjust_advice import create_basic_bulk_auto_adjust_advice
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_bulk_auto_adjust_advice import ApiBulkAutoAdjustAdvice
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.create_basic_bulk_auto_adjust_advice_body import CreateBasicBulkAutoAdjustAdviceBody
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from typing import Any
import datetime
import json


def create_basic_bulk_auto_adjust_advice_sync_detailed(
    *,
    client: StolonClient,
    body: CreateBasicBulkAutoAdjustAdviceBody,
    rule_uuid: str,
    start_date: datetime.date,
    total_periods: int,
    max_units: float,
    max_amount: float,
    currency: str,
    reference: str,
    email_address: str
) -> Response[ApiBulkAutoAdjustAdvice]:
    """Create bulk basic auto-adjust advice

    Args:
        rule_uuid (str):
        start_date (datetime.date):
        total_periods (int):
        max_units (float):
        max_amount (float):
        currency (str):
        reference (str):
        email_address (str):
        body (CreateBasicBulkAutoAdjustAdviceBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBulkAutoAdjustAdvice]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: CreateBasicBulkAutoAdjustAdviceBody
        rule_uuid: str
        start_date: datetime.date
        total_periods: int
        max_units: float
        max_amount: float
        currency: str
        reference: str
        email_address: str

    Returns:
        Response[ApiBulkAutoAdjustAdvice]
    """

    # Extract request parameters from generated function
    kwargs = create_basic_bulk_auto_adjust_advice._get_kwargs(body=body, rule_uuid=rule_uuid, start_date=start_date, total_periods=total_periods, max_units=max_units, max_amount=max_amount, currency=currency, reference=reference, email_address=email_address)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBulkAutoAdjustAdvice | None
    if body_json and proxy_response.status_code == 200 and ApiBulkAutoAdjustAdvice:
        parsed = ApiBulkAutoAdjustAdvice.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_basic_bulk_auto_adjust_advice_sync(
    *,
    client: StolonClient,
    body: CreateBasicBulkAutoAdjustAdviceBody,
    rule_uuid: str,
    start_date: datetime.date,
    total_periods: int,
    max_units: float,
    max_amount: float,
    currency: str,
    reference: str,
    email_address: str
) -> ApiBulkAutoAdjustAdvice | None:
    """Create bulk basic auto-adjust advice

    Args:
        rule_uuid (str):
        start_date (datetime.date):
        total_periods (int):
        max_units (float):
        max_amount (float):
        currency (str):
        reference (str):
        email_address (str):
        body (CreateBasicBulkAutoAdjustAdviceBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBulkAutoAdjustAdvice

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: CreateBasicBulkAutoAdjustAdviceBody
        rule_uuid: str
        start_date: datetime.date
        total_periods: int
        max_units: float
        max_amount: float
        currency: str
        reference: str
        email_address: str

    Returns:
        ApiBulkAutoAdjustAdvice | None
    """

    # Extract request parameters from generated function
    kwargs = create_basic_bulk_auto_adjust_advice._get_kwargs(body=body, rule_uuid=rule_uuid, start_date=start_date, total_periods=total_periods, max_units=max_units, max_amount=max_amount, currency=currency, reference=reference, email_address=email_address)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBulkAutoAdjustAdvice.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_basic_bulk_auto_adjust_advice_asyncio_detailed(
    *,
    client: StolonClient,
    body: CreateBasicBulkAutoAdjustAdviceBody,
    rule_uuid: str,
    start_date: datetime.date,
    total_periods: int,
    max_units: float,
    max_amount: float,
    currency: str,
    reference: str,
    email_address: str
) -> Response[ApiBulkAutoAdjustAdvice]:
    """Create bulk basic auto-adjust advice

    Args:
        rule_uuid (str):
        start_date (datetime.date):
        total_periods (int):
        max_units (float):
        max_amount (float):
        currency (str):
        reference (str):
        email_address (str):
        body (CreateBasicBulkAutoAdjustAdviceBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBulkAutoAdjustAdvice]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: CreateBasicBulkAutoAdjustAdviceBody
        rule_uuid: str
        start_date: datetime.date
        total_periods: int
        max_units: float
        max_amount: float
        currency: str
        reference: str
        email_address: str

    Returns:
        Response[ApiBulkAutoAdjustAdvice]
    """

    # Extract request parameters from generated function
    kwargs = create_basic_bulk_auto_adjust_advice._get_kwargs(body=body, rule_uuid=rule_uuid, start_date=start_date, total_periods=total_periods, max_units=max_units, max_amount=max_amount, currency=currency, reference=reference, email_address=email_address)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiBulkAutoAdjustAdvice | None
    if body_json and proxy_response.status_code == 200 and ApiBulkAutoAdjustAdvice:
        parsed = ApiBulkAutoAdjustAdvice.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_basic_bulk_auto_adjust_advice_asyncio(
    *,
    client: StolonClient,
    body: CreateBasicBulkAutoAdjustAdviceBody,
    rule_uuid: str,
    start_date: datetime.date,
    total_periods: int,
    max_units: float,
    max_amount: float,
    currency: str,
    reference: str,
    email_address: str
) -> ApiBulkAutoAdjustAdvice | None:
    """Create bulk basic auto-adjust advice

    Args:
        rule_uuid (str):
        start_date (datetime.date):
        total_periods (int):
        max_units (float):
        max_amount (float):
        currency (str):
        reference (str):
        email_address (str):
        body (CreateBasicBulkAutoAdjustAdviceBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBulkAutoAdjustAdvice

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: CreateBasicBulkAutoAdjustAdviceBody
        rule_uuid: str
        start_date: datetime.date
        total_periods: int
        max_units: float
        max_amount: float
        currency: str
        reference: str
        email_address: str

    Returns:
        ApiBulkAutoAdjustAdvice | None
    """

    # Extract request parameters from generated function
    kwargs = create_basic_bulk_auto_adjust_advice._get_kwargs(body=body, rule_uuid=rule_uuid, start_date=start_date, total_periods=total_periods, max_units=max_units, max_amount=max_amount, currency=currency, reference=reference, email_address=email_address)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBulkAutoAdjustAdvice.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

