"""
Proxied wrapper functions for billing-bookkeeper dev - fee_ctd.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_fee_ctd import ApiFeeCtd
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_fee_ctd_extended import (
    ApiFeeCtdExtended,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_fee_ctd_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiFeeCtdExtended | ResponseError]:
    """Get current-to-date (CTD) fee by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCtdExtended, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiFeeCtdExtended | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.get_fee_ctd_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCtdExtended, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_ctd_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiFeeCtdExtended | ResponseError | None:
    """Get current-to-date (CTD) fee by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCtdExtended, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiFeeCtdExtended | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.get_fee_ctd_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCtdExtended, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_ctd_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiFeeCtdExtended | ResponseError]:
    """Get current-to-date (CTD) fee by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCtdExtended, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiFeeCtdExtended | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.get_fee_ctd_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCtdExtended, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_ctd_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiFeeCtdExtended | ResponseError | None:
    """Get current-to-date (CTD) fee by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCtdExtended, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiFeeCtdExtended | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.get_fee_ctd_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCtdExtended, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_fee_ctd_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiFeeCtd
) -> Response[ApiFeeCtd | ResponseError]:
    """Update current-to-date (CTD) fee

    Args:
        uuid (str):
        body (ApiFeeCtd):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCtd, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiFeeCtd

    Returns:
        Response[ApiFeeCtd | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.update_fee_ctd",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCtd, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_fee_ctd_sync(*, client: StolonClient, uuid: str, body: ApiFeeCtd) -> ApiFeeCtd | ResponseError | None:
    """Update current-to-date (CTD) fee

    Args:
        uuid (str):
        body (ApiFeeCtd):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCtd, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiFeeCtd

    Returns:
        ApiFeeCtd | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.update_fee_ctd",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCtd, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_fee_ctd_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiFeeCtd
) -> Response[ApiFeeCtd | ResponseError]:
    """Update current-to-date (CTD) fee

    Args:
        uuid (str):
        body (ApiFeeCtd):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiFeeCtd, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiFeeCtd

    Returns:
        Response[ApiFeeCtd | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.update_fee_ctd",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiFeeCtd, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_fee_ctd_asyncio(*, client: StolonClient, uuid: str, body: ApiFeeCtd) -> ApiFeeCtd | ResponseError | None:
    """Update current-to-date (CTD) fee

    Args:
        uuid (str):
        body (ApiFeeCtd):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiFeeCtd, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiFeeCtd

    Returns:
        ApiFeeCtd | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.update_fee_ctd",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiFeeCtd, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_fee_ctd_sync_detailed(*, client: StolonClient, body: ApiFeeCtd) -> Response[ResponseError]:
    """Create current-to-date (CTD) fee

    Args:
        body (ApiFeeCtd):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiFeeCtd

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.create_fee_ctd",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_fee_ctd_sync(*, client: StolonClient, body: ApiFeeCtd) -> ResponseError | None:
    """Create current-to-date (CTD) fee

    Args:
        body (ApiFeeCtd):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiFeeCtd

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.create_fee_ctd",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_fee_ctd_asyncio_detailed(*, client: StolonClient, body: ApiFeeCtd) -> Response[ResponseError]:
    """Create current-to-date (CTD) fee

    Args:
        body (ApiFeeCtd):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiFeeCtd

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.create_fee_ctd",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_fee_ctd_asyncio(*, client: StolonClient, body: ApiFeeCtd) -> ResponseError | None:
    """Create current-to-date (CTD) fee

    Args:
        body (ApiFeeCtd):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiFeeCtd

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.create_fee_ctd",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_ctd_by_billing_entity_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    fee_category: Union[Unset, list[str]] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_zero_amounts: Union[Unset, bool] = UNSET,
) -> Response[ResponseError]:
    """Get current-to-date fee(s) for a billing entity

    Args:
        billing_entity_uuid (str):
        fee_category (Union[Unset, list[str]]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_zero_amounts (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        fee_category: Union[Unset, list[str]]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_zero_amounts: Union[Unset, bool]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "currency": serialize_argument(currency),
        "exclude_zero_amounts": serialize_argument(exclude_zero_amounts),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.get_fee_ctd_by_billing_entity",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_ctd_by_billing_entity_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    fee_category: Union[Unset, list[str]] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_zero_amounts: Union[Unset, bool] = UNSET,
) -> ResponseError | None:
    """Get current-to-date fee(s) for a billing entity

    Args:
        billing_entity_uuid (str):
        fee_category (Union[Unset, list[str]]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_zero_amounts (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        fee_category: Union[Unset, list[str]]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_zero_amounts: Union[Unset, bool]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "currency": serialize_argument(currency),
        "exclude_zero_amounts": serialize_argument(exclude_zero_amounts),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.get_fee_ctd_by_billing_entity",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_ctd_by_billing_entity_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    fee_category: Union[Unset, list[str]] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_zero_amounts: Union[Unset, bool] = UNSET,
) -> Response[ResponseError]:
    """Get current-to-date fee(s) for a billing entity

    Args:
        billing_entity_uuid (str):
        fee_category (Union[Unset, list[str]]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_zero_amounts (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        fee_category: Union[Unset, list[str]]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_zero_amounts: Union[Unset, bool]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "currency": serialize_argument(currency),
        "exclude_zero_amounts": serialize_argument(exclude_zero_amounts),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.get_fee_ctd_by_billing_entity",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_fee_ctd_by_billing_entity_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    fee_category: Union[Unset, list[str]] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    exclude_zero_amounts: Union[Unset, bool] = UNSET,
) -> ResponseError | None:
    """Get current-to-date fee(s) for a billing entity

    Args:
        billing_entity_uuid (str):
        fee_category (Union[Unset, list[str]]):
        fee_code (Union[Unset, str]):
        currency (Union[Unset, str]):
        exclude_zero_amounts (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        fee_category: Union[Unset, list[str]]
        fee_code: Union[Unset, str]
        currency: Union[Unset, str]
        exclude_zero_amounts: Union[Unset, bool]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "currency": serialize_argument(currency),
        "exclude_zero_amounts": serialize_argument(exclude_zero_amounts),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="fee_ctd.get_fee_ctd_by_billing_entity",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
