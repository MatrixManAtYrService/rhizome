"""
Proxied wrapper functions for billing-bookkeeper dev - misc_action_fee_code.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_misc_action_fee_code import (
    ApiMiscActionFeeCode,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def delete_misc_action_fee_code_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ResponseError]:
    """Delete miscellaneous action fee code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.delete_misc_action_fee_code_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_misc_action_fee_code_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | None:
    """Delete miscellaneous action fee code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.delete_misc_action_fee_code_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_misc_action_fee_code_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ResponseError]:
    """Delete miscellaneous action fee code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.delete_misc_action_fee_code_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_misc_action_fee_code_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | None:
    """Delete miscellaneous action fee code mapping

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.delete_misc_action_fee_code_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_action_fee_code_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiMiscActionFeeCode]:
    """Get miscellaneous action fee code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMiscActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiMiscActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.get_misc_action_fee_code_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_action_fee_code_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiMiscActionFeeCode | None:
    """Get miscellaneous action fee code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMiscActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiMiscActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.get_misc_action_fee_code_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_action_fee_code_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiMiscActionFeeCode]:
    """Get miscellaneous action fee code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMiscActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiMiscActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.get_misc_action_fee_code_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_action_fee_code_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiMiscActionFeeCode | None:
    """Get miscellaneous action fee code mapping by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMiscActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiMiscActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.get_misc_action_fee_code_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_action_fee_codes_sync_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    misc_specifier: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    misc_action_type: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiMiscActionFeeCode]:
    """Get miscellaneous action fee codes

    Args:
        date (datetime.date):
        misc_specifier (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        misc_action_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMiscActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        misc_specifier: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        misc_action_type: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiMiscActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "misc_specifier": serialize_argument(misc_specifier),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "misc_action_type": serialize_argument(misc_action_type),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.get_misc_action_fee_codes",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_action_fee_codes_sync(
    *,
    client: StolonClient,
    date: datetime.date,
    misc_specifier: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    misc_action_type: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiMiscActionFeeCode | None:
    """Get miscellaneous action fee codes

    Args:
        date (datetime.date):
        misc_specifier (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        misc_action_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMiscActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        misc_specifier: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        misc_action_type: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiMiscActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "misc_specifier": serialize_argument(misc_specifier),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "misc_action_type": serialize_argument(misc_action_type),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.get_misc_action_fee_codes",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_action_fee_codes_asyncio_detailed(
    *,
    client: StolonClient,
    date: datetime.date,
    misc_specifier: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    misc_action_type: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiMiscActionFeeCode]:
    """Get miscellaneous action fee codes

    Args:
        date (datetime.date):
        misc_specifier (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        misc_action_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMiscActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        misc_specifier: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        misc_action_type: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiMiscActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "misc_specifier": serialize_argument(misc_specifier),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "misc_action_type": serialize_argument(misc_action_type),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.get_misc_action_fee_codes",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_action_fee_codes_asyncio(
    *,
    client: StolonClient,
    date: datetime.date,
    misc_specifier: Union[Unset, str] = UNSET,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
    misc_action_type: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiMiscActionFeeCode | None:
    """Get miscellaneous action fee codes

    Args:
        date (datetime.date):
        misc_specifier (Union[Unset, str]):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):
        misc_action_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMiscActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                date: datetime.date
        misc_specifier: Union[Unset, str]
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]
        misc_action_type: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiMiscActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "date": serialize_argument(date),
        "misc_specifier": serialize_argument(misc_specifier),
        "fee_category": serialize_argument(fee_category),
        "fee_code": serialize_argument(fee_code),
        "misc_action_type": serialize_argument(misc_action_type),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.get_misc_action_fee_codes",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_misc_action_fee_code_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiMiscActionFeeCode
) -> Response[ApiMiscActionFeeCode]:
    """Update miscellaneous action fee code mapping

    Args:
        uuid (str):
        body (ApiMiscActionFeeCode):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMiscActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiMiscActionFeeCode

    Returns:
        Response[ApiMiscActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.update_misc_action_fee_code",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_misc_action_fee_code_sync(
    *, client: StolonClient, uuid: str, body: ApiMiscActionFeeCode
) -> ApiMiscActionFeeCode | None:
    """Update miscellaneous action fee code mapping

    Args:
        uuid (str):
        body (ApiMiscActionFeeCode):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMiscActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiMiscActionFeeCode

    Returns:
        ApiMiscActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.update_misc_action_fee_code",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_misc_action_fee_code_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiMiscActionFeeCode
) -> Response[ApiMiscActionFeeCode]:
    """Update miscellaneous action fee code mapping

    Args:
        uuid (str):
        body (ApiMiscActionFeeCode):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMiscActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiMiscActionFeeCode

    Returns:
        Response[ApiMiscActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.update_misc_action_fee_code",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_misc_action_fee_code_asyncio(
    *, client: StolonClient, uuid: str, body: ApiMiscActionFeeCode
) -> ApiMiscActionFeeCode | None:
    """Update miscellaneous action fee code mapping

    Args:
        uuid (str):
        body (ApiMiscActionFeeCode):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMiscActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiMiscActionFeeCode

    Returns:
        ApiMiscActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.update_misc_action_fee_code",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_misc_action_fee_code_sync_detailed(
    *, client: StolonClient, body: ApiMiscActionFeeCode
) -> Response[ApiMiscActionFeeCode]:
    """Create miscellaneous action fee code mapping

    Args:
        body (ApiMiscActionFeeCode):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMiscActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiMiscActionFeeCode

    Returns:
        Response[ApiMiscActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.create_misc_action_fee_code",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_misc_action_fee_code_sync(
    *, client: StolonClient, body: ApiMiscActionFeeCode
) -> ApiMiscActionFeeCode | None:
    """Create miscellaneous action fee code mapping

    Args:
        body (ApiMiscActionFeeCode):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMiscActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiMiscActionFeeCode

    Returns:
        ApiMiscActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.create_misc_action_fee_code",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_misc_action_fee_code_asyncio_detailed(
    *, client: StolonClient, body: ApiMiscActionFeeCode
) -> Response[ApiMiscActionFeeCode]:
    """Create miscellaneous action fee code mapping

    Args:
        body (ApiMiscActionFeeCode):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMiscActionFeeCode]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiMiscActionFeeCode

    Returns:
        Response[ApiMiscActionFeeCode]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.create_misc_action_fee_code",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_misc_action_fee_code_asyncio(
    *, client: StolonClient, body: ApiMiscActionFeeCode
) -> ApiMiscActionFeeCode | None:
    """Create miscellaneous action fee code mapping

    Args:
        body (ApiMiscActionFeeCode):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMiscActionFeeCode

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiMiscActionFeeCode

    Returns:
        ApiMiscActionFeeCode | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="misc_action_fee_code.create_misc_action_fee_code",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiMiscActionFeeCode]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
