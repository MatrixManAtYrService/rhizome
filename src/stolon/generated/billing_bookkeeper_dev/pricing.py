"""
Proxied wrapper functions for billing-bookkeeper dev - pricing.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_cellular_pricing
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_cellular_pricing_for_merchant
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_cellular_pricing_for_reseller
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_misc_pricing
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_misc_pricing_for_merchant
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_misc_pricing_for_reseller
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_plan_pricing
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_plan_pricing_for_merchant
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.pricing import get_plan_pricing_for_reseller
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_cellular_pricing import ApiCellularPricing
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_plan_pricing import ApiPlanPricing
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import ResponseError
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
import datetime
import json


def get_cellular_pricing_sync_detailed(
    *,
    client: StolonClient,
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested cellular carriers, currency, billing method, and as-of date

    Args:
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing._get_kwargs(currency=currency, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiCellularPricing | None
    if body_json and proxy_response.status_code == 200 and ApiCellularPricing:
        parsed = ApiCellularPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_cellular_pricing_sync(
    *,
    client: StolonClient,
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested cellular carriers, currency, billing method, and as-of date

    Args:
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing._get_kwargs(currency=currency, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiCellularPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_cellular_pricing_asyncio_detailed(
    *,
    client: StolonClient,
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested cellular carriers, currency, billing method, and as-of date

    Args:
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing._get_kwargs(currency=currency, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiCellularPricing | None
    if body_json and proxy_response.status_code == 200 and ApiCellularPricing:
        parsed = ApiCellularPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_cellular_pricing_asyncio(
    *,
    client: StolonClient,
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested cellular carriers, currency, billing method, and as-of date

    Args:
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing._get_kwargs(currency=currency, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiCellularPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_misc_pricing_sync_detailed(
    *,
    client: StolonClient,
    currency: str,
    misc_specifiers: list[str],
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ResponseError]:
    """Get pricing for the requested miscellaneous fee specifiers, currency, and as-of date

    Args:
        currency (str):
        misc_specifiers (list[str]):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                currency: str
        misc_specifiers: list[str]
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing._get_kwargs(currency=currency, misc_specifiers=misc_specifiers, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_misc_pricing_sync(
    *,
    client: StolonClient,
    currency: str,
    misc_specifiers: list[str],
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ResponseError | None:
    """Get pricing for the requested miscellaneous fee specifiers, currency, and as-of date

    Args:
        currency (str):
        misc_specifiers (list[str]):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                currency: str
        misc_specifiers: list[str]
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing._get_kwargs(currency=currency, misc_specifiers=misc_specifiers, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_misc_pricing_asyncio_detailed(
    *,
    client: StolonClient,
    currency: str,
    misc_specifiers: list[str],
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ResponseError]:
    """Get pricing for the requested miscellaneous fee specifiers, currency, and as-of date

    Args:
        currency (str):
        misc_specifiers (list[str]):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                currency: str
        misc_specifiers: list[str]
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing._get_kwargs(currency=currency, misc_specifiers=misc_specifiers, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_misc_pricing_asyncio(
    *,
    client: StolonClient,
    currency: str,
    misc_specifiers: list[str],
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ResponseError | None:
    """Get pricing for the requested miscellaneous fee specifiers, currency, and as-of date

    Args:
        currency (str):
        misc_specifiers (list[str]):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                currency: str
        misc_specifiers: list[str]
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing._get_kwargs(currency=currency, misc_specifiers=misc_specifiers, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_for_merchant_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested merchant and merchant plans, currency, billing method, and as-of
    date

    Args:
        uuid (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_for_merchant._get_kwargs(uuid=uuid, plan_uuids=plan_uuids, currency=currency, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiPlanPricing | None
    if body_json and proxy_response.status_code == 200 and ApiPlanPricing:
        parsed = ApiPlanPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_for_merchant_sync(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested merchant and merchant plans, currency, billing method, and as-of
    date

    Args:
        uuid (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_for_merchant._get_kwargs(uuid=uuid, plan_uuids=plan_uuids, currency=currency, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiPlanPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_for_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested merchant and merchant plans, currency, billing method, and as-of
    date

    Args:
        uuid (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_for_merchant._get_kwargs(uuid=uuid, plan_uuids=plan_uuids, currency=currency, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiPlanPricing | None
    if body_json and proxy_response.status_code == 200 and ApiPlanPricing:
        parsed = ApiPlanPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_for_merchant_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested merchant and merchant plans, currency, billing method, and as-of
    date

    Args:
        uuid (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_for_merchant._get_kwargs(uuid=uuid, plan_uuids=plan_uuids, currency=currency, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiPlanPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_misc_pricing_for_merchant_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ResponseError]:
    """Get pricing for the requested merchant and miscellaneous fee specifiers, currency, and as-of date

    Args:
        uuid (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing_for_merchant._get_kwargs(uuid=uuid, currency=currency, misc_specifiers=misc_specifiers, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_misc_pricing_for_merchant_sync(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ResponseError | None:
    """Get pricing for the requested merchant and miscellaneous fee specifiers, currency, and as-of date

    Args:
        uuid (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing_for_merchant._get_kwargs(uuid=uuid, currency=currency, misc_specifiers=misc_specifiers, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_misc_pricing_for_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ResponseError]:
    """Get pricing for the requested merchant and miscellaneous fee specifiers, currency, and as-of date

    Args:
        uuid (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing_for_merchant._get_kwargs(uuid=uuid, currency=currency, misc_specifiers=misc_specifiers, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_misc_pricing_for_merchant_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ResponseError | None:
    """Get pricing for the requested merchant and miscellaneous fee specifiers, currency, and as-of date

    Args:
        uuid (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing_for_merchant._get_kwargs(uuid=uuid, currency=currency, misc_specifiers=misc_specifiers, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_misc_pricing_for_reseller_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ResponseError]:
    """Get pricing for the requested reseller and miscellaneous fee specifiers, currency, and as-of date

    Args:
        r_id (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing_for_reseller._get_kwargs(r_id=r_id, currency=currency, misc_specifiers=misc_specifiers, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_misc_pricing_for_reseller_sync(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ResponseError | None:
    """Get pricing for the requested reseller and miscellaneous fee specifiers, currency, and as-of date

    Args:
        r_id (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing_for_reseller._get_kwargs(r_id=r_id, currency=currency, misc_specifiers=misc_specifiers, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_misc_pricing_for_reseller_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ResponseError]:
    """Get pricing for the requested reseller and miscellaneous fee specifiers, currency, and as-of date

    Args:
        r_id (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing_for_reseller._get_kwargs(r_id=r_id, currency=currency, misc_specifiers=misc_specifiers, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ResponseError | None
    if body_json and proxy_response.status_code == 200 and ResponseError:
        parsed = ResponseError.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_misc_pricing_for_reseller_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ResponseError | None:
    """Get pricing for the requested reseller and miscellaneous fee specifiers, currency, and as-of date

    Args:
        r_id (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """

    # Extract request parameters from generated function
    kwargs = get_misc_pricing_for_reseller._get_kwargs(r_id=r_id, currency=currency, misc_specifiers=misc_specifiers, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ResponseError.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_for_reseller_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested reseller and merchant plans, currency, billing method, and as-of
    date

    Args:
        r_id (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_for_reseller._get_kwargs(r_id=r_id, plan_uuids=plan_uuids, currency=currency, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiPlanPricing | None
    if body_json and proxy_response.status_code == 200 and ApiPlanPricing:
        parsed = ApiPlanPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_for_reseller_sync(
    *,
    client: StolonClient,
    r_id: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested reseller and merchant plans, currency, billing method, and as-of
    date

    Args:
        r_id (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_for_reseller._get_kwargs(r_id=r_id, plan_uuids=plan_uuids, currency=currency, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiPlanPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_for_reseller_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested reseller and merchant plans, currency, billing method, and as-of
    date

    Args:
        r_id (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_for_reseller._get_kwargs(r_id=r_id, plan_uuids=plan_uuids, currency=currency, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiPlanPricing | None
    if body_json and proxy_response.status_code == 200 and ApiPlanPricing:
        parsed = ApiPlanPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_for_reseller_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested reseller and merchant plans, currency, billing method, and as-of
    date

    Args:
        r_id (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing_for_reseller._get_kwargs(r_id=r_id, plan_uuids=plan_uuids, currency=currency, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiPlanPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_sync_detailed(
    *,
    client: StolonClient,
    plan_uuids: list[str],
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested merchant plans, currency, billing method, and as-of date

    Args:
        plan_uuids (list[str]):
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                plan_uuids: list[str]
        currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing._get_kwargs(plan_uuids=plan_uuids, currency=currency, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiPlanPricing | None
    if body_json and proxy_response.status_code == 200 and ApiPlanPricing:
        parsed = ApiPlanPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_sync(
    *,
    client: StolonClient,
    plan_uuids: list[str],
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested merchant plans, currency, billing method, and as-of date

    Args:
        plan_uuids (list[str]):
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                plan_uuids: list[str]
        currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing._get_kwargs(plan_uuids=plan_uuids, currency=currency, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiPlanPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_plan_pricing_asyncio_detailed(
    *,
    client: StolonClient,
    plan_uuids: list[str],
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested merchant plans, currency, billing method, and as-of date

    Args:
        plan_uuids (list[str]):
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                plan_uuids: list[str]
        currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing._get_kwargs(plan_uuids=plan_uuids, currency=currency, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiPlanPricing | None
    if body_json and proxy_response.status_code == 200 and ApiPlanPricing:
        parsed = ApiPlanPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_plan_pricing_asyncio(
    *,
    client: StolonClient,
    plan_uuids: list[str],
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested merchant plans, currency, billing method, and as-of date

    Args:
        plan_uuids (list[str]):
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                plan_uuids: list[str]
        currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_plan_pricing._get_kwargs(plan_uuids=plan_uuids, currency=currency, merchant_uuid=merchant_uuid, reseller_uuid=reseller_uuid, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiPlanPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_cellular_pricing_for_merchant_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested merchant and cellular carriers, currency, billing method, and
    as-of date

    Args:
        uuid (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing_for_merchant._get_kwargs(uuid=uuid, currency=currency, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiCellularPricing | None
    if body_json and proxy_response.status_code == 200 and ApiCellularPricing:
        parsed = ApiCellularPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_cellular_pricing_for_merchant_sync(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested merchant and cellular carriers, currency, billing method, and
    as-of date

    Args:
        uuid (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing_for_merchant._get_kwargs(uuid=uuid, currency=currency, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiCellularPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_cellular_pricing_for_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested merchant and cellular carriers, currency, billing method, and
    as-of date

    Args:
        uuid (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing_for_merchant._get_kwargs(uuid=uuid, currency=currency, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiCellularPricing | None
    if body_json and proxy_response.status_code == 200 and ApiCellularPricing:
        parsed = ApiCellularPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_cellular_pricing_for_merchant_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested merchant and cellular carriers, currency, billing method, and
    as-of date

    Args:
        uuid (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing_for_merchant._get_kwargs(uuid=uuid, currency=currency, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiCellularPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_cellular_pricing_for_reseller_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested reseller and cellular carriers, currency, billing method, and
    as-of date

    Args:
        r_id (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing_for_reseller._get_kwargs(r_id=r_id, currency=currency, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiCellularPricing | None
    if body_json and proxy_response.status_code == 200 and ApiCellularPricing:
        parsed = ApiCellularPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_cellular_pricing_for_reseller_sync(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested reseller and cellular carriers, currency, billing method, and
    as-of date

    Args:
        r_id (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing_for_reseller._get_kwargs(r_id=r_id, currency=currency, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiCellularPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_cellular_pricing_for_reseller_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested reseller and cellular carriers, currency, billing method, and
    as-of date

    Args:
        r_id (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing_for_reseller._get_kwargs(r_id=r_id, currency=currency, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: ApiCellularPricing | None
    if body_json and proxy_response.status_code == 200 and ApiCellularPricing:
        parsed = ApiCellularPricing.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_cellular_pricing_for_reseller_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested reseller and cellular carriers, currency, billing method, and
    as-of date

    Args:
        r_id (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                r_id: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """

    # Extract request parameters from generated function
    kwargs = get_cellular_pricing_for_reseller._get_kwargs(r_id=r_id, currency=currency, carriers=carriers, billing_method=billing_method, rule_aliases=rule_aliases, date=date, x_clover_appenv=x_clover_appenv)

    # Use path directly from generated function
    path = kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiCellularPricing.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None

