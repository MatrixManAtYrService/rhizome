"""
Proxied wrapper functions for billing-bookkeeper dev - pricing.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_cellular_pricing import (
    ApiCellularPricing,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_plan_pricing import (
    ApiPlanPricing,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_cellular_pricing_sync_detailed(
    *,
    client: StolonClient,
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested cellular carriers, currency, billing method, and as-of date

    Args:
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "currency": serialize_argument(currency),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_sync(
    *,
    client: StolonClient,
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested cellular carriers, currency, billing method, and as-of date

    Args:
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "currency": serialize_argument(currency),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_asyncio_detailed(
    *,
    client: StolonClient,
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested cellular carriers, currency, billing method, and as-of date

    Args:
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "currency": serialize_argument(currency),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_asyncio(
    *,
    client: StolonClient,
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested cellular carriers, currency, billing method, and as-of date

    Args:
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "currency": serialize_argument(currency),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_sync_detailed(
    *,
    client: StolonClient,
    currency: str,
    misc_specifiers: list[str],
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ResponseError]:
    """Get pricing for the requested miscellaneous fee specifiers, currency, and as-of date

    Args:
        currency (str):
        misc_specifiers (list[str]):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                currency: str
        misc_specifiers: list[str]
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_sync(
    *,
    client: StolonClient,
    currency: str,
    misc_specifiers: list[str],
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ResponseError | None:
    """Get pricing for the requested miscellaneous fee specifiers, currency, and as-of date

    Args:
        currency (str):
        misc_specifiers (list[str]):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                currency: str
        misc_specifiers: list[str]
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_asyncio_detailed(
    *,
    client: StolonClient,
    currency: str,
    misc_specifiers: list[str],
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ResponseError]:
    """Get pricing for the requested miscellaneous fee specifiers, currency, and as-of date

    Args:
        currency (str):
        misc_specifiers (list[str]):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                currency: str
        misc_specifiers: list[str]
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_asyncio(
    *,
    client: StolonClient,
    currency: str,
    misc_specifiers: list[str],
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ResponseError | None:
    """Get pricing for the requested miscellaneous fee specifiers, currency, and as-of date

    Args:
        currency (str):
        misc_specifiers (list[str]):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                currency: str
        misc_specifiers: list[str]
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_for_merchant_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested merchant and merchant plans, currency, billing method, and as-of
    date

    Args:
        uuid (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing_for_merchant",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_for_merchant_sync(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested merchant and merchant plans, currency, billing method, and as-of
    date

    Args:
        uuid (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing_for_merchant",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_for_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested merchant and merchant plans, currency, billing method, and as-of
    date

    Args:
        uuid (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing_for_merchant",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_for_merchant_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested merchant and merchant plans, currency, billing method, and as-of
    date

    Args:
        uuid (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing_for_merchant",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_for_merchant_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ResponseError]:
    """Get pricing for the requested merchant and miscellaneous fee specifiers, currency, and as-of date

    Args:
        uuid (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing_for_merchant",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_for_merchant_sync(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ResponseError | None:
    """Get pricing for the requested merchant and miscellaneous fee specifiers, currency, and as-of date

    Args:
        uuid (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing_for_merchant",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_for_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ResponseError]:
    """Get pricing for the requested merchant and miscellaneous fee specifiers, currency, and as-of date

    Args:
        uuid (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing_for_merchant",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_for_merchant_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ResponseError | None:
    """Get pricing for the requested merchant and miscellaneous fee specifiers, currency, and as-of date

    Args:
        uuid (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing_for_merchant",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_for_reseller_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ResponseError]:
    """Get pricing for the requested reseller and miscellaneous fee specifiers, currency, and as-of date

    Args:
        r_id (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing_for_reseller",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_for_reseller_sync(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ResponseError | None:
    """Get pricing for the requested reseller and miscellaneous fee specifiers, currency, and as-of date

    Args:
        r_id (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing_for_reseller",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_for_reseller_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ResponseError]:
    """Get pricing for the requested reseller and miscellaneous fee specifiers, currency, and as-of date

    Args:
        r_id (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing_for_reseller",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_misc_pricing_for_reseller_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    misc_specifiers: list[str],
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ResponseError | None:
    """Get pricing for the requested reseller and miscellaneous fee specifiers, currency, and as-of date

    Args:
        r_id (str):
        currency (str):
        misc_specifiers (list[str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        currency: str
        misc_specifiers: list[str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "currency": serialize_argument(currency),
        "misc_specifiers": serialize_argument(misc_specifiers),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_misc_pricing_for_reseller",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_for_reseller_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested reseller and merchant plans, currency, billing method, and as-of
    date

    Args:
        r_id (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing_for_reseller",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_for_reseller_sync(
    *,
    client: StolonClient,
    r_id: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested reseller and merchant plans, currency, billing method, and as-of
    date

    Args:
        r_id (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing_for_reseller",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_for_reseller_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested reseller and merchant plans, currency, billing method, and as-of
    date

    Args:
        r_id (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing_for_reseller",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_for_reseller_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    plan_uuids: list[str],
    currency: str,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested reseller and merchant plans, currency, billing method, and as-of
    date

    Args:
        r_id (str):
        plan_uuids (list[str]):
        currency (str):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        plan_uuids: list[str]
        currency: str
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing_for_reseller",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_sync_detailed(
    *,
    client: StolonClient,
    plan_uuids: list[str],
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested merchant plans, currency, billing method, and as-of date

    Args:
        plan_uuids (list[str]):
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                plan_uuids: list[str]
        currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_sync(
    *,
    client: StolonClient,
    plan_uuids: list[str],
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested merchant plans, currency, billing method, and as-of date

    Args:
        plan_uuids (list[str]):
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                plan_uuids: list[str]
        currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_asyncio_detailed(
    *,
    client: StolonClient,
    plan_uuids: list[str],
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiPlanPricing]:
    """Get plan pricing for the requested merchant plans, currency, billing method, and as-of date

    Args:
        plan_uuids (list[str]):
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPlanPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                plan_uuids: list[str]
        currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiPlanPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_pricing_asyncio(
    *,
    client: StolonClient,
    plan_uuids: list[str],
    currency: str,
    merchant_uuid: Union[Unset, str] = UNSET,
    reseller_uuid: Union[Unset, str] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiPlanPricing | None:
    """Get plan pricing for the requested merchant plans, currency, billing method, and as-of date

    Args:
        plan_uuids (list[str]):
        currency (str):
        merchant_uuid (Union[Unset, str]):
        reseller_uuid (Union[Unset, str]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPlanPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                plan_uuids: list[str]
        currency: str
        merchant_uuid: Union[Unset, str]
        reseller_uuid: Union[Unset, str]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiPlanPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "plan_uuids": serialize_argument(plan_uuids),
        "currency": serialize_argument(currency),
        "merchant_uuid": serialize_argument(merchant_uuid),
        "reseller_uuid": serialize_argument(reseller_uuid),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_plan_pricing",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPlanPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_for_merchant_sync_detailed(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested merchant and cellular carriers, currency, billing method, and
    as-of date

    Args:
        uuid (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "currency": serialize_argument(currency),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing_for_merchant",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_for_merchant_sync(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested merchant and cellular carriers, currency, billing method, and
    as-of date

    Args:
        uuid (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "currency": serialize_argument(currency),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing_for_merchant",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_for_merchant_asyncio_detailed(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested merchant and cellular carriers, currency, billing method, and
    as-of date

    Args:
        uuid (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "currency": serialize_argument(currency),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing_for_merchant",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_for_merchant_asyncio(
    *,
    client: StolonClient,
    uuid: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested merchant and cellular carriers, currency, billing method, and
    as-of date

    Args:
        uuid (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "uuid": serialize_argument(uuid),
        "currency": serialize_argument(currency),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing_for_merchant",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_for_reseller_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested reseller and cellular carriers, currency, billing method, and
    as-of date

    Args:
        r_id (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "currency": serialize_argument(currency),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing_for_reseller",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_for_reseller_sync(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested reseller and cellular carriers, currency, billing method, and
    as-of date

    Args:
        r_id (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "currency": serialize_argument(currency),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing_for_reseller",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_for_reseller_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> Response[ApiCellularPricing]:
    """Get cellular pricing for the requested reseller and cellular carriers, currency, billing method, and
    as-of date

    Args:
        r_id (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiCellularPricing]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        Response[ApiCellularPricing]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "currency": serialize_argument(currency),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing_for_reseller",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_pricing_for_reseller_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    currency: str,
    carriers: Union[Unset, list[str]] = UNSET,
    billing_method: Union[Unset, str] = UNSET,
    rule_aliases: Union[Unset, list[str]] = UNSET,
    date: Union[Unset, datetime.date] = UNSET,
    x_clover_appenv: str,
) -> ApiCellularPricing | None:
    """Get cellular pricing for the requested reseller and cellular carriers, currency, billing method, and
    as-of date

    Args:
        r_id (str):
        currency (str):
        carriers (Union[Unset, list[str]]):
        billing_method (Union[Unset, str]):
        rule_aliases (Union[Unset, list[str]]):
        date (Union[Unset, datetime.date]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiCellularPricing

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        currency: str
        carriers: Union[Unset, list[str]]
        billing_method: Union[Unset, str]
        rule_aliases: Union[Unset, list[str]]
        date: Union[Unset, datetime.date]
        x_clover_appenv: str

    Returns:
        ApiCellularPricing | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "currency": serialize_argument(currency),
        "carriers": serialize_argument(carriers),
        "billing_method": serialize_argument(billing_method),
        "rule_aliases": serialize_argument(rule_aliases),
        "date": serialize_argument(date),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="pricing.get_cellular_pricing_for_reseller",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiCellularPricing]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
