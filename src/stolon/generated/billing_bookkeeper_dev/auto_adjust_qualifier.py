"""
Proxied wrapper functions for billing-bookkeeper dev - auto_adjust_qualifier.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import json
from http import HTTPStatus
from typing import Union

from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.auto_adjust_qualifier import (
    create_auto_adjust_qualifier,
    delete_auto_adjust_qualifier_by_uuid,
    get_auto_adjust_qualifier_by_uuid,
    get_auto_adjust_rule_qualifiers,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_auto_adjust_qualifier import (
    ApiAutoAdjustQualifier,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset


def get_auto_adjust_rule_qualifiers_sync_detailed(
    *,
    client: StolonClient,
    rule_uuid: str,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
) -> Response[ApiAutoAdjustQualifier]:
    """Get auto-adjust qualifiers for an auto-adjust rule

    Args:
        rule_uuid (str):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustQualifier]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                rule_uuid: str
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]

    Returns:
        Response[ApiAutoAdjustQualifier]
    """
    # Extract request parameters from generated function
    kwargs = get_auto_adjust_rule_qualifiers._get_kwargs(
        rule_uuid=rule_uuid, fee_category=fee_category, fee_code=fee_code
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiAutoAdjustQualifier:
        parsed = ApiAutoAdjustQualifier.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_auto_adjust_rule_qualifiers_sync(
    *,
    client: StolonClient,
    rule_uuid: str,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
) -> ApiAutoAdjustQualifier | None:
    """Get auto-adjust qualifiers for an auto-adjust rule

    Args:
        rule_uuid (str):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustQualifier

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                rule_uuid: str
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]

    Returns:
        ApiAutoAdjustQualifier | None
    """
    # Extract request parameters from generated function
    kwargs = get_auto_adjust_rule_qualifiers._get_kwargs(
        rule_uuid=rule_uuid, fee_category=fee_category, fee_code=fee_code
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiAutoAdjustQualifier.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_auto_adjust_rule_qualifiers_asyncio_detailed(
    *,
    client: StolonClient,
    rule_uuid: str,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
) -> Response[ApiAutoAdjustQualifier]:
    """Get auto-adjust qualifiers for an auto-adjust rule

    Args:
        rule_uuid (str):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustQualifier]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                rule_uuid: str
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]

    Returns:
        Response[ApiAutoAdjustQualifier]
    """
    # Extract request parameters from generated function
    kwargs = get_auto_adjust_rule_qualifiers._get_kwargs(
        rule_uuid=rule_uuid, fee_category=fee_category, fee_code=fee_code
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiAutoAdjustQualifier:
        parsed = ApiAutoAdjustQualifier.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_auto_adjust_rule_qualifiers_asyncio(
    *,
    client: StolonClient,
    rule_uuid: str,
    fee_category: Union[Unset, str] = UNSET,
    fee_code: Union[Unset, str] = UNSET,
) -> ApiAutoAdjustQualifier | None:
    """Get auto-adjust qualifiers for an auto-adjust rule

    Args:
        rule_uuid (str):
        fee_category (Union[Unset, str]):
        fee_code (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustQualifier

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                rule_uuid: str
        fee_category: Union[Unset, str]
        fee_code: Union[Unset, str]

    Returns:
        ApiAutoAdjustQualifier | None
    """
    # Extract request parameters from generated function
    kwargs = get_auto_adjust_rule_qualifiers._get_kwargs(
        rule_uuid=rule_uuid, fee_category=fee_category, fee_code=fee_code
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiAutoAdjustQualifier.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def delete_auto_adjust_qualifier_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError | bool]:
    """Delete auto-adjust qualifier

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, bool]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ResponseError | bool]
    """
    # Extract request parameters from generated function
    kwargs = delete_auto_adjust_qualifier_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def delete_auto_adjust_qualifier_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | bool | None:
    """Delete auto-adjust qualifier

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, bool]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ResponseError | bool | None
    """
    # Extract request parameters from generated function
    kwargs = delete_auto_adjust_qualifier_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def delete_auto_adjust_qualifier_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError | bool]:
    """Delete auto-adjust qualifier

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, bool]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ResponseError | bool]
    """
    # Extract request parameters from generated function
    kwargs = delete_auto_adjust_qualifier_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def delete_auto_adjust_qualifier_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | bool | None:
    """Delete auto-adjust qualifier

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, bool]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ResponseError | bool | None
    """
    # Extract request parameters from generated function
    kwargs = delete_auto_adjust_qualifier_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def create_auto_adjust_qualifier_sync_detailed(
    *, client: StolonClient, body: ApiAutoAdjustQualifier
) -> Response[ApiAutoAdjustQualifier]:
    """Create auto-adjust qualifier

    Args:
        body (ApiAutoAdjustQualifier):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustQualifier]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiAutoAdjustQualifier

    Returns:
        Response[ApiAutoAdjustQualifier]
    """
    # Extract request parameters from generated function
    kwargs = create_auto_adjust_qualifier._get_kwargs(body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiAutoAdjustQualifier:
        parsed = ApiAutoAdjustQualifier.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_auto_adjust_qualifier_sync(
    *, client: StolonClient, body: ApiAutoAdjustQualifier
) -> ApiAutoAdjustQualifier | None:
    """Create auto-adjust qualifier

    Args:
        body (ApiAutoAdjustQualifier):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustQualifier

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiAutoAdjustQualifier

    Returns:
        ApiAutoAdjustQualifier | None
    """
    # Extract request parameters from generated function
    kwargs = create_auto_adjust_qualifier._get_kwargs(body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiAutoAdjustQualifier.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_auto_adjust_qualifier_asyncio_detailed(
    *, client: StolonClient, body: ApiAutoAdjustQualifier
) -> Response[ApiAutoAdjustQualifier]:
    """Create auto-adjust qualifier

    Args:
        body (ApiAutoAdjustQualifier):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustQualifier]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiAutoAdjustQualifier

    Returns:
        Response[ApiAutoAdjustQualifier]
    """
    # Extract request parameters from generated function
    kwargs = create_auto_adjust_qualifier._get_kwargs(body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiAutoAdjustQualifier:
        parsed = ApiAutoAdjustQualifier.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_auto_adjust_qualifier_asyncio(
    *, client: StolonClient, body: ApiAutoAdjustQualifier
) -> ApiAutoAdjustQualifier | None:
    """Create auto-adjust qualifier

    Args:
        body (ApiAutoAdjustQualifier):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustQualifier

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: ApiAutoAdjustQualifier

    Returns:
        ApiAutoAdjustQualifier | None
    """
    # Extract request parameters from generated function
    kwargs = create_auto_adjust_qualifier._get_kwargs(body=body)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiAutoAdjustQualifier.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_auto_adjust_qualifier_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiAutoAdjustQualifier]:
    """Get auto-adjust qualifier by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustQualifier]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiAutoAdjustQualifier]
    """
    # Extract request parameters from generated function
    kwargs = get_auto_adjust_qualifier_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiAutoAdjustQualifier:
        parsed = ApiAutoAdjustQualifier.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_auto_adjust_qualifier_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiAutoAdjustQualifier | None:
    """Get auto-adjust qualifier by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustQualifier

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiAutoAdjustQualifier | None
    """
    # Extract request parameters from generated function
    kwargs = get_auto_adjust_qualifier_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiAutoAdjustQualifier.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_auto_adjust_qualifier_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiAutoAdjustQualifier]:
    """Get auto-adjust qualifier by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiAutoAdjustQualifier]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiAutoAdjustQualifier]
    """
    # Extract request parameters from generated function
    kwargs = get_auto_adjust_qualifier_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiAutoAdjustQualifier:
        parsed = ApiAutoAdjustQualifier.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_auto_adjust_qualifier_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiAutoAdjustQualifier | None:
    """Get auto-adjust qualifier by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiAutoAdjustQualifier

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiAutoAdjustQualifier | None
    """
    # Extract request parameters from generated function
    kwargs = get_auto_adjust_qualifier_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiAutoAdjustQualifier.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None
