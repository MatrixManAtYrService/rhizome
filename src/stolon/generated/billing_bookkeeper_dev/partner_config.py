"""
Proxied wrapper functions for billing-bookkeeper dev - partner_config.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_cellular_billing_method import (
    ApiCellularBillingMethod,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_invoice_method import (
    ApiInvoiceMethod,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_invoice_number_format import (
    ApiInvoiceNumberFormat,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_partner_config import (
    ApiPartnerConfig,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_plan_billing_method import (
    ApiPlanBillingMethod,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_post_method import (
    ApiPostMethod,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_resolved_partner_config import (
    ApiResolvedPartnerConfig,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_settlement_method import (
    ApiSettlementMethod,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_invoice_number_formats_sync_detailed(
    *, client: StolonClient
) -> Response[ApiInvoiceNumberFormat | list["ApiInvoiceNumberFormat"]]:
    """Get the valid invoice number format values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceNumberFormat, list['ApiInvoiceNumberFormat']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiInvoiceNumberFormat | list["ApiInvoiceNumberFormat"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_invoice_number_formats",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceNumberFormat, list["ApiInvoiceNumberFormat"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_number_formats_sync(
    *, client: StolonClient
) -> ApiInvoiceNumberFormat | list["ApiInvoiceNumberFormat"] | None:
    """Get the valid invoice number format values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceNumberFormat, list['ApiInvoiceNumberFormat']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiInvoiceNumberFormat | list["ApiInvoiceNumberFormat"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_invoice_number_formats",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceNumberFormat, list["ApiInvoiceNumberFormat"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_number_formats_asyncio_detailed(
    *, client: StolonClient
) -> Response[ApiInvoiceNumberFormat | list["ApiInvoiceNumberFormat"]]:
    """Get the valid invoice number format values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiInvoiceNumberFormat, list['ApiInvoiceNumberFormat']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiInvoiceNumberFormat | list["ApiInvoiceNumberFormat"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_invoice_number_formats",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiInvoiceNumberFormat, list["ApiInvoiceNumberFormat"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_number_formats_asyncio(
    *, client: StolonClient
) -> ApiInvoiceNumberFormat | list["ApiInvoiceNumberFormat"] | None:
    """Get the valid invoice number format values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiInvoiceNumberFormat, list['ApiInvoiceNumberFormat']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiInvoiceNumberFormat | list["ApiInvoiceNumberFormat"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_invoice_number_formats",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiInvoiceNumberFormat, list["ApiInvoiceNumberFormat"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_resolved_partner_config_sync_detailed(
    *, client: StolonClient, billing_entity_uuid: str, hierarchy_type: str, date: datetime.date
) -> Response[ApiResolvedPartnerConfig | ResponseError]:
    """Get the partner configuration for a partner reseller or pseudo billing entity where the default
    values are resolved from parent entities in the specified schedule hierarchy.

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiResolvedPartnerConfig, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date

    Returns:
        Response[ApiResolvedPartnerConfig | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_resolved_partner_config",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiResolvedPartnerConfig, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_resolved_partner_config_sync(
    *, client: StolonClient, billing_entity_uuid: str, hierarchy_type: str, date: datetime.date
) -> ApiResolvedPartnerConfig | ResponseError | None:
    """Get the partner configuration for a partner reseller or pseudo billing entity where the default
    values are resolved from parent entities in the specified schedule hierarchy.

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiResolvedPartnerConfig, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date

    Returns:
        ApiResolvedPartnerConfig | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_resolved_partner_config",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiResolvedPartnerConfig, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_resolved_partner_config_asyncio_detailed(
    *, client: StolonClient, billing_entity_uuid: str, hierarchy_type: str, date: datetime.date
) -> Response[ApiResolvedPartnerConfig | ResponseError]:
    """Get the partner configuration for a partner reseller or pseudo billing entity where the default
    values are resolved from parent entities in the specified schedule hierarchy.

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiResolvedPartnerConfig, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date

    Returns:
        Response[ApiResolvedPartnerConfig | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_resolved_partner_config",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiResolvedPartnerConfig, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_resolved_partner_config_asyncio(
    *, client: StolonClient, billing_entity_uuid: str, hierarchy_type: str, date: datetime.date
) -> ApiResolvedPartnerConfig | ResponseError | None:
    """Get the partner configuration for a partner reseller or pseudo billing entity where the default
    values are resolved from parent entities in the specified schedule hierarchy.

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (datetime.date):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiResolvedPartnerConfig, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        date: datetime.date

    Returns:
        ApiResolvedPartnerConfig | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_resolved_partner_config",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiResolvedPartnerConfig, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_methods_sync_detailed(*, client: StolonClient) -> Response[ResponseError | list["ApiInvoiceMethod"]]:
    """Get the valid invoice method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiInvoiceMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ResponseError | list["ApiInvoiceMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_invoice_methods",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiInvoiceMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_methods_sync(*, client: StolonClient) -> ResponseError | list["ApiInvoiceMethod"] | None:
    """Get the valid invoice method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiInvoiceMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ResponseError | list["ApiInvoiceMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_invoice_methods",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiInvoiceMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_methods_asyncio_detailed(*, client: StolonClient) -> Response[ResponseError | list["ApiInvoiceMethod"]]:
    """Get the valid invoice method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiInvoiceMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ResponseError | list["ApiInvoiceMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_invoice_methods",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiInvoiceMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_invoice_methods_asyncio(*, client: StolonClient) -> ResponseError | list["ApiInvoiceMethod"] | None:
    """Get the valid invoice method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiInvoiceMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ResponseError | list["ApiInvoiceMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_invoice_methods",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiInvoiceMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_methods_sync_detailed(
    *, client: StolonClient
) -> Response[ApiSettlementMethod | list["ApiSettlementMethod"]]:
    """Get the valid settlement method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementMethod, list['ApiSettlementMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiSettlementMethod | list["ApiSettlementMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_settlement_methods",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementMethod, list["ApiSettlementMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_methods_sync(*, client: StolonClient) -> ApiSettlementMethod | list["ApiSettlementMethod"] | None:
    """Get the valid settlement method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementMethod, list['ApiSettlementMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiSettlementMethod | list["ApiSettlementMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_settlement_methods",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementMethod, list["ApiSettlementMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_methods_asyncio_detailed(
    *, client: StolonClient
) -> Response[ApiSettlementMethod | list["ApiSettlementMethod"]]:
    """Get the valid settlement method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiSettlementMethod, list['ApiSettlementMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ApiSettlementMethod | list["ApiSettlementMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_settlement_methods",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiSettlementMethod, list["ApiSettlementMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_settlement_methods_asyncio(*, client: StolonClient) -> ApiSettlementMethod | list["ApiSettlementMethod"] | None:
    """Get the valid settlement method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiSettlementMethod, list['ApiSettlementMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ApiSettlementMethod | list["ApiSettlementMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_settlement_methods",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiSettlementMethod, list["ApiSettlementMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_partner_config_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiPartnerConfig
) -> Response[ApiPartnerConfig]:
    """Update a partner configuration

    Args:
        uuid (str):
        body (ApiPartnerConfig):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPartnerConfig]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiPartnerConfig

    Returns:
        Response[ApiPartnerConfig]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.update_partner_config",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_partner_config_sync(*, client: StolonClient, uuid: str, body: ApiPartnerConfig) -> ApiPartnerConfig | None:
    """Update a partner configuration

    Args:
        uuid (str):
        body (ApiPartnerConfig):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPartnerConfig

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiPartnerConfig

    Returns:
        ApiPartnerConfig | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.update_partner_config",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_partner_config_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiPartnerConfig
) -> Response[ApiPartnerConfig]:
    """Update a partner configuration

    Args:
        uuid (str):
        body (ApiPartnerConfig):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPartnerConfig]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiPartnerConfig

    Returns:
        Response[ApiPartnerConfig]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.update_partner_config",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_partner_config_asyncio(
    *, client: StolonClient, uuid: str, body: ApiPartnerConfig
) -> ApiPartnerConfig | None:
    """Update a partner configuration

    Args:
        uuid (str):
        body (ApiPartnerConfig):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPartnerConfig

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiPartnerConfig

    Returns:
        ApiPartnerConfig | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.update_partner_config",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_partner_config_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiPartnerConfig]:
    """Get a partner configuration by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPartnerConfig]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiPartnerConfig]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_partner_config_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_partner_config_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiPartnerConfig | None:
    """Get a partner configuration by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPartnerConfig

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiPartnerConfig | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_partner_config_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_partner_config_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ApiPartnerConfig]:
    """Get a partner configuration by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPartnerConfig]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiPartnerConfig]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_partner_config_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_partner_config_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiPartnerConfig | None:
    """Get a partner configuration by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPartnerConfig

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiPartnerConfig | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_partner_config_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_unresolved_partner_config_sync_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiPartnerConfig | list["ApiPartnerConfig"]]:
    """Get the unresolved partner configuration for a reseller or pseudo billing entity

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiPartnerConfig, list['ApiPartnerConfig']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiPartnerConfig | list["ApiPartnerConfig"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_unresolved_partner_config",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiPartnerConfig, list["ApiPartnerConfig"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_unresolved_partner_config_sync(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiPartnerConfig | list["ApiPartnerConfig"] | None:
    """Get the unresolved partner configuration for a reseller or pseudo billing entity

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiPartnerConfig, list['ApiPartnerConfig']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiPartnerConfig | list["ApiPartnerConfig"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_unresolved_partner_config",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiPartnerConfig, list["ApiPartnerConfig"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_unresolved_partner_config_asyncio_detailed(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiPartnerConfig | list["ApiPartnerConfig"]]:
    """Get the unresolved partner configuration for a reseller or pseudo billing entity

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiPartnerConfig, list['ApiPartnerConfig']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiPartnerConfig | list["ApiPartnerConfig"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_unresolved_partner_config",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiPartnerConfig, list["ApiPartnerConfig"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_unresolved_partner_config_asyncio(
    *,
    client: StolonClient,
    billing_entity_uuid: str,
    hierarchy_type: str,
    date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiPartnerConfig | list["ApiPartnerConfig"] | None:
    """Get the unresolved partner configuration for a reseller or pseudo billing entity

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiPartnerConfig, list['ApiPartnerConfig']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                billing_entity_uuid: str
        hierarchy_type: str
        date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiPartnerConfig | list["ApiPartnerConfig"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "billing_entity_uuid": serialize_argument(billing_entity_uuid),
        "hierarchy_type": serialize_argument(hierarchy_type),
        "date": serialize_argument(date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_unresolved_partner_config",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiPartnerConfig, list["ApiPartnerConfig"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_partner_config_sync_detailed(*, client: StolonClient, body: ApiPartnerConfig) -> Response[ApiPartnerConfig]:
    """Create a partner configuration

    Args:
        body (ApiPartnerConfig):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPartnerConfig]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPartnerConfig

    Returns:
        Response[ApiPartnerConfig]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.create_partner_config",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_partner_config_sync(*, client: StolonClient, body: ApiPartnerConfig) -> ApiPartnerConfig | None:
    """Create a partner configuration

    Args:
        body (ApiPartnerConfig):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPartnerConfig

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPartnerConfig

    Returns:
        ApiPartnerConfig | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.create_partner_config",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_partner_config_asyncio_detailed(
    *, client: StolonClient, body: ApiPartnerConfig
) -> Response[ApiPartnerConfig]:
    """Create a partner configuration

    Args:
        body (ApiPartnerConfig):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiPartnerConfig]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPartnerConfig

    Returns:
        Response[ApiPartnerConfig]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.create_partner_config",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_partner_config_asyncio(*, client: StolonClient, body: ApiPartnerConfig) -> ApiPartnerConfig | None:
    """Create a partner configuration

    Args:
        body (ApiPartnerConfig):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiPartnerConfig

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiPartnerConfig

    Returns:
        ApiPartnerConfig | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.create_partner_config",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiPartnerConfig]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_billing_methods_sync_detailed(
    *, client: StolonClient
) -> Response[ResponseError | list["ApiCellularBillingMethod"]]:
    """Get the valid cellular billing method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiCellularBillingMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ResponseError | list["ApiCellularBillingMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_cellular_billing_methods",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiCellularBillingMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_billing_methods_sync(
    *, client: StolonClient
) -> ResponseError | list["ApiCellularBillingMethod"] | None:
    """Get the valid cellular billing method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiCellularBillingMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ResponseError | list["ApiCellularBillingMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_cellular_billing_methods",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiCellularBillingMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_billing_methods_asyncio_detailed(
    *, client: StolonClient
) -> Response[ResponseError | list["ApiCellularBillingMethod"]]:
    """Get the valid cellular billing method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiCellularBillingMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ResponseError | list["ApiCellularBillingMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_cellular_billing_methods",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiCellularBillingMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_cellular_billing_methods_asyncio(
    *, client: StolonClient
) -> ResponseError | list["ApiCellularBillingMethod"] | None:
    """Get the valid cellular billing method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiCellularBillingMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ResponseError | list["ApiCellularBillingMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_cellular_billing_methods",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiCellularBillingMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_billing_methods_sync_detailed(
    *, client: StolonClient
) -> Response[ResponseError | list["ApiPlanBillingMethod"]]:
    """Get the valid plan billing method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiPlanBillingMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ResponseError | list["ApiPlanBillingMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_plan_billing_methods",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiPlanBillingMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_billing_methods_sync(*, client: StolonClient) -> ResponseError | list["ApiPlanBillingMethod"] | None:
    """Get the valid plan billing method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiPlanBillingMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ResponseError | list["ApiPlanBillingMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_plan_billing_methods",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiPlanBillingMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_billing_methods_asyncio_detailed(
    *, client: StolonClient
) -> Response[ResponseError | list["ApiPlanBillingMethod"]]:
    """Get the valid plan billing method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiPlanBillingMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ResponseError | list["ApiPlanBillingMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_plan_billing_methods",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiPlanBillingMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_plan_billing_methods_asyncio(*, client: StolonClient) -> ResponseError | list["ApiPlanBillingMethod"] | None:
    """Get the valid plan billing method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiPlanBillingMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ResponseError | list["ApiPlanBillingMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_plan_billing_methods",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiPlanBillingMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_post_methods_sync_detailed(*, client: StolonClient) -> Response[ResponseError | list["ApiPostMethod"]]:
    """Get the valid post method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiPostMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ResponseError | list["ApiPostMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_post_methods",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiPostMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_post_methods_sync(*, client: StolonClient) -> ResponseError | list["ApiPostMethod"] | None:
    """Get the valid post method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiPostMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ResponseError | list["ApiPostMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_post_methods",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiPostMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_post_methods_asyncio_detailed(*, client: StolonClient) -> Response[ResponseError | list["ApiPostMethod"]]:
    """Get the valid post method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiPostMethod']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        Response[ResponseError | list["ApiPostMethod"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_post_methods",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiPostMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_post_methods_asyncio(*, client: StolonClient) -> ResponseError | list["ApiPostMethod"] | None:
    """Get the valid post method values that can be configured.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiPostMethod']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions


    Returns:
        ResponseError | list["ApiPostMethod"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.get_post_methods",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiPostMethod"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_partner_config_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ResponseError | str]:
    """Delete a partner configuration

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, str]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError | str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.delete_partner_config_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ResponseError, str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_partner_config_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | str | None:
    """Delete a partner configuration

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.delete_partner_config_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ResponseError, str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_partner_config_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ResponseError | str]:
    """Delete a partner configuration

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, str]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError | str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.delete_partner_config_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ResponseError, str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_partner_config_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | str | None:
    """Delete a partner configuration

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="partner_config.delete_partner_config_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ResponseError, str]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
