"""
Proxied wrapper functions for billing-bookkeeper dev - ledger_journal.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
import json
from http import HTTPStatus
from typing import Union

from stolon.client import StolonClient
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.api.ledger_journal import (
    get_ledger_journal_by_uuid,
    get_ledger_journals_by_journal_date,
    get_ledger_journals_by_ledger_account_uuid,
    get_ledger_journals_by_ref_uuid,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_ledger_journal import (
    ApiLedgerJournal,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_ledger_journal_projection import (
    ApiLedgerJournalProjection,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset


def get_ledger_journals_by_journal_date_sync_detailed(
    *,
    client: StolonClient,
    min_date: Union[Unset, datetime.date] = UNSET,
    max_date: Union[Unset, datetime.date] = UNSET,
    ledger_account_uuid: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiLedgerJournalProjection"]]:
    """Get ledger journal entries for the specified journal date range

    Args:
        min_date (Union[Unset, datetime.date]):
        max_date (Union[Unset, datetime.date]):
        ledger_account_uuid (Union[Unset, str]):
        currency (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiLedgerJournalProjection']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                min_date: Union[Unset, datetime.date]
        max_date: Union[Unset, datetime.date]
        ledger_account_uuid: Union[Unset, str]
        currency: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiLedgerJournalProjection"]]
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_journal_date._get_kwargs(
        min_date=min_date,
        max_date=max_date,
        ledger_account_uuid=ledger_account_uuid,
        currency=currency,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_ledger_journals_by_journal_date_sync(
    *,
    client: StolonClient,
    min_date: Union[Unset, datetime.date] = UNSET,
    max_date: Union[Unset, datetime.date] = UNSET,
    ledger_account_uuid: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiLedgerJournalProjection"] | None:
    """Get ledger journal entries for the specified journal date range

    Args:
        min_date (Union[Unset, datetime.date]):
        max_date (Union[Unset, datetime.date]):
        ledger_account_uuid (Union[Unset, str]):
        currency (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiLedgerJournalProjection']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                min_date: Union[Unset, datetime.date]
        max_date: Union[Unset, datetime.date]
        ledger_account_uuid: Union[Unset, str]
        currency: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiLedgerJournalProjection"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_journal_date._get_kwargs(
        min_date=min_date,
        max_date=max_date,
        ledger_account_uuid=ledger_account_uuid,
        currency=currency,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_ledger_journals_by_journal_date_asyncio_detailed(
    *,
    client: StolonClient,
    min_date: Union[Unset, datetime.date] = UNSET,
    max_date: Union[Unset, datetime.date] = UNSET,
    ledger_account_uuid: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiLedgerJournalProjection"]]:
    """Get ledger journal entries for the specified journal date range

    Args:
        min_date (Union[Unset, datetime.date]):
        max_date (Union[Unset, datetime.date]):
        ledger_account_uuid (Union[Unset, str]):
        currency (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiLedgerJournalProjection']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                min_date: Union[Unset, datetime.date]
        max_date: Union[Unset, datetime.date]
        ledger_account_uuid: Union[Unset, str]
        currency: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiLedgerJournalProjection"]]
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_journal_date._get_kwargs(
        min_date=min_date,
        max_date=max_date,
        ledger_account_uuid=ledger_account_uuid,
        currency=currency,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_ledger_journals_by_journal_date_asyncio(
    *,
    client: StolonClient,
    min_date: Union[Unset, datetime.date] = UNSET,
    max_date: Union[Unset, datetime.date] = UNSET,
    ledger_account_uuid: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiLedgerJournalProjection"] | None:
    """Get ledger journal entries for the specified journal date range

    Args:
        min_date (Union[Unset, datetime.date]):
        max_date (Union[Unset, datetime.date]):
        ledger_account_uuid (Union[Unset, str]):
        currency (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiLedgerJournalProjection']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                min_date: Union[Unset, datetime.date]
        max_date: Union[Unset, datetime.date]
        ledger_account_uuid: Union[Unset, str]
        currency: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiLedgerJournalProjection"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_journal_date._get_kwargs(
        min_date=min_date,
        max_date=max_date,
        ledger_account_uuid=ledger_account_uuid,
        currency=currency,
        page_size=page_size,
        page_number=page_number,
    )

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_ledger_journals_by_ledger_account_uuid_sync_detailed(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    journal_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiLedgerJournal | list["ApiLedgerJournal"]]:
    """Get ledger journal entries using the UUID of the ledger account that the journal entries are for and
    optionally the journal date

    Args:
        ledger_acct_uuid (str):
        journal_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerJournal, list['ApiLedgerJournal']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                ledger_acct_uuid: str
        journal_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiLedgerJournal | list["ApiLedgerJournal"]]
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_ledger_account_uuid._get_kwargs(
        ledger_acct_uuid=ledger_acct_uuid, journal_date=journal_date, page_size=page_size, page_number=page_number
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_ledger_journals_by_ledger_account_uuid_sync(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    journal_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiLedgerJournal | list["ApiLedgerJournal"] | None:
    """Get ledger journal entries using the UUID of the ledger account that the journal entries are for and
    optionally the journal date

    Args:
        ledger_acct_uuid (str):
        journal_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerJournal, list['ApiLedgerJournal']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                ledger_acct_uuid: str
        journal_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiLedgerJournal | list["ApiLedgerJournal"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_ledger_account_uuid._get_kwargs(
        ledger_acct_uuid=ledger_acct_uuid, journal_date=journal_date, page_size=page_size, page_number=page_number
    )

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_ledger_journals_by_ledger_account_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    journal_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiLedgerJournal | list["ApiLedgerJournal"]]:
    """Get ledger journal entries using the UUID of the ledger account that the journal entries are for and
    optionally the journal date

    Args:
        ledger_acct_uuid (str):
        journal_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerJournal, list['ApiLedgerJournal']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                ledger_acct_uuid: str
        journal_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiLedgerJournal | list["ApiLedgerJournal"]]
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_ledger_account_uuid._get_kwargs(
        ledger_acct_uuid=ledger_acct_uuid, journal_date=journal_date, page_size=page_size, page_number=page_number
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_ledger_journals_by_ledger_account_uuid_asyncio(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    journal_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiLedgerJournal | list["ApiLedgerJournal"] | None:
    """Get ledger journal entries using the UUID of the ledger account that the journal entries are for and
    optionally the journal date

    Args:
        ledger_acct_uuid (str):
        journal_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerJournal, list['ApiLedgerJournal']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                ledger_acct_uuid: str
        journal_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiLedgerJournal | list["ApiLedgerJournal"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_ledger_account_uuid._get_kwargs(
        ledger_acct_uuid=ledger_acct_uuid, journal_date=journal_date, page_size=page_size, page_number=page_number
    )

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_ledger_journals_by_ref_uuid_sync_detailed(
    *, client: StolonClient, ref_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[ApiLedgerJournal | list["ApiLedgerJournal"]]:
    """Get ledger journal entries for the specified reference UUID

    Args:
        ref_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerJournal, list['ApiLedgerJournal']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                ref_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiLedgerJournal | list["ApiLedgerJournal"]]
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_ref_uuid._get_kwargs(
        ref_uuid=ref_uuid, page_size=page_size, page_number=page_number
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_ledger_journals_by_ref_uuid_sync(
    *, client: StolonClient, ref_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> ApiLedgerJournal | list["ApiLedgerJournal"] | None:
    """Get ledger journal entries for the specified reference UUID

    Args:
        ref_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerJournal, list['ApiLedgerJournal']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                ref_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiLedgerJournal | list["ApiLedgerJournal"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_ref_uuid._get_kwargs(
        ref_uuid=ref_uuid, page_size=page_size, page_number=page_number
    )

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_ledger_journals_by_ref_uuid_asyncio_detailed(
    *, client: StolonClient, ref_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[ApiLedgerJournal | list["ApiLedgerJournal"]]:
    """Get ledger journal entries for the specified reference UUID

    Args:
        ref_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerJournal, list['ApiLedgerJournal']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                ref_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiLedgerJournal | list["ApiLedgerJournal"]]
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_ref_uuid._get_kwargs(
        ref_uuid=ref_uuid, page_size=page_size, page_number=page_number
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_ledger_journals_by_ref_uuid_asyncio(
    *, client: StolonClient, ref_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> ApiLedgerJournal | list["ApiLedgerJournal"] | None:
    """Get ledger journal entries for the specified reference UUID

    Args:
        ref_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerJournal, list['ApiLedgerJournal']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                ref_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiLedgerJournal | list["ApiLedgerJournal"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journals_by_ref_uuid._get_kwargs(
        ref_uuid=ref_uuid, page_size=page_size, page_number=page_number
    )

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_ledger_journal_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiLedgerJournal]:
    """Get ledger journal entry by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiLedgerJournal]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiLedgerJournal]
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journal_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiLedgerJournal:
        parsed = ApiLedgerJournal.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_ledger_journal_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiLedgerJournal | None:
    """Get ledger journal entry by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiLedgerJournal

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiLedgerJournal | None
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journal_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiLedgerJournal.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_ledger_journal_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ApiLedgerJournal]:
    """Get ledger journal entry by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiLedgerJournal]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiLedgerJournal]
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journal_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiLedgerJournal:
        parsed = ApiLedgerJournal.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_ledger_journal_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiLedgerJournal | None:
    """Get ledger journal entry by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiLedgerJournal

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiLedgerJournal | None
    """
    # Extract request parameters from generated function
    kwargs = get_ledger_journal_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiLedgerJournal.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None
