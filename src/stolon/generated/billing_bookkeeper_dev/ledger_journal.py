"""
Proxied wrapper functions for billing-bookkeeper dev - ledger_journal.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_ledger_journal import (
    ApiLedgerJournal,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_ledger_journal_projection import (
    ApiLedgerJournalProjection,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_ledger_journals_by_journal_date_sync_detailed(
    *,
    client: StolonClient,
    min_date: Union[Unset, datetime.date] = UNSET,
    max_date: Union[Unset, datetime.date] = UNSET,
    ledger_account_uuid: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiLedgerJournalProjection"]]:
    """Get ledger journal entries for the specified journal date range

    Args:
        min_date (Union[Unset, datetime.date]):
        max_date (Union[Unset, datetime.date]):
        ledger_account_uuid (Union[Unset, str]):
        currency (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiLedgerJournalProjection']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                min_date: Union[Unset, datetime.date]
        max_date: Union[Unset, datetime.date]
        ledger_account_uuid: Union[Unset, str]
        currency: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiLedgerJournalProjection"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "min_date": serialize_argument(min_date),
        "max_date": serialize_argument(max_date),
        "ledger_account_uuid": serialize_argument(ledger_account_uuid),
        "currency": serialize_argument(currency),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_journal_date",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiLedgerJournalProjection"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_journal_date_sync(
    *,
    client: StolonClient,
    min_date: Union[Unset, datetime.date] = UNSET,
    max_date: Union[Unset, datetime.date] = UNSET,
    ledger_account_uuid: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiLedgerJournalProjection"] | None:
    """Get ledger journal entries for the specified journal date range

    Args:
        min_date (Union[Unset, datetime.date]):
        max_date (Union[Unset, datetime.date]):
        ledger_account_uuid (Union[Unset, str]):
        currency (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiLedgerJournalProjection']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                min_date: Union[Unset, datetime.date]
        max_date: Union[Unset, datetime.date]
        ledger_account_uuid: Union[Unset, str]
        currency: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiLedgerJournalProjection"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "min_date": serialize_argument(min_date),
        "max_date": serialize_argument(max_date),
        "ledger_account_uuid": serialize_argument(ledger_account_uuid),
        "currency": serialize_argument(currency),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_journal_date",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiLedgerJournalProjection"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_journal_date_asyncio_detailed(
    *,
    client: StolonClient,
    min_date: Union[Unset, datetime.date] = UNSET,
    max_date: Union[Unset, datetime.date] = UNSET,
    ledger_account_uuid: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiLedgerJournalProjection"]]:
    """Get ledger journal entries for the specified journal date range

    Args:
        min_date (Union[Unset, datetime.date]):
        max_date (Union[Unset, datetime.date]):
        ledger_account_uuid (Union[Unset, str]):
        currency (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiLedgerJournalProjection']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                min_date: Union[Unset, datetime.date]
        max_date: Union[Unset, datetime.date]
        ledger_account_uuid: Union[Unset, str]
        currency: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiLedgerJournalProjection"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "min_date": serialize_argument(min_date),
        "max_date": serialize_argument(max_date),
        "ledger_account_uuid": serialize_argument(ledger_account_uuid),
        "currency": serialize_argument(currency),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_journal_date",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiLedgerJournalProjection"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_journal_date_asyncio(
    *,
    client: StolonClient,
    min_date: Union[Unset, datetime.date] = UNSET,
    max_date: Union[Unset, datetime.date] = UNSET,
    ledger_account_uuid: Union[Unset, str] = UNSET,
    currency: Union[Unset, str] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiLedgerJournalProjection"] | None:
    """Get ledger journal entries for the specified journal date range

    Args:
        min_date (Union[Unset, datetime.date]):
        max_date (Union[Unset, datetime.date]):
        ledger_account_uuid (Union[Unset, str]):
        currency (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiLedgerJournalProjection']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                min_date: Union[Unset, datetime.date]
        max_date: Union[Unset, datetime.date]
        ledger_account_uuid: Union[Unset, str]
        currency: Union[Unset, str]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiLedgerJournalProjection"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "min_date": serialize_argument(min_date),
        "max_date": serialize_argument(max_date),
        "ledger_account_uuid": serialize_argument(ledger_account_uuid),
        "currency": serialize_argument(currency),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_journal_date",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiLedgerJournalProjection"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_ledger_account_uuid_sync_detailed(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    journal_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiLedgerJournal | list["ApiLedgerJournal"]]:
    """Get ledger journal entries using the UUID of the ledger account that the journal entries are for and
    optionally the journal date

    Args:
        ledger_acct_uuid (str):
        journal_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerJournal, list['ApiLedgerJournal']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        journal_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiLedgerJournal | list["ApiLedgerJournal"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "journal_date": serialize_argument(journal_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_ledger_account_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiLedgerJournal, list["ApiLedgerJournal"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_ledger_account_uuid_sync(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    journal_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiLedgerJournal | list["ApiLedgerJournal"] | None:
    """Get ledger journal entries using the UUID of the ledger account that the journal entries are for and
    optionally the journal date

    Args:
        ledger_acct_uuid (str):
        journal_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerJournal, list['ApiLedgerJournal']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        journal_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiLedgerJournal | list["ApiLedgerJournal"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "journal_date": serialize_argument(journal_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_ledger_account_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiLedgerJournal, list["ApiLedgerJournal"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_ledger_account_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    journal_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiLedgerJournal | list["ApiLedgerJournal"]]:
    """Get ledger journal entries using the UUID of the ledger account that the journal entries are for and
    optionally the journal date

    Args:
        ledger_acct_uuid (str):
        journal_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerJournal, list['ApiLedgerJournal']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        journal_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiLedgerJournal | list["ApiLedgerJournal"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "journal_date": serialize_argument(journal_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_ledger_account_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiLedgerJournal, list["ApiLedgerJournal"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_ledger_account_uuid_asyncio(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    journal_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiLedgerJournal | list["ApiLedgerJournal"] | None:
    """Get ledger journal entries using the UUID of the ledger account that the journal entries are for and
    optionally the journal date

    Args:
        ledger_acct_uuid (str):
        journal_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerJournal, list['ApiLedgerJournal']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        journal_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiLedgerJournal | list["ApiLedgerJournal"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "journal_date": serialize_argument(journal_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_ledger_account_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiLedgerJournal, list["ApiLedgerJournal"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_ref_uuid_sync_detailed(
    *, client: StolonClient, ref_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[ApiLedgerJournal | list["ApiLedgerJournal"]]:
    """Get ledger journal entries for the specified reference UUID

    Args:
        ref_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerJournal, list['ApiLedgerJournal']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ref_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiLedgerJournal | list["ApiLedgerJournal"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ref_uuid": serialize_argument(ref_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_ref_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiLedgerJournal, list["ApiLedgerJournal"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_ref_uuid_sync(
    *, client: StolonClient, ref_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> ApiLedgerJournal | list["ApiLedgerJournal"] | None:
    """Get ledger journal entries for the specified reference UUID

    Args:
        ref_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerJournal, list['ApiLedgerJournal']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ref_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiLedgerJournal | list["ApiLedgerJournal"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ref_uuid": serialize_argument(ref_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_ref_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiLedgerJournal, list["ApiLedgerJournal"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_ref_uuid_asyncio_detailed(
    *, client: StolonClient, ref_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[ApiLedgerJournal | list["ApiLedgerJournal"]]:
    """Get ledger journal entries for the specified reference UUID

    Args:
        ref_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerJournal, list['ApiLedgerJournal']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ref_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiLedgerJournal | list["ApiLedgerJournal"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ref_uuid": serialize_argument(ref_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_ref_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiLedgerJournal, list["ApiLedgerJournal"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journals_by_ref_uuid_asyncio(
    *, client: StolonClient, ref_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> ApiLedgerJournal | list["ApiLedgerJournal"] | None:
    """Get ledger journal entries for the specified reference UUID

    Args:
        ref_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerJournal, list['ApiLedgerJournal']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ref_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiLedgerJournal | list["ApiLedgerJournal"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ref_uuid": serialize_argument(ref_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journals_by_ref_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiLedgerJournal, list["ApiLedgerJournal"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journal_by_uuid_sync_detailed(*, client: StolonClient, uuid: str) -> Response[ApiLedgerJournal]:
    """Get ledger journal entry by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiLedgerJournal]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiLedgerJournal]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journal_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiLedgerJournal]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journal_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiLedgerJournal | None:
    """Get ledger journal entry by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiLedgerJournal

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiLedgerJournal | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journal_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiLedgerJournal]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journal_by_uuid_asyncio_detailed(*, client: StolonClient, uuid: str) -> Response[ApiLedgerJournal]:
    """Get ledger journal entry by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiLedgerJournal]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiLedgerJournal]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journal_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiLedgerJournal]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_journal_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiLedgerJournal | None:
    """Get ledger journal entry by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiLedgerJournal

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiLedgerJournal | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_journal.get_ledger_journal_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiLedgerJournal]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
