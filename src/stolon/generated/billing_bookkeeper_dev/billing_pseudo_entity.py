"""
Proxied wrapper functions for billing-bookkeeper dev - billing_pseudo_entity.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_billing_pseudo_entity import (
    ApiBillingPseudoEntity,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def create_billing_pseudo_entity_sync_detailed(
    *, client: StolonClient, body: ApiBillingPseudoEntity
) -> Response[ApiBillingPseudoEntity]:
    """Create billing pseudo entity

    Args:
        body (ApiBillingPseudoEntity):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingPseudoEntity]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBillingPseudoEntity

    Returns:
        Response[ApiBillingPseudoEntity]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.create_billing_pseudo_entity",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_billing_pseudo_entity_sync(
    *, client: StolonClient, body: ApiBillingPseudoEntity
) -> ApiBillingPseudoEntity | None:
    """Create billing pseudo entity

    Args:
        body (ApiBillingPseudoEntity):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingPseudoEntity

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBillingPseudoEntity

    Returns:
        ApiBillingPseudoEntity | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.create_billing_pseudo_entity",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_billing_pseudo_entity_asyncio_detailed(
    *, client: StolonClient, body: ApiBillingPseudoEntity
) -> Response[ApiBillingPseudoEntity]:
    """Create billing pseudo entity

    Args:
        body (ApiBillingPseudoEntity):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingPseudoEntity]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBillingPseudoEntity

    Returns:
        Response[ApiBillingPseudoEntity]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.create_billing_pseudo_entity",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def create_billing_pseudo_entity_asyncio(
    *, client: StolonClient, body: ApiBillingPseudoEntity
) -> ApiBillingPseudoEntity | None:
    """Create billing pseudo entity

    Args:
        body (ApiBillingPseudoEntity):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingPseudoEntity

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: ApiBillingPseudoEntity

    Returns:
        ApiBillingPseudoEntity | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.create_billing_pseudo_entity",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_billing_pseudo_entity_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiBillingPseudoEntity
) -> Response[ApiBillingPseudoEntity]:
    """Update billing pseudo entity

    Args:
        uuid (str):
        body (ApiBillingPseudoEntity):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingPseudoEntity]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiBillingPseudoEntity

    Returns:
        Response[ApiBillingPseudoEntity]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.update_billing_pseudo_entity",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_billing_pseudo_entity_sync(
    *, client: StolonClient, uuid: str, body: ApiBillingPseudoEntity
) -> ApiBillingPseudoEntity | None:
    """Update billing pseudo entity

    Args:
        uuid (str):
        body (ApiBillingPseudoEntity):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingPseudoEntity

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiBillingPseudoEntity

    Returns:
        ApiBillingPseudoEntity | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.update_billing_pseudo_entity",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_billing_pseudo_entity_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiBillingPseudoEntity
) -> Response[ApiBillingPseudoEntity]:
    """Update billing pseudo entity

    Args:
        uuid (str):
        body (ApiBillingPseudoEntity):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingPseudoEntity]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiBillingPseudoEntity

    Returns:
        Response[ApiBillingPseudoEntity]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.update_billing_pseudo_entity",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_billing_pseudo_entity_asyncio(
    *, client: StolonClient, uuid: str, body: ApiBillingPseudoEntity
) -> ApiBillingPseudoEntity | None:
    """Update billing pseudo entity

    Args:
        uuid (str):
        body (ApiBillingPseudoEntity):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingPseudoEntity

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiBillingPseudoEntity

    Returns:
        ApiBillingPseudoEntity | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.update_billing_pseudo_entity",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_pseudo_entity_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiBillingPseudoEntity]:
    """Get a billing pseudo entity by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingPseudoEntity]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiBillingPseudoEntity]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.get_billing_pseudo_entity_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_pseudo_entity_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiBillingPseudoEntity | None:
    """Get a billing pseudo entity by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingPseudoEntity

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiBillingPseudoEntity | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.get_billing_pseudo_entity_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_pseudo_entity_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiBillingPseudoEntity]:
    """Get a billing pseudo entity by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingPseudoEntity]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiBillingPseudoEntity]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.get_billing_pseudo_entity_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_billing_pseudo_entity_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiBillingPseudoEntity | None:
    """Get a billing pseudo entity by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingPseudoEntity

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiBillingPseudoEntity | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.get_billing_pseudo_entity_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_all_billing_pseudo_entities_sync_detailed(
    *, client: StolonClient, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[ApiBillingPseudoEntity]:
    """Get all billing pseudo entities

    Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingPseudoEntity]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiBillingPseudoEntity]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"page_size": serialize_argument(page_size), "page_number": serialize_argument(page_number)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.get_all_billing_pseudo_entities",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_all_billing_pseudo_entities_sync(
    *, client: StolonClient, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> ApiBillingPseudoEntity | None:
    """Get all billing pseudo entities

    Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingPseudoEntity

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiBillingPseudoEntity | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"page_size": serialize_argument(page_size), "page_number": serialize_argument(page_number)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.get_all_billing_pseudo_entities",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_all_billing_pseudo_entities_asyncio_detailed(
    *, client: StolonClient, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[ApiBillingPseudoEntity]:
    """Get all billing pseudo entities

    Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingPseudoEntity]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiBillingPseudoEntity]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"page_size": serialize_argument(page_size), "page_number": serialize_argument(page_number)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.get_all_billing_pseudo_entities",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_all_billing_pseudo_entities_asyncio(
    *, client: StolonClient, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> ApiBillingPseudoEntity | None:
    """Get all billing pseudo entities

    Args:
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingPseudoEntity

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiBillingPseudoEntity | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"page_size": serialize_argument(page_size), "page_number": serialize_argument(page_number)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.get_all_billing_pseudo_entities",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ApiBillingPseudoEntity]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_billing_pseudo_entity_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError | bool]:
    """Delete billing pseudo entity

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, bool]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError | bool]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.delete_billing_pseudo_entity_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ResponseError, bool]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_billing_pseudo_entity_by_uuid_sync(*, client: StolonClient, uuid: str) -> ResponseError | bool | None:
    """Delete billing pseudo entity

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, bool]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | bool | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.delete_billing_pseudo_entity_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ResponseError, bool]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_billing_pseudo_entity_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ResponseError | bool]:
    """Delete billing pseudo entity

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, bool]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ResponseError | bool]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.delete_billing_pseudo_entity_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ResponseError, bool]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def delete_billing_pseudo_entity_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ResponseError | bool | None:
    """Delete billing pseudo entity

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, bool]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ResponseError | bool | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="billing_pseudo_entity.delete_billing_pseudo_entity_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ResponseError, bool]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
