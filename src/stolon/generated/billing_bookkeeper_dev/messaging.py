"""
Proxied wrapper functions for billing-bookkeeper dev - messaging.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import datetime
from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_consumer_failure import (
    ApiConsumerFailure,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_consumer_failure_history import (
    ApiConsumerFailureHistory,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_consumer_failure_update_response import (
    ApiConsumerFailureUpdateResponse,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def acknowledge_consumer_failure_sync_detailed(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> Response[ApiConsumerFailureUpdateResponse | ResponseError]:
    """Acknowledges a consumer failure which deletes the failure and moves it to consumer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailureUpdateResponse, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        Response[ApiConsumerFailureUpdateResponse | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.acknowledge_consumer_failure",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiConsumerFailureUpdateResponse, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failure_sync(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> ApiConsumerFailureUpdateResponse | ResponseError | None:
    """Acknowledges a consumer failure which deletes the failure and moves it to consumer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailureUpdateResponse, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        ApiConsumerFailureUpdateResponse | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.acknowledge_consumer_failure",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiConsumerFailureUpdateResponse, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failure_asyncio_detailed(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> Response[ApiConsumerFailureUpdateResponse | ResponseError]:
    """Acknowledges a consumer failure which deletes the failure and moves it to consumer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailureUpdateResponse, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        Response[ApiConsumerFailureUpdateResponse | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.acknowledge_consumer_failure",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiConsumerFailureUpdateResponse, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failure_asyncio(
    *, client: StolonClient, uuid: str, comment: Union[Unset, str] = UNSET
) -> ApiConsumerFailureUpdateResponse | ResponseError | None:
    """Acknowledges a consumer failure which deletes the failure and moves it to consumer failure history

    Args:
        uuid (str):
        comment (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailureUpdateResponse, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        comment: Union[Unset, str]

    Returns:
        ApiConsumerFailureUpdateResponse | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.acknowledge_consumer_failure",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiConsumerFailureUpdateResponse, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failure_sync_detailed(
    *, client: StolonClient, uuid: str, body: ApiConsumerFailureHistory
) -> Response[ApiConsumerFailureUpdateResponse | ResponseError]:
    """Retry a consumer failure

    Args:
        uuid (str):
        body (ApiConsumerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailureUpdateResponse, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiConsumerFailureHistory

    Returns:
        Response[ApiConsumerFailureUpdateResponse | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.retry_consumer_failure",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiConsumerFailureUpdateResponse, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failure_sync(
    *, client: StolonClient, uuid: str, body: ApiConsumerFailureHistory
) -> ApiConsumerFailureUpdateResponse | ResponseError | None:
    """Retry a consumer failure

    Args:
        uuid (str):
        body (ApiConsumerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailureUpdateResponse, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiConsumerFailureHistory

    Returns:
        ApiConsumerFailureUpdateResponse | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.retry_consumer_failure",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiConsumerFailureUpdateResponse, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failure_asyncio_detailed(
    *, client: StolonClient, uuid: str, body: ApiConsumerFailureHistory
) -> Response[ApiConsumerFailureUpdateResponse | ResponseError]:
    """Retry a consumer failure

    Args:
        uuid (str):
        body (ApiConsumerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailureUpdateResponse, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiConsumerFailureHistory

    Returns:
        Response[ApiConsumerFailureUpdateResponse | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.retry_consumer_failure",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiConsumerFailureUpdateResponse, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failure_asyncio(
    *, client: StolonClient, uuid: str, body: ApiConsumerFailureHistory
) -> ApiConsumerFailureUpdateResponse | ResponseError | None:
    """Retry a consumer failure

    Args:
        uuid (str):
        body (ApiConsumerFailureHistory):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailureUpdateResponse, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str
        body: ApiConsumerFailureHistory

    Returns:
        ApiConsumerFailureUpdateResponse | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid), "body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.retry_consumer_failure",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiConsumerFailureUpdateResponse, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failures_sync_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiConsumerFailure"]]:
    """Get a consumer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiConsumerFailure']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiConsumerFailure"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failures",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiConsumerFailure"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failures_sync(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiConsumerFailure"] | None:
    """Get a consumer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiConsumerFailure']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiConsumerFailure"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failures",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiConsumerFailure"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failures_asyncio_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiConsumerFailure"]]:
    """Get a consumer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiConsumerFailure']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiConsumerFailure"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failures",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiConsumerFailure"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failures_asyncio(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiConsumerFailure"] | None:
    """Get a consumer failures

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiConsumerFailure']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiConsumerFailure"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failures",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiConsumerFailure"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiConsumerFailure | ResponseError]:
    """Get a messaging consumer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailure, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiConsumerFailure | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failure_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiConsumerFailure, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiConsumerFailure | ResponseError | None:
    """Get a messaging consumer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailure, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiConsumerFailure | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failure_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiConsumerFailure, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiConsumerFailure | ResponseError]:
    """Get a messaging consumer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailure, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiConsumerFailure | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failure_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiConsumerFailure, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_by_uuid_asyncio(
    *, client: StolonClient, uuid: str
) -> ApiConsumerFailure | ResponseError | None:
    """Get a messaging consumer failure by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailure, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiConsumerFailure | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failure_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiConsumerFailure, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failures_sync_detailed(
    *, client: StolonClient, body: list[str]
) -> Response[ResponseError | list["ApiConsumerFailureUpdateResponse"]]:
    """Retry consumer failures

    Args:
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiConsumerFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]

    Returns:
        Response[ResponseError | list["ApiConsumerFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.retry_consumer_failures",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiConsumerFailureUpdateResponse"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failures_sync(
    *, client: StolonClient, body: list[str]
) -> ResponseError | list["ApiConsumerFailureUpdateResponse"] | None:
    """Retry consumer failures

    Args:
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiConsumerFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]

    Returns:
        ResponseError | list["ApiConsumerFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.retry_consumer_failures",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiConsumerFailureUpdateResponse"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failures_asyncio_detailed(
    *, client: StolonClient, body: list[str]
) -> Response[ResponseError | list["ApiConsumerFailureUpdateResponse"]]:
    """Retry consumer failures

    Args:
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiConsumerFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]

    Returns:
        Response[ResponseError | list["ApiConsumerFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.retry_consumer_failures",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiConsumerFailureUpdateResponse"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def retry_consumer_failures_asyncio(
    *, client: StolonClient, body: list[str]
) -> ResponseError | list["ApiConsumerFailureUpdateResponse"] | None:
    """Retry consumer failures

    Args:
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiConsumerFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]

    Returns:
        ResponseError | list["ApiConsumerFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.retry_consumer_failures",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiConsumerFailureUpdateResponse"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_histories_sync_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiConsumerFailureHistory | list["ApiConsumerFailureHistory"]]:
    """Get consumer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailureHistory, list['ApiConsumerFailureHistory']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiConsumerFailureHistory | list["ApiConsumerFailureHistory"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failure_histories",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiConsumerFailureHistory, list["ApiConsumerFailureHistory"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_histories_sync(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiConsumerFailureHistory | list["ApiConsumerFailureHistory"] | None:
    """Get consumer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailureHistory, list['ApiConsumerFailureHistory']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiConsumerFailureHistory | list["ApiConsumerFailureHistory"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failure_histories",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiConsumerFailureHistory, list["ApiConsumerFailureHistory"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_histories_asyncio_detailed(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ApiConsumerFailureHistory | list["ApiConsumerFailureHistory"]]:
    """Get consumer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiConsumerFailureHistory, list['ApiConsumerFailureHistory']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ApiConsumerFailureHistory | list["ApiConsumerFailureHistory"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failure_histories",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ApiConsumerFailureHistory, list["ApiConsumerFailureHistory"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_consumer_failure_histories_asyncio(
    *,
    client: StolonClient,
    topic: Union[Unset, str] = UNSET,
    reference_id: Union[Unset, str] = UNSET,
    start_date: Union[Unset, datetime.date] = UNSET,
    end_date: Union[Unset, datetime.date] = UNSET,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ApiConsumerFailureHistory | list["ApiConsumerFailureHistory"] | None:
    """Get consumer failure histories

    Args:
        topic (Union[Unset, str]):
        reference_id (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiConsumerFailureHistory, list['ApiConsumerFailureHistory']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                topic: Union[Unset, str]
        reference_id: Union[Unset, str]
        start_date: Union[Unset, datetime.date]
        end_date: Union[Unset, datetime.date]
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ApiConsumerFailureHistory | list["ApiConsumerFailureHistory"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "topic": serialize_argument(topic),
        "reference_id": serialize_argument(reference_id),
        "start_date": serialize_argument(start_date),
        "end_date": serialize_argument(end_date),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.get_consumer_failure_histories",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ApiConsumerFailureHistory, list["ApiConsumerFailureHistory"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failures_sync_detailed(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> Response[ResponseError | list["ApiConsumerFailureUpdateResponse"]]:
    """Acknowledges consumer failures which deletes the failures and moves them to consumer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiConsumerFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        Response[ResponseError | list["ApiConsumerFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.acknowledge_consumer_failures",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiConsumerFailureUpdateResponse"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failures_sync(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> ResponseError | list["ApiConsumerFailureUpdateResponse"] | None:
    """Acknowledges consumer failures which deletes the failures and moves them to consumer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiConsumerFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        ResponseError | list["ApiConsumerFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.acknowledge_consumer_failures",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiConsumerFailureUpdateResponse"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failures_asyncio_detailed(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> Response[ResponseError | list["ApiConsumerFailureUpdateResponse"]]:
    """Acknowledges consumer failures which deletes the failures and moves them to consumer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiConsumerFailureUpdateResponse']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        Response[ResponseError | list["ApiConsumerFailureUpdateResponse"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.acknowledge_consumer_failures",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiConsumerFailureUpdateResponse"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def acknowledge_consumer_failures_asyncio(
    *, client: StolonClient, body: list[str], comment: Union[Unset, str] = UNSET
) -> ResponseError | list["ApiConsumerFailureUpdateResponse"] | None:
    """Acknowledges consumer failures which deletes the failures and moves them to consumer failure history

    Args:
        comment (Union[Unset, str]):
        body (list[str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiConsumerFailureUpdateResponse']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: list[str]
        comment: Union[Unset, str]

    Returns:
        ResponseError | list["ApiConsumerFailureUpdateResponse"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body), "comment": serialize_argument(comment)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="messaging.acknowledge_consumer_failures",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiConsumerFailureUpdateResponse"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
