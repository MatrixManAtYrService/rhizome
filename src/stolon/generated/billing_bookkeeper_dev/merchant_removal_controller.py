"""
Proxied wrapper functions for billing-bookkeeper dev - merchant_removal_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Any

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import Response
from stolon.serialization import deserialize_result, serialize_argument


def update_merchant_with_no_terms_for_removal_sync_detailed(
    *, client: StolonClient, merchant_billing_entity_uuid: str
) -> Response[Any]:
    """Args:
        merchant_billing_entity_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_billing_entity_uuid: str

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_billing_entity_uuid": serialize_argument(merchant_billing_entity_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="merchant_removal_controller.update_merchant_with_no_terms_for_removal",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def update_merchant_with_no_terms_for_removal_asyncio_detailed(
    *, client: StolonClient, merchant_billing_entity_uuid: str
) -> Response[Any]:
    """Args:
        merchant_billing_entity_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                merchant_billing_entity_uuid: str

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"merchant_billing_entity_uuid": serialize_argument(merchant_billing_entity_uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="merchant_removal_controller.update_merchant_with_no_terms_for_removal",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
