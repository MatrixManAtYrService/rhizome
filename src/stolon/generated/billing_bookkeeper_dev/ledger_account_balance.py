"""
Proxied wrapper functions for billing-bookkeeper dev - ledger_account_balance.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.api_ledger_account_balance import (
    ApiLedgerAccountBalance,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_ledger_account_balances_by_ledger_account_uuid_sync_detailed(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiLedgerAccountBalance"]]:
    """Get the ledger account balances for a ledger account identified by UUID

    Args:
        ledger_acct_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiLedgerAccountBalance']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiLedgerAccountBalance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balances_by_ledger_account_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiLedgerAccountBalance"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balances_by_ledger_account_uuid_sync(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiLedgerAccountBalance"] | None:
    """Get the ledger account balances for a ledger account identified by UUID

    Args:
        ledger_acct_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiLedgerAccountBalance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiLedgerAccountBalance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balances_by_ledger_account_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiLedgerAccountBalance"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balances_by_ledger_account_uuid_asyncio_detailed(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> Response[ResponseError | list["ApiLedgerAccountBalance"]]:
    """Get the ledger account balances for a ledger account identified by UUID

    Args:
        ledger_acct_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ResponseError, list['ApiLedgerAccountBalance']]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError | list["ApiLedgerAccountBalance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balances_by_ledger_account_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[Union[ResponseError, list["ApiLedgerAccountBalance"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balances_by_ledger_account_uuid_asyncio(
    *,
    client: StolonClient,
    ledger_acct_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
) -> ResponseError | list["ApiLedgerAccountBalance"] | None:
    """Get the ledger account balances for a ledger account identified by UUID

    Args:
        ledger_acct_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ResponseError, list['ApiLedgerAccountBalance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | list["ApiLedgerAccountBalance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balances_by_ledger_account_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[Union[ResponseError, list["ApiLedgerAccountBalance"]]]',
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balance_sync_detailed(
    *, client: StolonClient, ledger_acct_uuid: str, currency: str
) -> Response[ApiLedgerAccountBalance | ResponseError]:
    """Get ledger account balance using the UUID of the ledger account the balance is for along with the
    currency

    Args:
        ledger_acct_uuid (str):
        currency (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerAccountBalance, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        currency: str

    Returns:
        Response[ApiLedgerAccountBalance | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "currency": serialize_argument(currency),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balance",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiLedgerAccountBalance, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balance_sync(
    *, client: StolonClient, ledger_acct_uuid: str, currency: str
) -> ApiLedgerAccountBalance | ResponseError | None:
    """Get ledger account balance using the UUID of the ledger account the balance is for along with the
    currency

    Args:
        ledger_acct_uuid (str):
        currency (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerAccountBalance, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        currency: str

    Returns:
        ApiLedgerAccountBalance | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "currency": serialize_argument(currency),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balance",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiLedgerAccountBalance, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balance_asyncio_detailed(
    *, client: StolonClient, ledger_acct_uuid: str, currency: str
) -> Response[ApiLedgerAccountBalance | ResponseError]:
    """Get ledger account balance using the UUID of the ledger account the balance is for along with the
    currency

    Args:
        ledger_acct_uuid (str):
        currency (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerAccountBalance, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        currency: str

    Returns:
        Response[ApiLedgerAccountBalance | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "currency": serialize_argument(currency),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balance",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiLedgerAccountBalance, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balance_asyncio(
    *, client: StolonClient, ledger_acct_uuid: str, currency: str
) -> ApiLedgerAccountBalance | ResponseError | None:
    """Get ledger account balance using the UUID of the ledger account the balance is for along with the
    currency

    Args:
        ledger_acct_uuid (str):
        currency (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerAccountBalance, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                ledger_acct_uuid: str
        currency: str

    Returns:
        ApiLedgerAccountBalance | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "ledger_acct_uuid": serialize_argument(ledger_acct_uuid),
        "currency": serialize_argument(currency),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balance",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiLedgerAccountBalance, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balance_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiLedgerAccountBalance | ResponseError]:
    """Get ledger account balance using the ledger account balance UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerAccountBalance, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiLedgerAccountBalance | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balance_by_uuid",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiLedgerAccountBalance, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balance_by_uuid_sync(
    *, client: StolonClient, uuid: str
) -> ApiLedgerAccountBalance | ResponseError | None:
    """Get ledger account balance using the ledger account balance UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerAccountBalance, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiLedgerAccountBalance | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balance_by_uuid",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiLedgerAccountBalance, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balance_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiLedgerAccountBalance | ResponseError]:
    """Get ledger account balance using the ledger account balance UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiLedgerAccountBalance, ResponseError]]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        Response[ApiLedgerAccountBalance | ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balance_by_uuid",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Union[ApiLedgerAccountBalance, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_ledger_account_balance_by_uuid_asyncio(
    *, client: StolonClient, uuid: str
) -> ApiLedgerAccountBalance | ResponseError | None:
    """Get ledger account balance using the ledger account balance UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiLedgerAccountBalance, ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                uuid: str

    Returns:
        ApiLedgerAccountBalance | ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"uuid": serialize_argument(uuid)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="ledger_account_balance.get_ledger_account_balance_by_uuid",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Union[ApiLedgerAccountBalance, ResponseError]]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
