"""
Proxied wrapper functions for billing-bookkeeper dev - action.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.models.response_error import (
    ResponseError,
)
from stolon.openapi_generated.billing_bookkeeper_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_actions_sync_detailed(
    *, client: StolonClient, fee_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[ResponseError]:
    """Get action

    Args:
        fee_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_uuid": serialize_argument(fee_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="action.get_actions",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_actions_sync(
    *, client: StolonClient, fee_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> ResponseError | None:
    """Get action

    Args:
        fee_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_uuid": serialize_argument(fee_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="action.get_actions",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_actions_asyncio_detailed(
    *, client: StolonClient, fee_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> Response[ResponseError]:
    """Get action

    Args:
        fee_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_uuid": serialize_argument(fee_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="action.get_actions",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_actions_asyncio(
    *, client: StolonClient, fee_uuid: str, page_size: Union[Unset, int] = UNSET, page_number: Union[Unset, int] = UNSET
) -> ResponseError | None:
    """Get action

    Args:
        fee_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                fee_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "fee_uuid": serialize_argument(fee_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="action.get_actions",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_action_by_reseller_sync_detailed(
    *,
    client: StolonClient,
    r_id: str,
    fee_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> Response[ResponseError]:
    """Get action by reseller

    Args:
        r_id (str):
        fee_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        fee_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "fee_uuid": serialize_argument(fee_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="action.get_action_by_reseller",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_action_by_reseller_sync(
    *,
    client: StolonClient,
    r_id: str,
    fee_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> ResponseError | None:
    """Get action by reseller

    Args:
        r_id (str):
        fee_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        fee_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "fee_uuid": serialize_argument(fee_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="action.get_action_by_reseller",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_action_by_reseller_asyncio_detailed(
    *,
    client: StolonClient,
    r_id: str,
    fee_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> Response[ResponseError]:
    """Get action by reseller

    Args:
        r_id (str):
        fee_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ResponseError]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        fee_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        Response[ResponseError]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "fee_uuid": serialize_argument(fee_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="action.get_action_by_reseller",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]


def get_action_by_reseller_asyncio(
    *,
    client: StolonClient,
    r_id: str,
    fee_uuid: str,
    page_size: Union[Unset, int] = UNSET,
    page_number: Union[Unset, int] = UNSET,
    x_clover_appenv: str,
) -> ResponseError | None:
    """Get action by reseller

    Args:
        r_id (str):
        fee_uuid (str):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ResponseError

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                r_id: str
        fee_uuid: str
        page_size: Union[Unset, int]
        page_number: Union[Unset, int]
        x_clover_appenv: str

    Returns:
        ResponseError | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "r_id": serialize_argument(r_id),
        "fee_uuid": serialize_argument(fee_uuid),
        "page_size": serialize_argument(page_size),
        "page_number": serialize_argument(page_number),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.BILLING_BOOKKEEPER_DEV,
        function_path="action.get_action_by_reseller",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[ResponseError]",
        "billing_bookkeeper_dev",
    )

    return result  # type: ignore[return-value]
