"""
Proxied wrapper functions for agreement-k8s dev - acceptance_controller_impl.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

import json
from http import HTTPStatus
from typing import Any
from uuid import UUID

from stolon.client import StolonClient
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import (
    create_acceptance,
    create_bulk_acceptances,
    delete_acceptance,
    delete_acceptance_with_action,
    get_acceptance,
    get_acceptances,
    get_acceptances_multiple_types,
    get_bulk_acceptances_by_type_for_account_id_client_scope,
    get_bulk_acceptances_service_scope,
    get_latest_acceptance,
    has_previously_accepted_agreements,
)
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance import Acceptance
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response


def create_bulk_acceptances_sync_detailed(*, client: StolonClient, type_: str) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = create_bulk_acceptances._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_bulk_acceptances_sync(*, client: StolonClient, type_: str) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = create_bulk_acceptances._get_kwargs(type_=type_)

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def create_bulk_acceptances_asyncio_detailed(*, client: StolonClient, type_: str) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = create_bulk_acceptances._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_bulk_acceptances_asyncio(*, client: StolonClient, type_: str) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = create_bulk_acceptances._get_kwargs(type_=type_)

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_acceptance_sync_detailed(*, client: StolonClient, acceptance_id: UUID) -> Response[Acceptance]:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID

    Returns:
        Response[Acceptance]
    """
    # Extract request parameters from generated function
    kwargs = get_acceptance._get_kwargs(acceptance_id=acceptance_id)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_acceptance_sync(*, client: StolonClient, acceptance_id: UUID) -> Acceptance | None:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID

    Returns:
        Acceptance | None
    """
    # Extract request parameters from generated function
    kwargs = get_acceptance._get_kwargs(acceptance_id=acceptance_id)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_acceptance_asyncio_detailed(*, client: StolonClient, acceptance_id: UUID) -> Response[Acceptance]:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID

    Returns:
        Response[Acceptance]
    """
    # Extract request parameters from generated function
    kwargs = get_acceptance._get_kwargs(acceptance_id=acceptance_id)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_acceptance_asyncio(*, client: StolonClient, acceptance_id: UUID) -> Acceptance | None:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID

    Returns:
        Acceptance | None
    """
    # Extract request parameters from generated function
    kwargs = get_acceptance._get_kwargs(acceptance_id=acceptance_id)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def has_previously_accepted_agreements_sync_detailed(*, client: StolonClient, type_: str) -> Response[bool]:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[bool]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Response[bool]
    """
    # Extract request parameters from generated function
    kwargs = has_previously_accepted_agreements._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def has_previously_accepted_agreements_sync(*, client: StolonClient, type_: str) -> bool | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        bool

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        bool | None
    """
    # Extract request parameters from generated function
    kwargs = has_previously_accepted_agreements._get_kwargs(type_=type_)

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def has_previously_accepted_agreements_asyncio_detailed(*, client: StolonClient, type_: str) -> Response[bool]:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[bool]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Response[bool]
    """
    # Extract request parameters from generated function
    kwargs = has_previously_accepted_agreements._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def has_previously_accepted_agreements_asyncio(*, client: StolonClient, type_: str) -> bool | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        bool

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        bool | None
    """
    # Extract request parameters from generated function
    kwargs = has_previously_accepted_agreements._get_kwargs(type_=type_)

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def delete_acceptance_with_action_sync_detailed(
    *, client: StolonClient, acceptance_id: UUID, action: DeleteAcceptanceWithActionAction
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        action (DeleteAcceptanceWithActionAction):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        action: DeleteAcceptanceWithActionAction

    Returns:
        Response[Any]
    """
    # Extract request parameters from generated function
    kwargs = delete_acceptance_with_action._get_kwargs(acceptance_id=acceptance_id, action=action)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def delete_acceptance_with_action_asyncio_detailed(
    *, client: StolonClient, acceptance_id: UUID, action: DeleteAcceptanceWithActionAction
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        action (DeleteAcceptanceWithActionAction):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        action: DeleteAcceptanceWithActionAction

    Returns:
        Response[Any]
    """
    # Extract request parameters from generated function
    kwargs = delete_acceptance_with_action._get_kwargs(acceptance_id=acceptance_id, action=action)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_latest_acceptance_sync_detailed(*, client: StolonClient, type_: str) -> Response[Acceptance]:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Response[Acceptance]
    """
    # Extract request parameters from generated function
    kwargs = get_latest_acceptance._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_latest_acceptance_sync(*, client: StolonClient, type_: str) -> Acceptance | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Acceptance | None
    """
    # Extract request parameters from generated function
    kwargs = get_latest_acceptance._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_latest_acceptance_asyncio_detailed(*, client: StolonClient, type_: str) -> Response[Acceptance]:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Response[Acceptance]
    """
    # Extract request parameters from generated function
    kwargs = get_latest_acceptance._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_latest_acceptance_asyncio(*, client: StolonClient, type_: str) -> Acceptance | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Acceptance | None
    """
    # Extract request parameters from generated function
    kwargs = get_latest_acceptance._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_acceptances_multiple_types_sync_detailed(*, client: StolonClient) -> Response[list["Acceptance"]]:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_acceptances_multiple_types._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_acceptances_multiple_types_sync(*, client: StolonClient) -> list["Acceptance"] | None:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_acceptances_multiple_types._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_acceptances_multiple_types_asyncio_detailed(*, client: StolonClient) -> Response[list["Acceptance"]]:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_acceptances_multiple_types._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_acceptances_multiple_types_asyncio(*, client: StolonClient) -> list["Acceptance"] | None:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_acceptances_multiple_types._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_bulk_acceptances_service_scope_sync_detailed(*, client: StolonClient) -> Response[list["Acceptance"]]:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_service_scope._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_bulk_acceptances_service_scope_sync(*, client: StolonClient) -> list["Acceptance"] | None:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_service_scope._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_bulk_acceptances_service_scope_asyncio_detailed(*, client: StolonClient) -> Response[list["Acceptance"]]:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_service_scope._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_bulk_acceptances_service_scope_asyncio(*, client: StolonClient) -> list["Acceptance"] | None:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_service_scope._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def delete_acceptance_sync_detailed(*, client: StolonClient, acceptance_id: UUID) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID

    Returns:
        Response[Any]
    """
    # Extract request parameters from generated function
    kwargs = delete_acceptance._get_kwargs(acceptance_id=acceptance_id)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def delete_acceptance_asyncio_detailed(*, client: StolonClient, acceptance_id: UUID) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID

    Returns:
        Response[Any]
    """
    # Extract request parameters from generated function
    kwargs = delete_acceptance._get_kwargs(acceptance_id=acceptance_id)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_bulk_acceptances_by_type_for_account_id_client_scope_sync_detailed(
    *, client: StolonClient, type_: str
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_by_type_for_account_id_client_scope._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_bulk_acceptances_by_type_for_account_id_client_scope_sync(
    *, client: StolonClient, type_: str
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_by_type_for_account_id_client_scope._get_kwargs(type_=type_)

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_bulk_acceptances_by_type_for_account_id_client_scope_asyncio_detailed(
    *, client: StolonClient, type_: str
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_by_type_for_account_id_client_scope._get_kwargs(type_=type_)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_bulk_acceptances_by_type_for_account_id_client_scope_asyncio(
    *, client: StolonClient, type_: str
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str

    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_by_type_for_account_id_client_scope._get_kwargs(type_=type_)

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def create_acceptance_sync_detailed(*, client: StolonClient) -> Response[Acceptance]:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[Acceptance]
    """
    # Extract request parameters from generated function
    kwargs = create_acceptance._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_acceptance_sync(*, client: StolonClient) -> Acceptance | None:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Acceptance | None
    """
    # Extract request parameters from generated function
    kwargs = create_acceptance._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_acceptance_asyncio_detailed(*, client: StolonClient) -> Response[Acceptance]:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[Acceptance]
    """
    # Extract request parameters from generated function
    kwargs = create_acceptance._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_acceptance_asyncio(*, client: StolonClient) -> Acceptance | None:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Acceptance | None
    """
    # Extract request parameters from generated function
    kwargs = create_acceptance._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_acceptances_sync_detailed(*, client: StolonClient) -> Response[list["Acceptance"]]:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_acceptances._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_acceptances_sync(*, client: StolonClient) -> list["Acceptance"] | None:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_acceptances._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_acceptances_asyncio_detailed(*, client: StolonClient) -> Response[list["Acceptance"]]:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[list["Acceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_acceptances._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_acceptances_asyncio(*, client: StolonClient) -> list["Acceptance"] | None:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        list["Acceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_acceptances._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="apidev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None
