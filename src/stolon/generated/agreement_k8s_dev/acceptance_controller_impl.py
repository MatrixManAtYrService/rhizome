"""
Proxied wrapper functions for agreement-k8s dev - acceptance_controller_impl.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from http import HTTPStatus
from stolon.client import StolonClient
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import create_acceptance
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import create_bulk_acceptances
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import delete_acceptance
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import delete_acceptance_with_action
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import get_acceptance
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import get_acceptances
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import get_acceptances_multiple_types
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import get_bulk_acceptances_by_type_for_account_id_client_scope
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import get_bulk_acceptances_service_scope
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import get_latest_acceptance
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.api.acceptance_controller_impl import has_previously_accepted_agreements
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance import Acceptance
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance_query import AcceptanceQuery
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance_query_v2 import AcceptanceQueryV2
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance_sort import AcceptanceSort
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.delete_acceptance_with_action_action import DeleteAcceptanceWithActionAction
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.get_bulk_acceptances_service_scope_body import GetBulkAcceptancesServiceScopeBody
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.pagination import Pagination
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import UNSET, Unset
from typing import Any
from typing import Union
from uuid import UUID
import json


def create_bulk_acceptances_sync_detailed(
    *,
    client: StolonClient,
    type_: str,
    body: list["Acceptance"],
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        body: list["Acceptance"]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = create_bulk_acceptances._get_kwargs(type_=type_, body=body, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_bulk_acceptances_sync(
    *,
    client: StolonClient,
    type_: str,
    body: list["Acceptance"],
    x_clover_appenv: Union[Unset, str] = UNSET
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        body: list["Acceptance"]
        x_clover_appenv: Union[Unset, str]

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_bulk_acceptances._get_kwargs(type_=type_, body=body, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_bulk_acceptances_asyncio_detailed(
    *,
    client: StolonClient,
    type_: str,
    body: list["Acceptance"],
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        body: list["Acceptance"]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = create_bulk_acceptances._get_kwargs(type_=type_, body=body, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_bulk_acceptances_asyncio(
    *,
    client: StolonClient,
    type_: str,
    body: list["Acceptance"],
    x_clover_appenv: Union[Unset, str] = UNSET
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        body: list["Acceptance"]
        x_clover_appenv: Union[Unset, str]

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = create_bulk_acceptances._get_kwargs(type_=type_, body=body, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_acceptance_sync_detailed(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    include_template_parameters: Union[Unset, bool] = UNSET
) -> Response[Acceptance]:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        include_template_parameters: Union[Unset, bool]

    Returns:
        Response[Acceptance]
    """

    # Extract request parameters from generated function
    kwargs = get_acceptance._get_kwargs(acceptance_id=acceptance_id, include_template_parameters=include_template_parameters)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Acceptance | None
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_acceptance_sync(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    include_template_parameters: Union[Unset, bool] = UNSET
) -> Acceptance | None:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        include_template_parameters: Union[Unset, bool]

    Returns:
        Acceptance | None
    """

    # Extract request parameters from generated function
    kwargs = get_acceptance._get_kwargs(acceptance_id=acceptance_id, include_template_parameters=include_template_parameters)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_acceptance_asyncio_detailed(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    include_template_parameters: Union[Unset, bool] = UNSET
) -> Response[Acceptance]:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        include_template_parameters: Union[Unset, bool]

    Returns:
        Response[Acceptance]
    """

    # Extract request parameters from generated function
    kwargs = get_acceptance._get_kwargs(acceptance_id=acceptance_id, include_template_parameters=include_template_parameters)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Acceptance | None
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_acceptance_asyncio(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    include_template_parameters: Union[Unset, bool] = UNSET
) -> Acceptance | None:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        include_template_parameters: Union[Unset, bool]

    Returns:
        Acceptance | None
    """

    # Extract request parameters from generated function
    kwargs = get_acceptance._get_kwargs(acceptance_id=acceptance_id, include_template_parameters=include_template_parameters)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def has_previously_accepted_agreements_sync_detailed(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: str,
    x_clover_account_id: str
) -> Response[bool]:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[bool]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        x_clover_merchant_id: str
        x_clover_account_id: str

    Returns:
        Response[bool]
    """

    # Extract request parameters from generated function
    kwargs = has_previously_accepted_agreements._get_kwargs(type_=type_, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def has_previously_accepted_agreements_sync(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: str,
    x_clover_account_id: str
) -> bool | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        bool

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        x_clover_merchant_id: str
        x_clover_account_id: str

    Returns:
        bool | None
    """

    # Extract request parameters from generated function
    kwargs = has_previously_accepted_agreements._get_kwargs(type_=type_, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def has_previously_accepted_agreements_asyncio_detailed(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: str,
    x_clover_account_id: str
) -> Response[bool]:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[bool]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        x_clover_merchant_id: str
        x_clover_account_id: str

    Returns:
        Response[bool]
    """

    # Extract request parameters from generated function
    kwargs = has_previously_accepted_agreements._get_kwargs(type_=type_, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def has_previously_accepted_agreements_asyncio(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: str,
    x_clover_account_id: str
) -> bool | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        bool

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        x_clover_merchant_id: str
        x_clover_account_id: str

    Returns:
        bool | None
    """

    # Extract request parameters from generated function
    kwargs = has_previously_accepted_agreements._get_kwargs(type_=type_, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def delete_acceptance_with_action_sync_detailed(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    action: DeleteAcceptanceWithActionAction,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        action (DeleteAcceptanceWithActionAction):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        action: DeleteAcceptanceWithActionAction
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = delete_acceptance_with_action._get_kwargs(acceptance_id=acceptance_id, action=action, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_acceptance_with_action_asyncio_detailed(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    action: DeleteAcceptanceWithActionAction,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        action (DeleteAcceptanceWithActionAction):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        action: DeleteAcceptanceWithActionAction
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = delete_acceptance_with_action._get_kwargs(acceptance_id=acceptance_id, action=action, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_latest_acceptance_sync_detailed(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET
) -> Response[Acceptance]:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Response[Acceptance]
    """

    # Extract request parameters from generated function
    kwargs = get_latest_acceptance._get_kwargs(type_=type_, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Acceptance | None
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_latest_acceptance_sync(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET
) -> Acceptance | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Acceptance | None
    """

    # Extract request parameters from generated function
    kwargs = get_latest_acceptance._get_kwargs(type_=type_, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_latest_acceptance_asyncio_detailed(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET
) -> Response[Acceptance]:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Response[Acceptance]
    """

    # Extract request parameters from generated function
    kwargs = get_latest_acceptance._get_kwargs(type_=type_, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Acceptance | None
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_latest_acceptance_asyncio(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET
) -> Acceptance | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Acceptance | None
    """

    # Extract request parameters from generated function
    kwargs = get_latest_acceptance._get_kwargs(type_=type_, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_acceptances_multiple_types_sync_detailed(
    *,
    client: StolonClient,
    query: "AcceptanceQueryV2",
    sort: "AcceptanceSort",
    pagination: "Pagination",
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET
) -> Response[list["Acceptance"]]:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                query: "AcceptanceQueryV2"
        sort: "AcceptanceSort"
        pagination: "Pagination"
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = get_acceptances_multiple_types._get_kwargs(query=query, sort=sort, pagination=pagination, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_acceptances_multiple_types_sync(
    *,
    client: StolonClient,
    query: "AcceptanceQueryV2",
    sort: "AcceptanceSort",
    pagination: "Pagination",
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET
) -> list["Acceptance"] | None:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                query: "AcceptanceQueryV2"
        sort: "AcceptanceSort"
        pagination: "Pagination"
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_acceptances_multiple_types._get_kwargs(query=query, sort=sort, pagination=pagination, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_acceptances_multiple_types_asyncio_detailed(
    *,
    client: StolonClient,
    query: "AcceptanceQueryV2",
    sort: "AcceptanceSort",
    pagination: "Pagination",
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET
) -> Response[list["Acceptance"]]:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                query: "AcceptanceQueryV2"
        sort: "AcceptanceSort"
        pagination: "Pagination"
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = get_acceptances_multiple_types._get_kwargs(query=query, sort=sort, pagination=pagination, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_acceptances_multiple_types_asyncio(
    *,
    client: StolonClient,
    query: "AcceptanceQueryV2",
    sort: "AcceptanceSort",
    pagination: "Pagination",
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET
) -> list["Acceptance"] | None:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                query: "AcceptanceQueryV2"
        sort: "AcceptanceSort"
        pagination: "Pagination"
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_acceptances_multiple_types._get_kwargs(query=query, sort=sort, pagination=pagination, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_bulk_acceptances_service_scope_sync_detailed(
    *,
    client: StolonClient,
    body: GetBulkAcceptancesServiceScopeBody
) -> Response[list["Acceptance"]]:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: GetBulkAcceptancesServiceScopeBody

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_service_scope._get_kwargs(body=body)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_bulk_acceptances_service_scope_sync(
    *,
    client: StolonClient,
    body: GetBulkAcceptancesServiceScopeBody
) -> list["Acceptance"] | None:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: GetBulkAcceptancesServiceScopeBody

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_service_scope._get_kwargs(body=body)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_bulk_acceptances_service_scope_asyncio_detailed(
    *,
    client: StolonClient,
    body: GetBulkAcceptancesServiceScopeBody
) -> Response[list["Acceptance"]]:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: GetBulkAcceptancesServiceScopeBody

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_service_scope._get_kwargs(body=body)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_bulk_acceptances_service_scope_asyncio(
    *,
    client: StolonClient,
    body: GetBulkAcceptancesServiceScopeBody
) -> list["Acceptance"] | None:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: GetBulkAcceptancesServiceScopeBody

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_service_scope._get_kwargs(body=body)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def delete_acceptance_sync_detailed(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = delete_acceptance._get_kwargs(acceptance_id=acceptance_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def delete_acceptance_asyncio_detailed(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_id: UUID
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """

    # Extract request parameters from generated function
    kwargs = delete_acceptance._get_kwargs(acceptance_id=acceptance_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_bulk_acceptances_by_type_for_account_id_client_scope_sync_detailed(
    *,
    client: StolonClient,
    type_: str,
    account_id: str,
    acceptance_query: "AcceptanceQuery",
    sort: "AcceptanceSort",
    pagination: "Pagination"
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        account_id: str
        acceptance_query: "AcceptanceQuery"
        sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_by_type_for_account_id_client_scope._get_kwargs(type_=type_, account_id=account_id, acceptance_query=acceptance_query, sort=sort, pagination=pagination)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_bulk_acceptances_by_type_for_account_id_client_scope_sync(
    *,
    client: StolonClient,
    type_: str,
    account_id: str,
    acceptance_query: "AcceptanceQuery",
    sort: "AcceptanceSort",
    pagination: "Pagination"
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        account_id: str
        acceptance_query: "AcceptanceQuery"
        sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_by_type_for_account_id_client_scope._get_kwargs(type_=type_, account_id=account_id, acceptance_query=acceptance_query, sort=sort, pagination=pagination)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_bulk_acceptances_by_type_for_account_id_client_scope_asyncio_detailed(
    *,
    client: StolonClient,
    type_: str,
    account_id: str,
    acceptance_query: "AcceptanceQuery",
    sort: "AcceptanceSort",
    pagination: "Pagination"
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        account_id: str
        acceptance_query: "AcceptanceQuery"
        sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_by_type_for_account_id_client_scope._get_kwargs(type_=type_, account_id=account_id, acceptance_query=acceptance_query, sort=sort, pagination=pagination)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_bulk_acceptances_by_type_for_account_id_client_scope_asyncio(
    *,
    client: StolonClient,
    type_: str,
    account_id: str,
    acceptance_query: "AcceptanceQuery",
    sort: "AcceptanceSort",
    pagination: "Pagination"
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                type_: str
        account_id: str
        acceptance_query: "AcceptanceQuery"
        sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_bulk_acceptances_by_type_for_account_id_client_scope._get_kwargs(type_=type_, account_id=account_id, acceptance_query=acceptance_query, sort=sort, pagination=pagination)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def create_acceptance_sync_detailed(
    *,
    client: StolonClient,
    body: Acceptance,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Acceptance]:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: Acceptance
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Acceptance]
    """

    # Extract request parameters from generated function
    kwargs = create_acceptance._get_kwargs(body=body, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Acceptance | None
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_acceptance_sync(
    *,
    client: StolonClient,
    body: Acceptance,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Acceptance | None:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: Acceptance
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Acceptance | None
    """

    # Extract request parameters from generated function
    kwargs = create_acceptance._get_kwargs(body=body, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def create_acceptance_asyncio_detailed(
    *,
    client: StolonClient,
    body: Acceptance,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Acceptance]:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: Acceptance
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Acceptance]
    """

    # Extract request parameters from generated function
    kwargs = create_acceptance._get_kwargs(body=body, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: Acceptance | None
    if body_json and proxy_response.status_code == 200 and Acceptance:
        parsed = Acceptance.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def create_acceptance_asyncio(
    *,
    client: StolonClient,
    body: Acceptance,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET
) -> Acceptance | None:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                body: Acceptance
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Acceptance | None
    """

    # Extract request parameters from generated function
    kwargs = create_acceptance._get_kwargs(body=body, x_clover_merchant_id=x_clover_merchant_id, x_clover_account_id=x_clover_account_id, x_clover_appenv=x_clover_appenv)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body
    import json
    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return Acceptance.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None




def get_acceptances_sync_detailed(
    *,
    client: StolonClient,
    acceptance_query: "AcceptanceQuery",
    acceptance_sort: "AcceptanceSort",
    pagination: "Pagination"
) -> Response[list["Acceptance"]]:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_query: "AcceptanceQuery"
        acceptance_sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = get_acceptances._get_kwargs(acceptance_query=acceptance_query, acceptance_sort=acceptance_sort, pagination=pagination)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_acceptances_sync(
    *,
    client: StolonClient,
    acceptance_query: "AcceptanceQuery",
    acceptance_sort: "AcceptanceSort",
    pagination: "Pagination"
) -> list["Acceptance"] | None:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_query: "AcceptanceQuery"
        acceptance_sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_acceptances._get_kwargs(acceptance_query=acceptance_query, acceptance_sort=acceptance_sort, pagination=pagination)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None




def get_acceptances_asyncio_detailed(
    *,
    client: StolonClient,
    acceptance_query: "AcceptanceQuery",
    acceptance_sort: "AcceptanceSort",
    pagination: "Pagination"
) -> Response[list["Acceptance"]]:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_query: "AcceptanceQuery"
        acceptance_sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        Response[list["Acceptance"]]
    """

    # Extract request parameters from generated function
    kwargs = get_acceptances._get_kwargs(acceptance_query=acceptance_query, acceptance_sort=acceptance_sort, pagination=pagination)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    import json
    from http import HTTPStatus
    from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        try:
            body_json = json.loads(proxy_response.body)
        except json.JSONDecodeError:
            pass

    # Parse response using generated function's parser
    # Explicit type annotation to help type checkers infer the Response[T] generic
    parsed: None | None
    if body_json and proxy_response.status_code == 200 and None:
        parsed = None.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode('utf-8') if proxy_response.body else b'',
        headers=proxy_response.headers,
        parsed=parsed,
    )




def get_acceptances_asyncio(
    *,
    client: StolonClient,
    acceptance_query: "AcceptanceQuery",
    acceptance_sort: "AcceptanceSort",
    pagination: "Pagination"
) -> list["Acceptance"] | None:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                acceptance_query: "AcceptanceQuery"
        acceptance_sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        list["Acceptance"] | None
    """

    # Extract request parameters from generated function
    kwargs = get_acceptances._get_kwargs(acceptance_query=acceptance_query, acceptance_sort=acceptance_sort, pagination=pagination)

    # Prepend base path to URL
    path = "/agreement" + kwargs["url"]

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=path,
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None

