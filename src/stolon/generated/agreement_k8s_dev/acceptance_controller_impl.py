"""
Proxied wrapper functions for agreement-k8s dev - acceptance_controller_impl.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Any, Union
from uuid import UUID

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance import Acceptance
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance_query import (
    AcceptanceQuery,
)
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance_query_v2 import (
    AcceptanceQueryV2,
)
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.acceptance_sort import AcceptanceSort
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.delete_acceptance_with_action_action import (
    DeleteAcceptanceWithActionAction,
)
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.get_bulk_acceptances_service_scope_body import (
    GetBulkAcceptancesServiceScopeBody,
)
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.pagination import Pagination
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def create_bulk_acceptances_sync_detailed(
    *, client: StolonClient, type_: str, body: list["Acceptance"], x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        body: list["Acceptance"]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "body": serialize_argument(body),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.create_bulk_acceptances",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_bulk_acceptances_sync(
    *, client: StolonClient, type_: str, body: list["Acceptance"], x_clover_appenv: Union[Unset, str] = UNSET
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        body: list["Acceptance"]
        x_clover_appenv: Union[Unset, str]

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "body": serialize_argument(body),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.create_bulk_acceptances",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_bulk_acceptances_asyncio_detailed(
    *, client: StolonClient, type_: str, body: list["Acceptance"], x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        body: list["Acceptance"]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "body": serialize_argument(body),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.create_bulk_acceptances",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_bulk_acceptances_asyncio(
    *, client: StolonClient, type_: str, body: list["Acceptance"], x_clover_appenv: Union[Unset, str] = UNSET
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        x_clover_appenv (Union[Unset, str]):
        body (list['Acceptance']):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        body: list["Acceptance"]
        x_clover_appenv: Union[Unset, str]

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "body": serialize_argument(body),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.create_bulk_acceptances",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptance_sync_detailed(
    *, client: StolonClient, acceptance_id: UUID, include_template_parameters: Union[Unset, bool] = UNSET
) -> Response[Acceptance]:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: UUID
        include_template_parameters: Union[Unset, bool]

    Returns:
        Response[Acceptance]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "include_template_parameters": serialize_argument(include_template_parameters),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptance",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptance_sync(
    *, client: StolonClient, acceptance_id: UUID, include_template_parameters: Union[Unset, bool] = UNSET
) -> Acceptance | None:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: UUID
        include_template_parameters: Union[Unset, bool]

    Returns:
        Acceptance | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "include_template_parameters": serialize_argument(include_template_parameters),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptance",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptance_asyncio_detailed(
    *, client: StolonClient, acceptance_id: UUID, include_template_parameters: Union[Unset, bool] = UNSET
) -> Response[Acceptance]:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: UUID
        include_template_parameters: Union[Unset, bool]

    Returns:
        Response[Acceptance]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "include_template_parameters": serialize_argument(include_template_parameters),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptance",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptance_asyncio(
    *, client: StolonClient, acceptance_id: UUID, include_template_parameters: Union[Unset, bool] = UNSET
) -> Acceptance | None:
    """Args:
        acceptance_id (UUID):
        include_template_parameters (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: UUID
        include_template_parameters: Union[Unset, bool]

    Returns:
        Acceptance | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "include_template_parameters": serialize_argument(include_template_parameters),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptance",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def has_previously_accepted_agreements_sync_detailed(
    *, client: StolonClient, type_: str, x_clover_merchant_id: str, x_clover_account_id: str
) -> Response[bool]:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[bool]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        x_clover_merchant_id: str
        x_clover_account_id: str

    Returns:
        Response[bool]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.has_previously_accepted_agreements",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[bool]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def has_previously_accepted_agreements_sync(
    *, client: StolonClient, type_: str, x_clover_merchant_id: str, x_clover_account_id: str
) -> bool | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        bool

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        x_clover_merchant_id: str
        x_clover_account_id: str

    Returns:
        bool | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.has_previously_accepted_agreements",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[bool]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def has_previously_accepted_agreements_asyncio_detailed(
    *, client: StolonClient, type_: str, x_clover_merchant_id: str, x_clover_account_id: str
) -> Response[bool]:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[bool]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        x_clover_merchant_id: str
        x_clover_account_id: str

    Returns:
        Response[bool]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.has_previously_accepted_agreements",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[bool]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def has_previously_accepted_agreements_asyncio(
    *, client: StolonClient, type_: str, x_clover_merchant_id: str, x_clover_account_id: str
) -> bool | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (str):
        x_clover_account_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        bool

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        x_clover_merchant_id: str
        x_clover_account_id: str

    Returns:
        bool | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.has_previously_accepted_agreements",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[bool]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def delete_acceptance_with_action_sync_detailed(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    action: DeleteAcceptanceWithActionAction,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        action (DeleteAcceptanceWithActionAction):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: UUID
        action: DeleteAcceptanceWithActionAction
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "action": serialize_argument(action),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.delete_acceptance_with_action",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def delete_acceptance_with_action_asyncio_detailed(
    *,
    client: StolonClient,
    acceptance_id: UUID,
    action: DeleteAcceptanceWithActionAction,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        action (DeleteAcceptanceWithActionAction):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: UUID
        action: DeleteAcceptanceWithActionAction
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "action": serialize_argument(action),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.delete_acceptance_with_action",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_acceptance_sync_detailed(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
) -> Response[Acceptance]:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Response[Acceptance]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_latest_acceptance",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_acceptance_sync(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
) -> Acceptance | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Acceptance | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_latest_acceptance",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_acceptance_asyncio_detailed(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
) -> Response[Acceptance]:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Response[Acceptance]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_latest_acceptance",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_acceptance_asyncio(
    *,
    client: StolonClient,
    type_: str,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
) -> Acceptance | None:
    """Args:
        type_ (str):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Acceptance | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_latest_acceptance",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptances_multiple_types_sync_detailed(
    *,
    client: StolonClient,
    query: "AcceptanceQueryV2",
    sort: "AcceptanceSort",
    pagination: "Pagination",
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
) -> Response[list["Acceptance"]]:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                query: "AcceptanceQueryV2"
        sort: "AcceptanceSort"
        pagination: "Pagination"
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "query": serialize_argument(query),
        "sort": serialize_argument(sort),
        "pagination": serialize_argument(pagination),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptances_multiple_types",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptances_multiple_types_sync(
    *,
    client: StolonClient,
    query: "AcceptanceQueryV2",
    sort: "AcceptanceSort",
    pagination: "Pagination",
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
) -> list["Acceptance"] | None:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                query: "AcceptanceQueryV2"
        sort: "AcceptanceSort"
        pagination: "Pagination"
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "query": serialize_argument(query),
        "sort": serialize_argument(sort),
        "pagination": serialize_argument(pagination),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptances_multiple_types",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptances_multiple_types_asyncio_detailed(
    *,
    client: StolonClient,
    query: "AcceptanceQueryV2",
    sort: "AcceptanceSort",
    pagination: "Pagination",
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
) -> Response[list["Acceptance"]]:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                query: "AcceptanceQueryV2"
        sort: "AcceptanceSort"
        pagination: "Pagination"
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "query": serialize_argument(query),
        "sort": serialize_argument(sort),
        "pagination": serialize_argument(pagination),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptances_multiple_types",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptances_multiple_types_asyncio(
    *,
    client: StolonClient,
    query: "AcceptanceQueryV2",
    sort: "AcceptanceSort",
    pagination: "Pagination",
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
) -> list["Acceptance"] | None:
    """Args:
        query (AcceptanceQueryV2):
        sort (AcceptanceSort):
        pagination (Pagination):
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                query: "AcceptanceQueryV2"
        sort: "AcceptanceSort"
        pagination: "Pagination"
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "query": serialize_argument(query),
        "sort": serialize_argument(sort),
        "pagination": serialize_argument(pagination),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptances_multiple_types",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_service_scope_sync_detailed(
    *, client: StolonClient, body: GetBulkAcceptancesServiceScopeBody
) -> Response[list["Acceptance"]]:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: GetBulkAcceptancesServiceScopeBody

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_bulk_acceptances_service_scope",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_service_scope_sync(
    *, client: StolonClient, body: GetBulkAcceptancesServiceScopeBody
) -> list["Acceptance"] | None:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: GetBulkAcceptancesServiceScopeBody

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_bulk_acceptances_service_scope",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_service_scope_asyncio_detailed(
    *, client: StolonClient, body: GetBulkAcceptancesServiceScopeBody
) -> Response[list["Acceptance"]]:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: GetBulkAcceptancesServiceScopeBody

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_bulk_acceptances_service_scope",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_service_scope_asyncio(
    *, client: StolonClient, body: GetBulkAcceptancesServiceScopeBody
) -> list["Acceptance"] | None:
    """Args:
        body (GetBulkAcceptancesServiceScopeBody):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: GetBulkAcceptancesServiceScopeBody

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_bulk_acceptances_service_scope",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def delete_acceptance_sync_detailed(
    *, client: StolonClient, acceptance_id: UUID, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: UUID
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.delete_acceptance",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def delete_acceptance_asyncio_detailed(
    *, client: StolonClient, acceptance_id: UUID, x_clover_appenv: Union[Unset, str] = UNSET
) -> Response[Any]:
    """Args:
        acceptance_id (UUID):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Any]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_id: UUID
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Any]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_id": serialize_argument(acceptance_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.delete_acceptance",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Any]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_by_type_for_account_id_client_scope_sync_detailed(
    *,
    client: StolonClient,
    type_: str,
    account_id: str,
    acceptance_query: "AcceptanceQuery",
    sort: "AcceptanceSort",
    pagination: "Pagination",
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        account_id: str
        acceptance_query: "AcceptanceQuery"
        sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "account_id": serialize_argument(account_id),
        "acceptance_query": serialize_argument(acceptance_query),
        "sort": serialize_argument(sort),
        "pagination": serialize_argument(pagination),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_bulk_acceptances_by_type_for_account_id_client_scope",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_by_type_for_account_id_client_scope_sync(
    *,
    client: StolonClient,
    type_: str,
    account_id: str,
    acceptance_query: "AcceptanceQuery",
    sort: "AcceptanceSort",
    pagination: "Pagination",
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        account_id: str
        acceptance_query: "AcceptanceQuery"
        sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "account_id": serialize_argument(account_id),
        "acceptance_query": serialize_argument(acceptance_query),
        "sort": serialize_argument(sort),
        "pagination": serialize_argument(pagination),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_bulk_acceptances_by_type_for_account_id_client_scope",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_by_type_for_account_id_client_scope_asyncio_detailed(
    *,
    client: StolonClient,
    type_: str,
    account_id: str,
    acceptance_query: "AcceptanceQuery",
    sort: "AcceptanceSort",
    pagination: "Pagination",
) -> Response[list["Acceptance"]]:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        account_id: str
        acceptance_query: "AcceptanceQuery"
        sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "account_id": serialize_argument(account_id),
        "acceptance_query": serialize_argument(acceptance_query),
        "sort": serialize_argument(sort),
        "pagination": serialize_argument(pagination),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_bulk_acceptances_by_type_for_account_id_client_scope",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_bulk_acceptances_by_type_for_account_id_client_scope_asyncio(
    *,
    client: StolonClient,
    type_: str,
    account_id: str,
    acceptance_query: "AcceptanceQuery",
    sort: "AcceptanceSort",
    pagination: "Pagination",
) -> list["Acceptance"] | None:
    """Args:
        type_ (str):
        account_id (str):
        acceptance_query (AcceptanceQuery):
        sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        account_id: str
        acceptance_query: "AcceptanceQuery"
        sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "type_": serialize_argument(type_),
        "account_id": serialize_argument(account_id),
        "acceptance_query": serialize_argument(acceptance_query),
        "sort": serialize_argument(sort),
        "pagination": serialize_argument(pagination),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_bulk_acceptances_by_type_for_account_id_client_scope",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_acceptance_sync_detailed(
    *,
    client: StolonClient,
    body: Acceptance,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Acceptance]:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: Acceptance
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Acceptance]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.create_acceptance",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_acceptance_sync(
    *,
    client: StolonClient,
    body: Acceptance,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Acceptance | None:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: Acceptance
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Acceptance | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.create_acceptance",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_acceptance_asyncio_detailed(
    *,
    client: StolonClient,
    body: Acceptance,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Response[Acceptance]:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Acceptance]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: Acceptance
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Response[Acceptance]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.create_acceptance",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_acceptance_asyncio(
    *,
    client: StolonClient,
    body: Acceptance,
    x_clover_merchant_id: Union[Unset, str] = UNSET,
    x_clover_account_id: Union[Unset, str] = UNSET,
    x_clover_appenv: Union[Unset, str] = UNSET,
) -> Acceptance | None:
    """Args:
        x_clover_merchant_id (Union[Unset, str]):
        x_clover_account_id (Union[Unset, str]):
        x_clover_appenv (Union[Unset, str]):
        body (Acceptance):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Acceptance

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: Acceptance
        x_clover_merchant_id: Union[Unset, str]
        x_clover_account_id: Union[Unset, str]
        x_clover_appenv: Union[Unset, str]

    Returns:
        Acceptance | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "body": serialize_argument(body),
        "x_clover_merchant_id": serialize_argument(x_clover_merchant_id),
        "x_clover_account_id": serialize_argument(x_clover_account_id),
        "x_clover_appenv": serialize_argument(x_clover_appenv),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.create_acceptance",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Acceptance]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptances_sync_detailed(
    *,
    client: StolonClient,
    acceptance_query: "AcceptanceQuery",
    acceptance_sort: "AcceptanceSort",
    pagination: "Pagination",
) -> Response[list["Acceptance"]]:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_query: "AcceptanceQuery"
        acceptance_sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_query": serialize_argument(acceptance_query),
        "acceptance_sort": serialize_argument(acceptance_sort),
        "pagination": serialize_argument(pagination),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptances",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptances_sync(
    *,
    client: StolonClient,
    acceptance_query: "AcceptanceQuery",
    acceptance_sort: "AcceptanceSort",
    pagination: "Pagination",
) -> list["Acceptance"] | None:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_query: "AcceptanceQuery"
        acceptance_sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_query": serialize_argument(acceptance_query),
        "acceptance_sort": serialize_argument(acceptance_sort),
        "pagination": serialize_argument(pagination),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptances",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptances_asyncio_detailed(
    *,
    client: StolonClient,
    acceptance_query: "AcceptanceQuery",
    acceptance_sort: "AcceptanceSort",
    pagination: "Pagination",
) -> Response[list["Acceptance"]]:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[list['Acceptance']]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_query: "AcceptanceQuery"
        acceptance_sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        Response[list["Acceptance"]]
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_query": serialize_argument(acceptance_query),
        "acceptance_sort": serialize_argument(acceptance_sort),
        "pagination": serialize_argument(pagination),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptances",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Response[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_acceptances_asyncio(
    *,
    client: StolonClient,
    acceptance_query: "AcceptanceQuery",
    acceptance_sort: "AcceptanceSort",
    pagination: "Pagination",
) -> list["Acceptance"] | None:
    """Args:
        acceptance_query (AcceptanceQuery):
        acceptance_sort (AcceptanceSort):
        pagination (Pagination):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        list['Acceptance']

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                acceptance_query: "AcceptanceQuery"
        acceptance_sort: "AcceptanceSort"
        pagination: "Pagination"

    Returns:
        list["Acceptance"] | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {
        "acceptance_query": serialize_argument(acceptance_query),
        "acceptance_sort": serialize_argument(acceptance_sort),
        "pagination": serialize_argument(pagination),
    }

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="acceptance_controller_impl.get_acceptances",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        'Optional[list["Acceptance"]]',
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]
