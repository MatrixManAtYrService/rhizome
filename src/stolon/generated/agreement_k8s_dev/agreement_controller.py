"""
Proxied wrapper functions for agreement-k8s dev - agreement_controller.

Auto-generated by stolon sync spec - do not edit directly.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.

The underlying OpenAPI client is in stolon.openapi_generated - DO NOT EDIT those files.
These wrapper files in stolon.generated can be customized if needed.
"""

from typing import Union
from uuid import UUID

from stolon.client import StolonClient
from stolon.models import OpenAPIService
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.agreement import Agreement
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.models.agreements import Agreements
from stolon.openapi_generated.agreement_k8s_dev.open_api_definition_client.types import UNSET, Response, Unset
from stolon.serialization import deserialize_result, serialize_argument


def get_latest_agreement_sync_detailed(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Response[Agreement]:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Agreement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Response[Agreement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_sync(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Agreement | None:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Agreement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Agreement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_asyncio_detailed(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Response[Agreement]:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Agreement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Response[Agreement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_asyncio(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Agreement | None:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Agreement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Agreement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_agreement_sync_detailed(*, client: StolonClient, body: Agreement) -> Response[Agreement]:
    """Args:
        body (Agreement):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Agreement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: Agreement

    Returns:
        Response[Agreement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.create_agreement",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_agreement_sync(*, client: StolonClient, body: Agreement) -> Agreement | None:
    """Args:
        body (Agreement):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Agreement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: Agreement

    Returns:
        Agreement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.create_agreement",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_agreement_asyncio_detailed(*, client: StolonClient, body: Agreement) -> Response[Agreement]:
    """Args:
        body (Agreement):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Agreement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: Agreement

    Returns:
        Response[Agreement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.create_agreement",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def create_agreement_asyncio(*, client: StolonClient, body: Agreement) -> Agreement | None:
    """Args:
        body (Agreement):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Agreement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                body: Agreement

    Returns:
        Agreement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"body": serialize_argument(body)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.create_agreement",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_as_html_sync_detailed(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Response[str]:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Response[str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement_as_html",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[str]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_as_html_sync(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> str | None:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        str

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement_as_html",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[str]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_as_html_asyncio_detailed(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Response[str]:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Response[str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement_as_html",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[str]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_as_html_asyncio(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> str | None:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        str

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement_as_html",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[str]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_as_text_sync_detailed(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Response[str]:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Response[str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement_as_text",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[str]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_as_text_sync(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> str | None:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        str

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement_as_text",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[str]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_as_text_asyncio_detailed(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Response[str]:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[str]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Response[str]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement_as_text",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[str]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_latest_agreement_as_text_asyncio(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> str | None:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        str

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        str | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_latest_agreement_as_text",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[str]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_agreement_sync_detailed(*, client: StolonClient, agreement_id: UUID) -> Response[Agreement]:
    """Args:
        agreement_id (UUID):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Agreement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                agreement_id: UUID

    Returns:
        Response[Agreement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"agreement_id": serialize_argument(agreement_id)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_agreement",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_agreement_sync(*, client: StolonClient, agreement_id: UUID) -> Agreement | None:
    """Args:
        agreement_id (UUID):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Agreement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                agreement_id: UUID

    Returns:
        Agreement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"agreement_id": serialize_argument(agreement_id)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_agreement",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_agreement_asyncio_detailed(*, client: StolonClient, agreement_id: UUID) -> Response[Agreement]:
    """Args:
        agreement_id (UUID):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Agreement]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                agreement_id: UUID

    Returns:
        Response[Agreement]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"agreement_id": serialize_argument(agreement_id)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_agreement",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_agreement_asyncio(*, client: StolonClient, agreement_id: UUID) -> Agreement | None:
    """Args:
        agreement_id (UUID):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Agreement

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                agreement_id: UUID

    Returns:
        Agreement | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"agreement_id": serialize_argument(agreement_id)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_agreement",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Agreement]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_agreements_sync_detailed(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Response[Agreements]:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Agreements]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Response[Agreements]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_agreements",
        variant="sync_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Agreements]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_agreements_sync(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Agreements | None:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Agreements

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Agreements | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_agreements",
        variant="sync",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Agreements]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_agreements_asyncio_detailed(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Response[Agreements]:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Agreements]

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Response[Agreements]
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_agreements",
        variant="asyncio_detailed",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Response[Agreements]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]


def get_agreements_asyncio(
    *, client: StolonClient, type_: str, accept_language: Union[Unset, str] = UNSET
) -> Agreements | None:
    """Args:
        type_ (str):
        accept_language (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Agreements

    This function invokes the OpenAPI-generated client function on the stolon server,
    enabling automatic token management, logging, and retry logic.

    Args:
        client: StolonClient instance for invoking server-side functions
                type_: str
        accept_language: Union[Unset, str]

    Returns:
        Agreements | None
    """
    # Serialize arguments for transport
    serialized_kwargs = {"type_": serialize_argument(type_), "accept_language": serialize_argument(accept_language)}

    # Invoke OpenAPI function on server
    response = client.invoke_openapi(
        service=OpenAPIService.AGREEMENT_K8S_DEV,
        function_path="agreement_controller.get_agreements",
        variant="asyncio",
        domain="dev1.dev.clover.com",
        environment_name="dev",
        kwargs=serialized_kwargs,
    )

    # Handle errors
    if not response.success:
        raise RuntimeError(f"OpenAPI invocation failed: {response.error}")

    # Deserialize result
    result = deserialize_result(
        response.result,
        "Optional[Agreements]",
        "agreement_k8s_dev",
    )

    return result  # type: ignore[return-value]
