"""
Proxied wrapper functions for billing-event dev - merchant_offboarding.

Auto-generated by stolon sync spec.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.
"""

import contextlib
import json
from http import HTTPStatus

from stolon.client import StolonClient
from stolon.generated.billing_event_dev.open_api_definition_client.api.merchant_offboarding import (
    create_offboarding,
    get_all_offboardings_by_step,
    get_offboarding_by_merchant_uuid,
)
from stolon.generated.billing_event_dev.open_api_definition_client.models.api_merchant_offboarding import (
    ApiMerchantOffboarding,
)
from stolon.generated.billing_event_dev.open_api_definition_client.types import Response


def get_offboarding_by_merchant_uuid_sync_detailed(*, client: StolonClient) -> Response[ApiMerchantOffboarding]:
    """Get offboarding, gets latest offboarding step or the offboarding by the step parameter or the
    explicit id

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Extract request parameters from generated function
    kwargs = get_offboarding_by_merchant_uuid._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantOffboarding:
        parsed = ApiMerchantOffboarding.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_offboarding_by_merchant_uuid_sync(*, client: StolonClient) -> ApiMerchantOffboarding | None:
    """Get offboarding, gets latest offboarding step or the offboarding by the step parameter or the
    explicit id

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantOffboarding | None
    """
    # Extract request parameters from generated function
    kwargs = get_offboarding_by_merchant_uuid._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantOffboarding.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_offboarding_by_merchant_uuid_asyncio_detailed(*, client: StolonClient) -> Response[ApiMerchantOffboarding]:
    """Get offboarding, gets latest offboarding step or the offboarding by the step parameter or the
    explicit id

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Extract request parameters from generated function
    kwargs = get_offboarding_by_merchant_uuid._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantOffboarding:
        parsed = ApiMerchantOffboarding.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_offboarding_by_merchant_uuid_asyncio(*, client: StolonClient) -> ApiMerchantOffboarding | None:
    """Get offboarding, gets latest offboarding step or the offboarding by the step parameter or the
    explicit id

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantOffboarding | None
    """
    # Extract request parameters from generated function
    kwargs = get_offboarding_by_merchant_uuid._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantOffboarding.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_all_offboardings_by_step_sync_detailed(*, client: StolonClient) -> Response[ApiMerchantOffboarding]:
    """get all offboardings by step and option merchant uuid

    Args:
        merchant_uuid (Union[Unset, str]):
        page_number (Union[Unset, int]):
        page_size (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Extract request parameters from generated function
    kwargs = get_all_offboardings_by_step._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantOffboarding:
        parsed = ApiMerchantOffboarding.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_all_offboardings_by_step_sync(*, client: StolonClient) -> ApiMerchantOffboarding | None:
    """get all offboardings by step and option merchant uuid

    Args:
        merchant_uuid (Union[Unset, str]):
        page_number (Union[Unset, int]):
        page_size (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantOffboarding | None
    """
    # Extract request parameters from generated function
    kwargs = get_all_offboardings_by_step._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantOffboarding.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_all_offboardings_by_step_asyncio_detailed(*, client: StolonClient) -> Response[ApiMerchantOffboarding]:
    """get all offboardings by step and option merchant uuid

    Args:
        merchant_uuid (Union[Unset, str]):
        page_number (Union[Unset, int]):
        page_size (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Extract request parameters from generated function
    kwargs = get_all_offboardings_by_step._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantOffboarding:
        parsed = ApiMerchantOffboarding.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_all_offboardings_by_step_asyncio(*, client: StolonClient) -> ApiMerchantOffboarding | None:
    """get all offboardings by step and option merchant uuid

    Args:
        merchant_uuid (Union[Unset, str]):
        page_number (Union[Unset, int]):
        page_size (Union[Unset, int]):
        x_clover_appenv (Union[Unset, str]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantOffboarding | None
    """
    # Extract request parameters from generated function
    kwargs = get_all_offboardings_by_step._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantOffboarding.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_offboarding_sync_detailed(*, client: StolonClient) -> Response[ApiMerchantOffboarding]:
    """Create offboarding

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (CreateOffboardingRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Extract request parameters from generated function
    kwargs = create_offboarding._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantOffboarding:
        parsed = ApiMerchantOffboarding.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_offboarding_sync(*, client: StolonClient) -> ApiMerchantOffboarding | None:
    """Create offboarding

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (CreateOffboardingRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantOffboarding | None
    """
    # Extract request parameters from generated function
    kwargs = create_offboarding._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantOffboarding.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_offboarding_asyncio_detailed(*, client: StolonClient) -> Response[ApiMerchantOffboarding]:
    """Create offboarding

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (CreateOffboardingRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantOffboarding]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantOffboarding]
    """
    # Extract request parameters from generated function
    kwargs = create_offboarding._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantOffboarding:
        parsed = ApiMerchantOffboarding.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_offboarding_asyncio(*, client: StolonClient) -> ApiMerchantOffboarding | None:
    """Create offboarding

    Args:
        x_clover_appenv (Union[Unset, str]):
        body (CreateOffboardingRequest):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantOffboarding

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantOffboarding | None
    """
    # Extract request parameters from generated function
    kwargs = create_offboarding._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantOffboarding.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None
