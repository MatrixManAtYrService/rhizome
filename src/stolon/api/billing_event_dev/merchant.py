"""
Proxied wrapper functions for billing-event dev - merchant.

Auto-generated by stolon sync spec.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.
"""

import contextlib
import json
from http import HTTPStatus

from stolon.client import StolonClient
from stolon.generated.billing_event_dev.open_api_definition_client.api.merchant import (
    get_as_of_merchant_data_by_merchant_uuid,
    get_merchant_acceptances,
    get_merchant_evolution_by_merchant_uuid,
    get_merchant_evolutions,
    get_resellers_merchant_evolution_by_merchant_uuid,
)
from stolon.generated.billing_event_dev.open_api_definition_client.models.api_as_of_merchant import ApiAsOfMerchant
from stolon.generated.billing_event_dev.open_api_definition_client.models.api_merchant_acceptance import (
    ApiMerchantAcceptance,
)
from stolon.generated.billing_event_dev.open_api_definition_client.models.api_merchant_evolution import (
    ApiMerchantEvolution,
)
from stolon.generated.billing_event_dev.open_api_definition_client.types import Response


def get_merchant_acceptances_sync_detailed(
    *, client: StolonClient
) -> Response[ApiMerchantAcceptance | list["ApiMerchantAcceptance"]]:
    """Get merchant acceptances

    Args:
        merchant_uuid (str):
        agreement_type (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMerchantAcceptance, list['ApiMerchantAcceptance']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantAcceptance | list["ApiMerchantAcceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_acceptances._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_merchant_acceptances_sync(
    *, client: StolonClient
) -> ApiMerchantAcceptance | list["ApiMerchantAcceptance"] | None:
    """Get merchant acceptances

    Args:
        merchant_uuid (str):
        agreement_type (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMerchantAcceptance, list['ApiMerchantAcceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantAcceptance | list["ApiMerchantAcceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_acceptances._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_merchant_acceptances_asyncio_detailed(
    *, client: StolonClient
) -> Response[ApiMerchantAcceptance | list["ApiMerchantAcceptance"]]:
    """Get merchant acceptances

    Args:
        merchant_uuid (str):
        agreement_type (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMerchantAcceptance, list['ApiMerchantAcceptance']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantAcceptance | list["ApiMerchantAcceptance"]]
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_acceptances._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_merchant_acceptances_asyncio(
    *, client: StolonClient
) -> ApiMerchantAcceptance | list["ApiMerchantAcceptance"] | None:
    """Get merchant acceptances

    Args:
        merchant_uuid (str):
        agreement_type (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMerchantAcceptance, list['ApiMerchantAcceptance']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantAcceptance | list["ApiMerchantAcceptance"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_acceptances._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_as_of_merchant_data_by_merchant_uuid_sync_detailed(
    *, client: StolonClient, merchant_uuid: str
) -> Response[ApiAsOfMerchant | list["ApiAsOfMerchant"]]:
    """Get as-of data for the specified merchant UUID

    Args:
        merchant_uuid (str):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiAsOfMerchant, list['ApiAsOfMerchant']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        Response[ApiAsOfMerchant | list["ApiAsOfMerchant"]]
    """
    # Extract request parameters from generated function
    kwargs = get_as_of_merchant_data_by_merchant_uuid._get_kwargs(merchant_uuid=merchant_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_as_of_merchant_data_by_merchant_uuid_sync(
    *, client: StolonClient, merchant_uuid: str
) -> ApiAsOfMerchant | list["ApiAsOfMerchant"] | None:
    """Get as-of data for the specified merchant UUID

    Args:
        merchant_uuid (str):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiAsOfMerchant, list['ApiAsOfMerchant']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        ApiAsOfMerchant | list["ApiAsOfMerchant"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_as_of_merchant_data_by_merchant_uuid._get_kwargs(merchant_uuid=merchant_uuid)

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_as_of_merchant_data_by_merchant_uuid_asyncio_detailed(
    *, client: StolonClient, merchant_uuid: str
) -> Response[ApiAsOfMerchant | list["ApiAsOfMerchant"]]:
    """Get as-of data for the specified merchant UUID

    Args:
        merchant_uuid (str):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiAsOfMerchant, list['ApiAsOfMerchant']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        Response[ApiAsOfMerchant | list["ApiAsOfMerchant"]]
    """
    # Extract request parameters from generated function
    kwargs = get_as_of_merchant_data_by_merchant_uuid._get_kwargs(merchant_uuid=merchant_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_as_of_merchant_data_by_merchant_uuid_asyncio(
    *, client: StolonClient, merchant_uuid: str
) -> ApiAsOfMerchant | list["ApiAsOfMerchant"] | None:
    """Get as-of data for the specified merchant UUID

    Args:
        merchant_uuid (str):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiAsOfMerchant, list['ApiAsOfMerchant']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        ApiAsOfMerchant | list["ApiAsOfMerchant"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_as_of_merchant_data_by_merchant_uuid._get_kwargs(merchant_uuid=merchant_uuid)

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_merchant_evolutions_sync_detailed(
    *, client: StolonClient
) -> Response[ApiMerchantEvolution | list["ApiMerchantEvolution"]]:
    """Get merchant evolution data

    Args:
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMerchantEvolution, list['ApiMerchantEvolution']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantEvolution | list["ApiMerchantEvolution"]]
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_evolutions._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_merchant_evolutions_sync(*, client: StolonClient) -> ApiMerchantEvolution | list["ApiMerchantEvolution"] | None:
    """Get merchant evolution data

    Args:
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMerchantEvolution, list['ApiMerchantEvolution']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantEvolution | list["ApiMerchantEvolution"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_evolutions._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_merchant_evolutions_asyncio_detailed(
    *, client: StolonClient
) -> Response[ApiMerchantEvolution | list["ApiMerchantEvolution"]]:
    """Get merchant evolution data

    Args:
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ApiMerchantEvolution, list['ApiMerchantEvolution']]]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiMerchantEvolution | list["ApiMerchantEvolution"]]
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_evolutions._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_merchant_evolutions_asyncio(
    *, client: StolonClient
) -> ApiMerchantEvolution | list["ApiMerchantEvolution"] | None:
    """Get merchant evolution data

    Args:
        reseller_uuid (Union[Unset, str]):
        start_date (Union[Unset, datetime.date]):
        end_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ApiMerchantEvolution, list['ApiMerchantEvolution']]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiMerchantEvolution | list["ApiMerchantEvolution"] | None
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_evolutions._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_merchant_evolution_by_merchant_uuid_sync_detailed(
    *, client: StolonClient, merchant_uuid: str
) -> Response[ApiMerchantEvolution]:
    """Get merchant evolution data for the specified merchant UUID

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantEvolution]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        Response[ApiMerchantEvolution]
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_evolution_by_merchant_uuid._get_kwargs(merchant_uuid=merchant_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantEvolution:
        parsed = ApiMerchantEvolution.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_merchant_evolution_by_merchant_uuid_sync(
    *, client: StolonClient, merchant_uuid: str
) -> ApiMerchantEvolution | None:
    """Get merchant evolution data for the specified merchant UUID

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantEvolution

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        ApiMerchantEvolution | None
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_evolution_by_merchant_uuid._get_kwargs(merchant_uuid=merchant_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantEvolution.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_merchant_evolution_by_merchant_uuid_asyncio_detailed(
    *, client: StolonClient, merchant_uuid: str
) -> Response[ApiMerchantEvolution]:
    """Get merchant evolution data for the specified merchant UUID

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantEvolution]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        Response[ApiMerchantEvolution]
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_evolution_by_merchant_uuid._get_kwargs(merchant_uuid=merchant_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantEvolution:
        parsed = ApiMerchantEvolution.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_merchant_evolution_by_merchant_uuid_asyncio(
    *, client: StolonClient, merchant_uuid: str
) -> ApiMerchantEvolution | None:
    """Get merchant evolution data for the specified merchant UUID

    Args:
        merchant_uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantEvolution

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                merchant_uuid: str

    Returns:
        ApiMerchantEvolution | None
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_evolution_by_merchant_uuid._get_kwargs(merchant_uuid=merchant_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantEvolution.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_resellers_merchant_evolution_by_merchant_uuid_sync_detailed(
    *, client: StolonClient, reseller_uuid: str, merchant_uuid: str
) -> Response[ApiMerchantEvolution]:
    """Get a reseller's merchant evolution data for the specified reseller UUID and merchant UUID

    Args:
        reseller_uuid (str):
        merchant_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantEvolution]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                reseller_uuid: str
        merchant_uuid: str

    Returns:
        Response[ApiMerchantEvolution]
    """
    # Extract request parameters from generated function
    kwargs = get_resellers_merchant_evolution_by_merchant_uuid._get_kwargs(
        reseller_uuid=reseller_uuid, merchant_uuid=merchant_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantEvolution:
        parsed = ApiMerchantEvolution.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_resellers_merchant_evolution_by_merchant_uuid_sync(
    *, client: StolonClient, reseller_uuid: str, merchant_uuid: str
) -> ApiMerchantEvolution | None:
    """Get a reseller's merchant evolution data for the specified reseller UUID and merchant UUID

    Args:
        reseller_uuid (str):
        merchant_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantEvolution

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                reseller_uuid: str
        merchant_uuid: str

    Returns:
        ApiMerchantEvolution | None
    """
    # Extract request parameters from generated function
    kwargs = get_resellers_merchant_evolution_by_merchant_uuid._get_kwargs(
        reseller_uuid=reseller_uuid, merchant_uuid=merchant_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantEvolution.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_resellers_merchant_evolution_by_merchant_uuid_asyncio_detailed(
    *, client: StolonClient, reseller_uuid: str, merchant_uuid: str
) -> Response[ApiMerchantEvolution]:
    """Get a reseller's merchant evolution data for the specified reseller UUID and merchant UUID

    Args:
        reseller_uuid (str):
        merchant_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiMerchantEvolution]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                reseller_uuid: str
        merchant_uuid: str

    Returns:
        Response[ApiMerchantEvolution]
    """
    # Extract request parameters from generated function
    kwargs = get_resellers_merchant_evolution_by_merchant_uuid._get_kwargs(
        reseller_uuid=reseller_uuid, merchant_uuid=merchant_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_event_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiMerchantEvolution:
        parsed = ApiMerchantEvolution.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_resellers_merchant_evolution_by_merchant_uuid_asyncio(
    *, client: StolonClient, reseller_uuid: str, merchant_uuid: str
) -> ApiMerchantEvolution | None:
    """Get a reseller's merchant evolution data for the specified reseller UUID and merchant UUID

    Args:
        reseller_uuid (str):
        merchant_uuid (str):
        x_clover_appenv (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiMerchantEvolution

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                reseller_uuid: str
        merchant_uuid: str

    Returns:
        ApiMerchantEvolution | None
    """
    # Extract request parameters from generated function
    kwargs = get_resellers_merchant_evolution_by_merchant_uuid._get_kwargs(
        reseller_uuid=reseller_uuid, merchant_uuid=merchant_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiMerchantEvolution.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None
