"""
Proxied wrapper functions for billing-bookkeeper dev - processing_group_dates.

Auto-generated by stolon sync spec.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.
"""

import contextlib
import json
from http import HTTPStatus

from stolon.client import StolonClient
from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.api.processing_group_dates import (
    advance_billing_date,
    advance_cycle_date,
    advance_posting_date,
    advance_settlement_date,
    create_processing_group_dates,
    get_processing_group_dates_by_billing_entity_uuid,
    get_processing_group_dates_by_uuid,
    list_processing_group_dates,
    resolve_processing_group_dates_for_child,
)
from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.models.api_processing_group_dates import (
    ApiProcessingGroupDates,
)
from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response


def resolve_processing_group_dates_for_child_sync_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Resolves the processing group that a child billing entity belongs to and returns the processing
    group's dates

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = resolve_processing_group_dates_for_child._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def resolve_processing_group_dates_for_child_sync(
    *, client: StolonClient, billing_entity_uuid: str
) -> ApiProcessingGroupDates | None:
    """Resolves the processing group that a child billing entity belongs to and returns the processing
    group's dates

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = resolve_processing_group_dates_for_child._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def resolve_processing_group_dates_for_child_asyncio_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Resolves the processing group that a child billing entity belongs to and returns the processing
    group's dates

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = resolve_processing_group_dates_for_child._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def resolve_processing_group_dates_for_child_asyncio(
    *, client: StolonClient, billing_entity_uuid: str
) -> ApiProcessingGroupDates | None:
    """Resolves the processing group that a child billing entity belongs to and returns the processing
    group's dates

    Args:
        billing_entity_uuid (str):
        date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = resolve_processing_group_dates_for_child._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def list_processing_group_dates_sync_detailed(*, client: StolonClient) -> Response[ApiProcessingGroupDates]:
    """Lists processing group dates

    Args:
        name (Union[Unset, str]):
        hierarchy_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = list_processing_group_dates._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def list_processing_group_dates_sync(*, client: StolonClient) -> ApiProcessingGroupDates | None:
    """Lists processing group dates

    Args:
        name (Union[Unset, str]):
        hierarchy_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = list_processing_group_dates._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def list_processing_group_dates_asyncio_detailed(*, client: StolonClient) -> Response[ApiProcessingGroupDates]:
    """Lists processing group dates

    Args:
        name (Union[Unset, str]):
        hierarchy_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = list_processing_group_dates._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def list_processing_group_dates_asyncio(*, client: StolonClient) -> ApiProcessingGroupDates | None:
    """Lists processing group dates

    Args:
        name (Union[Unset, str]):
        hierarchy_type (Union[Unset, str]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = list_processing_group_dates._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_processing_group_dates_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Get processing group dates by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = get_processing_group_dates_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_processing_group_dates_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiProcessingGroupDates | None:
    """Get processing group dates by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = get_processing_group_dates_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_processing_group_dates_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Get processing group dates by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = get_processing_group_dates_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_processing_group_dates_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiProcessingGroupDates | None:
    """Get processing group dates by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = get_processing_group_dates_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def advance_posting_date_sync_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Advance posting date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        posting_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = advance_posting_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def advance_posting_date_sync(*, client: StolonClient, billing_entity_uuid: str) -> ApiProcessingGroupDates | None:
    """Advance posting date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        posting_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = advance_posting_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def advance_posting_date_asyncio_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Advance posting date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        posting_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = advance_posting_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def advance_posting_date_asyncio(*, client: StolonClient, billing_entity_uuid: str) -> ApiProcessingGroupDates | None:
    """Advance posting date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        posting_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = advance_posting_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_processing_group_dates_by_billing_entity_uuid_sync_detailed(
    *, client: StolonClient
) -> Response[ApiProcessingGroupDates]:
    """Get processing group dates by billing entity UUID

    Args:
        billing_entity_uuid (str):
        hierarchy_type (Union[Unset, str]):
        include_name (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = get_processing_group_dates_by_billing_entity_uuid._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_processing_group_dates_by_billing_entity_uuid_sync(*, client: StolonClient) -> ApiProcessingGroupDates | None:
    """Get processing group dates by billing entity UUID

    Args:
        billing_entity_uuid (str):
        hierarchy_type (Union[Unset, str]):
        include_name (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = get_processing_group_dates_by_billing_entity_uuid._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_processing_group_dates_by_billing_entity_uuid_asyncio_detailed(
    *, client: StolonClient
) -> Response[ApiProcessingGroupDates]:
    """Get processing group dates by billing entity UUID

    Args:
        billing_entity_uuid (str):
        hierarchy_type (Union[Unset, str]):
        include_name (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = get_processing_group_dates_by_billing_entity_uuid._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_processing_group_dates_by_billing_entity_uuid_asyncio(
    *, client: StolonClient
) -> ApiProcessingGroupDates | None:
    """Get processing group dates by billing entity UUID

    Args:
        billing_entity_uuid (str):
        hierarchy_type (Union[Unset, str]):
        include_name (Union[Unset, bool]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = get_processing_group_dates_by_billing_entity_uuid._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_processing_group_dates_sync_detailed(*, client: StolonClient) -> Response[ApiProcessingGroupDates]:
    """Create processing group dates

    Args:
        body (ApiProcessingGroupDates):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = create_processing_group_dates._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_processing_group_dates_sync(*, client: StolonClient) -> ApiProcessingGroupDates | None:
    """Create processing group dates

    Args:
        body (ApiProcessingGroupDates):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = create_processing_group_dates._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_processing_group_dates_asyncio_detailed(*, client: StolonClient) -> Response[ApiProcessingGroupDates]:
    """Create processing group dates

    Args:
        body (ApiProcessingGroupDates):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = create_processing_group_dates._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_processing_group_dates_asyncio(*, client: StolonClient) -> ApiProcessingGroupDates | None:
    """Create processing group dates

    Args:
        body (ApiProcessingGroupDates):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = create_processing_group_dates._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def advance_billing_date_sync_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Advance billing date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        billing_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = advance_billing_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def advance_billing_date_sync(*, client: StolonClient, billing_entity_uuid: str) -> ApiProcessingGroupDates | None:
    """Advance billing date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        billing_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = advance_billing_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def advance_billing_date_asyncio_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Advance billing date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        billing_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = advance_billing_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def advance_billing_date_asyncio(*, client: StolonClient, billing_entity_uuid: str) -> ApiProcessingGroupDates | None:
    """Advance billing date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        billing_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = advance_billing_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def advance_settlement_date_sync_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Advance settlement date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        settlement_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = advance_settlement_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def advance_settlement_date_sync(*, client: StolonClient, billing_entity_uuid: str) -> ApiProcessingGroupDates | None:
    """Advance settlement date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        settlement_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = advance_settlement_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def advance_settlement_date_asyncio_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Advance settlement date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        settlement_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = advance_settlement_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def advance_settlement_date_asyncio(
    *, client: StolonClient, billing_entity_uuid: str
) -> ApiProcessingGroupDates | None:
    """Advance settlement date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        settlement_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = advance_settlement_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def advance_cycle_date_sync_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Advance cycle date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        cycle_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = advance_cycle_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def advance_cycle_date_sync(*, client: StolonClient, billing_entity_uuid: str) -> ApiProcessingGroupDates | None:
    """Advance cycle date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        cycle_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = advance_cycle_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def advance_cycle_date_asyncio_detailed(
    *, client: StolonClient, billing_entity_uuid: str
) -> Response[ApiProcessingGroupDates]:
    """Advance cycle date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        cycle_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiProcessingGroupDates]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        Response[ApiProcessingGroupDates]
    """
    # Extract request parameters from generated function
    kwargs = advance_cycle_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiProcessingGroupDates:
        parsed = ApiProcessingGroupDates.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def advance_cycle_date_asyncio(*, client: StolonClient, billing_entity_uuid: str) -> ApiProcessingGroupDates | None:
    """Advance cycle date for a processing group

    Args:
        billing_entity_uuid (str):
        hierarchy_type (str):
        cycle_date (Union[Unset, datetime.date]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiProcessingGroupDates

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                billing_entity_uuid: str

    Returns:
        ApiProcessingGroupDates | None
    """
    # Extract request parameters from generated function
    kwargs = advance_cycle_date._get_kwargs(billing_entity_uuid=billing_entity_uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiProcessingGroupDates.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None
