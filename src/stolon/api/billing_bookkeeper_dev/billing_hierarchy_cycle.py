"""
Proxied wrapper functions for billing-bookkeeper dev - billing_hierarchy_cycle.

Auto-generated by stolon sync spec.
These wrappers route requests through the stolon server for automatic
token management, logging, and retry logic.
"""

import contextlib
import json
from http import HTTPStatus

from stolon.client import StolonClient
from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.api.billing_hierarchy_cycle import (
    create_billing_hierarchy_cycle,
    get_billing_hierarchy_cycle_by_uuid,
    get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date,
    get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date,
    get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date,
    get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date,
    populate_developer_cycle_entries_for_processing_group,
    populate_merchant_cycle_entries_for_processing_group,
    populate_reseller_cycle_entries_for_processing_group,
    purge_cycle_entries_by_processing_group_and_hierarchy_type,
)
from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.models.api_billing_hierarchy_cycle import (
    ApiBillingHierarchyCycle,
)
from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response


def create_billing_hierarchy_cycle_sync_detailed(*, client: StolonClient) -> Response[ApiBillingHierarchyCycle]:
    """Create billing hierarchy cycle entry

    Args:
        body (ApiBillingHierarchyCycle):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = create_billing_hierarchy_cycle._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_billing_hierarchy_cycle_sync(*, client: StolonClient) -> ApiBillingHierarchyCycle | None:
    """Create billing hierarchy cycle entry

    Args:
        body (ApiBillingHierarchyCycle):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = create_billing_hierarchy_cycle._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def create_billing_hierarchy_cycle_asyncio_detailed(*, client: StolonClient) -> Response[ApiBillingHierarchyCycle]:
    """Create billing hierarchy cycle entry

    Args:
        body (ApiBillingHierarchyCycle):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = create_billing_hierarchy_cycle._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def create_billing_hierarchy_cycle_asyncio(*, client: StolonClient) -> ApiBillingHierarchyCycle | None:
    """Create billing hierarchy cycle entry

    Args:
        body (ApiBillingHierarchyCycle):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = create_billing_hierarchy_cycle._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def populate_merchant_cycle_entries_for_processing_group_sync_detailed(*, client: StolonClient) -> Response[int]:
    """Populate merchant billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[int]
    """
    # Extract request parameters from generated function
    kwargs = populate_merchant_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def populate_merchant_cycle_entries_for_processing_group_sync(*, client: StolonClient) -> int | None:
    """Populate merchant billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        int | None
    """
    # Extract request parameters from generated function
    kwargs = populate_merchant_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def populate_merchant_cycle_entries_for_processing_group_asyncio_detailed(*, client: StolonClient) -> Response[int]:
    """Populate merchant billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[int]
    """
    # Extract request parameters from generated function
    kwargs = populate_merchant_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def populate_merchant_cycle_entries_for_processing_group_asyncio(*, client: StolonClient) -> int | None:
    """Populate merchant billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        int | None
    """
    # Extract request parameters from generated function
    kwargs = populate_merchant_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date_sync_detailed(
    *, client: StolonClient, processing_group_uuid: str
) -> Response[ApiBillingHierarchyCycle]:
    """Get billing hierarchy cycle entries for merchants by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date_sync(
    *, client: StolonClient, processing_group_uuid: str
) -> ApiBillingHierarchyCycle | None:
    """Get billing hierarchy cycle entries for merchants by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio_detailed(
    *, client: StolonClient, processing_group_uuid: str
) -> Response[ApiBillingHierarchyCycle]:
    """Get billing hierarchy cycle entries for merchants by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio(
    *, client: StolonClient, processing_group_uuid: str
) -> ApiBillingHierarchyCycle | None:
    """Get billing hierarchy cycle entries for merchants by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_merchant_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date_sync_detailed(
    *, client: StolonClient, processing_group_uuid: str
) -> Response[ApiBillingHierarchyCycle]:
    """Get billing hierarchy cycle entries for resellers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date_sync(
    *, client: StolonClient, processing_group_uuid: str
) -> ApiBillingHierarchyCycle | None:
    """Get billing hierarchy cycle entries for resellers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio_detailed(
    *, client: StolonClient, processing_group_uuid: str
) -> Response[ApiBillingHierarchyCycle]:
    """Get billing hierarchy cycle entries for resellers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio(
    *, client: StolonClient, processing_group_uuid: str
) -> ApiBillingHierarchyCycle | None:
    """Get billing hierarchy cycle entries for resellers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_reseller_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def purge_cycle_entries_by_processing_group_and_hierarchy_type_sync_detailed(
    *, client: StolonClient, processing_group_uuid: str
) -> Response[int]:
    """Purge billing hierarchy cycle entries for the processing group and hierarchy type where the cycle
    date is before the specified date

    Args:
        processing_group_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        page_size (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        Response[int]
    """
    # Extract request parameters from generated function
    kwargs = purge_cycle_entries_by_processing_group_and_hierarchy_type._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def purge_cycle_entries_by_processing_group_and_hierarchy_type_sync(
    *, client: StolonClient, processing_group_uuid: str
) -> int | None:
    """Purge billing hierarchy cycle entries for the processing group and hierarchy type where the cycle
    date is before the specified date

    Args:
        processing_group_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        page_size (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        int | None
    """
    # Extract request parameters from generated function
    kwargs = purge_cycle_entries_by_processing_group_and_hierarchy_type._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def purge_cycle_entries_by_processing_group_and_hierarchy_type_asyncio_detailed(
    *, client: StolonClient, processing_group_uuid: str
) -> Response[int]:
    """Purge billing hierarchy cycle entries for the processing group and hierarchy type where the cycle
    date is before the specified date

    Args:
        processing_group_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        page_size (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        Response[int]
    """
    # Extract request parameters from generated function
    kwargs = purge_cycle_entries_by_processing_group_and_hierarchy_type._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def purge_cycle_entries_by_processing_group_and_hierarchy_type_asyncio(
    *, client: StolonClient, processing_group_uuid: str
) -> int | None:
    """Purge billing hierarchy cycle entries for the processing group and hierarchy type where the cycle
    date is before the specified date

    Args:
        processing_group_uuid (str):
        hierarchy_type (str):
        date (datetime.date):
        page_size (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        int | None
    """
    # Extract request parameters from generated function
    kwargs = purge_cycle_entries_by_processing_group_and_hierarchy_type._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date_sync_detailed(
    *, client: StolonClient
) -> Response[ApiBillingHierarchyCycle]:
    """Get billing hierarchy cycle entries by merchant, reseller, or developer billing entity UUID and/or
    cycle date

    Args:
        billing_entity_uuid (Union[Unset, str]):
        cycle_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date_sync(
    *, client: StolonClient
) -> ApiBillingHierarchyCycle | None:
    """Get billing hierarchy cycle entries by merchant, reseller, or developer billing entity UUID and/or
    cycle date

    Args:
        billing_entity_uuid (Union[Unset, str]):
        cycle_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date_asyncio_detailed(
    *, client: StolonClient
) -> Response[ApiBillingHierarchyCycle]:
    """Get billing hierarchy cycle entries by merchant, reseller, or developer billing entity UUID and/or
    cycle date

    Args:
        billing_entity_uuid (Union[Unset, str]):
        cycle_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date_asyncio(
    *, client: StolonClient
) -> ApiBillingHierarchyCycle | None:
    """Get billing hierarchy cycle entries by merchant, reseller, or developer billing entity UUID and/or
    cycle date

    Args:
        billing_entity_uuid (Union[Unset, str]):
        cycle_date (Union[Unset, datetime.date]):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_cycle_entries_by_billing_entity_uuid_and_or_cycle_date._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_billing_hierarchy_cycle_by_uuid_sync_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiBillingHierarchyCycle]:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_cycle_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_billing_hierarchy_cycle_by_uuid_sync(*, client: StolonClient, uuid: str) -> ApiBillingHierarchyCycle | None:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_cycle_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_billing_hierarchy_cycle_by_uuid_asyncio_detailed(
    *, client: StolonClient, uuid: str
) -> Response[ApiBillingHierarchyCycle]:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_cycle_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_billing_hierarchy_cycle_by_uuid_asyncio(*, client: StolonClient, uuid: str) -> ApiBillingHierarchyCycle | None:
    """Get a billing hierarchy by UUID

    Args:
        uuid (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                uuid: str

    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_billing_hierarchy_cycle_by_uuid._get_kwargs(uuid=uuid)

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date_sync_detailed(
    *, client: StolonClient, processing_group_uuid: str
) -> Response[ApiBillingHierarchyCycle]:
    """Get billing hierarchy cycle entries for developers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date_sync(
    *, client: StolonClient, processing_group_uuid: str
) -> ApiBillingHierarchyCycle | None:
    """Get billing hierarchy cycle entries for developers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio_detailed(
    *, client: StolonClient, processing_group_uuid: str
) -> Response[ApiBillingHierarchyCycle]:
    """Get billing hierarchy cycle entries for developers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[ApiBillingHierarchyCycle]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        Response[ApiBillingHierarchyCycle]
    """
    # Extract request parameters from generated function
    kwargs = get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    if body_json and proxy_response.status_code == 200 and ApiBillingHierarchyCycle:
        parsed = ApiBillingHierarchyCycle.from_dict(body_json)
    else:
        parsed = None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date_asyncio(
    *, client: StolonClient, processing_group_uuid: str
) -> ApiBillingHierarchyCycle | None:
    """Get billing hierarchy cycle entries for developers by processing group UUID and cycle date

    Args:
        processing_group_uuid (str):
        cycle_date (datetime.date):
        page_size (Union[Unset, int]):
        page_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        ApiBillingHierarchyCycle

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests
                processing_group_uuid: str

    Returns:
        ApiBillingHierarchyCycle | None
    """
    # Extract request parameters from generated function
    kwargs = get_developer_cycle_entries_by_processing_group_uuid_and_cycle_date._get_kwargs(
        processing_group_uuid=processing_group_uuid
    )

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response body

    if proxy_response.body and proxy_response.status_code == 200:
        try:
            body_json = json.loads(proxy_response.body)
            return ApiBillingHierarchyCycle.from_dict(body_json)
        except (json.JSONDecodeError, KeyError, TypeError):
            pass
    return None


def populate_reseller_cycle_entries_for_processing_group_sync_detailed(*, client: StolonClient) -> Response[int]:
    """Populate reseller billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[int]
    """
    # Extract request parameters from generated function
    kwargs = populate_reseller_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def populate_reseller_cycle_entries_for_processing_group_sync(*, client: StolonClient) -> int | None:
    """Populate reseller billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        int | None
    """
    # Extract request parameters from generated function
    kwargs = populate_reseller_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def populate_reseller_cycle_entries_for_processing_group_asyncio_detailed(*, client: StolonClient) -> Response[int]:
    """Populate reseller billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[int]
    """
    # Extract request parameters from generated function
    kwargs = populate_reseller_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def populate_reseller_cycle_entries_for_processing_group_asyncio(*, client: StolonClient) -> int | None:
    """Populate reseller billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        int | None
    """
    # Extract request parameters from generated function
    kwargs = populate_reseller_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def populate_developer_cycle_entries_for_processing_group_sync_detailed(*, client: StolonClient) -> Response[int]:
    """Populate developer billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[int]
    """
    # Extract request parameters from generated function
    kwargs = populate_developer_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def populate_developer_cycle_entries_for_processing_group_sync(*, client: StolonClient) -> int | None:
    """Populate developer billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        int | None
    """
    # Extract request parameters from generated function
    kwargs = populate_developer_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None


def populate_developer_cycle_entries_for_processing_group_asyncio_detailed(*, client: StolonClient) -> Response[int]:
    """Populate developer billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[int]

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        Response[int]
    """
    # Extract request parameters from generated function
    kwargs = populate_developer_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    proxy_response = client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # Parse response into Response object (detailed variant)
    from stolon.generated.billing_bookkeeper_dev.open_api_definition_client.types import Response

    # Parse body if JSON
    body_json = None
    if proxy_response.body:
        with contextlib.suppress(json.JSONDecodeError):
            body_json = json.loads(proxy_response.body)

    # Parse response using generated function's parser
    parsed = None.from_dict(body_json) if False else None

    return Response(
        status_code=HTTPStatus(proxy_response.status_code),
        content=proxy_response.body.encode("utf-8") if proxy_response.body else b"",
        headers=proxy_response.headers,
        parsed=parsed,
    )


def populate_developer_cycle_entries_for_processing_group_asyncio(*, client: StolonClient) -> int | None:
    """Populate developer billing hierarchy cycles entries for a processing group

    Args:
        processing_group_uuid (str):
        chunk_size (Union[Unset, int]):
        chunk_number (Union[Unset, int]):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        int

    This function wraps the generated OpenAPI client to proxy requests through
    the stolon server, enabling automatic token management and logging.

    Args:
        client: StolonClient instance for proxying requests


    Returns:
        int | None
    """
    # Extract request parameters from generated function
    kwargs = populate_developer_cycle_entries_for_processing_group._get_kwargs()

    # Proxy request through stolon server
    client.proxy_request(
        domain="dev1.dev.clover.com",
        method=kwargs["method"],
        path=kwargs["url"],
        environment_name="dev",
        json_body=kwargs.get("json"),
        params=kwargs.get("params"),
        timeout=30.0,
    )

    # No response model, return None
    return None
